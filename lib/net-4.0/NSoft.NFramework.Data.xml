<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NSoft.NFramework.Data</name>
  </assembly>
  <members>
    <member name="T:NSoft.NFramework.Data.AdoPoco.AdoProviderBase">
      <summary>
        <see cref="T:NSoft.NFramework.Data.AdoPoco.IAdoProvider" />의 기본 추상 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.IAdoProvider">
      <summary>
            AdoDatabase 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.IAdoProvider.AbortTransaction">
      <summary>
            Transaction 을 중단합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.IAdoProvider.CompleteTransaction">
      <summary>
            Transaction을 완료합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.Connection">
      <summary>
            Database Connection
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.ProviderName">
      <summary>
            Database Provider name (예 : System.Data.SqlClient 등)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.ProviderFactory">
      <summary>
            Database Provider Factory
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.ConnectionString">
      <summary>
            Database connection string
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.DatabaseKind">
      <summary>
            Database 종류
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.ParameterPrefix">
      <summary>
            Parameter Prefix
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.EnableAutoSelect">
      <summary>
            자동으로 SELECT 구문이 가능하도록 할 것인지 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.EnableNamedParams">
      <summary>
            Named Parameter 를 지원할 것인지 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.ForceDateTimesToUtc">
      <summary>
            DateTime 기준을 UTC 로 할 것인지 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.KeepConnectionAlive">
      <summary>
            Connection을 IAdoProvider 인스턴스의 생명주기와 같이 계속 열어둘 것인가?
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.IAdoProvider.NameMapper">
      <summary>
            Column 명 - Property 명 매핑을 담당하는 Mapper 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.InitializeDatabase">
      <summary>
            IAdoDatabase에 대한 초기화
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.OpenSharedConnection">
      <summary>
            Connection을 엽니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.CloseSharedConnection">
      <summary>
            Connection을 닫습니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.GetTransaction">
      <summary>
            현 IAdoDatabase용 <see cref="T:NSoft.NFramework.Data.AdoPoco.IAdoTransaction" /> 인스턴스를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.BeginTransaction">
      <summary>
            Transaction을 시작합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.CompleteTransaction">
      <summary>
            Transaction을 완료합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.AbortTransaction">
      <summary>
            Transaction을 취소합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.CreateCommand(System.Data.Common.DbConnection,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="connection" />에서 실행할 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="connection">
      </param>
      <param name="sql">
      </param>
      <param name="adoParams">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.OnExecutingCommand(System.Data.Common.DbCommand)">
      <summary>
            지정한 Command 를 실행하기 전에 호출되는 Event handler 입니다.
            </summary>
      <param name="cmd">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.OnExecutedCommand(System.Data.Common.DbCommand)">
      <summary>
            지정한 Command에 대한 실행을 완료했을 때 발생하는 Event Handler 입니다.
            </summary>
      <param name="cmd">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.OnException(System.Exception)">
      <summary>
            예외가 발생했을 때 호출되는 Event Handler 입니다.
            </summary>
      <param name="ex">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.Query``1(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             지정한 조회용 쿼리문을 수행하여, 결과를 {T} 수형의 컬렉션으로 반환합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sql">
      </param>
      <param name="firstResult">
      </param>
      <param name="maxResults">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.QueryAsync``1(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             지정한 조회용 쿼리문을 수행하여, 결과를 {T} 수형의 컬렉션으로 반환합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sql">
      </param>
      <param name="firstResult">
      </param>
      <param name="maxResults">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.Connection">
      <summary>
            Database Connection
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.ProviderName">
      <summary>
            Database Provider name (예 : System.Data.SqlClient 등)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.ConnectionString">
      <summary>
            Database connection string
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.DatabaseKind">
      <summary>
            Database 종류
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.ParameterPrefix">
      <summary>
            Parameter Prefix
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.EnableAutoSelect">
      <summary>
            자동으로 SELECT 구문이 가능하도록 할 것인지 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.EnableNamedParams">
      <summary>
            Named Parameter 를 지원할 것인지 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.ForceDateTimesToUtc">
      <summary>
            DateTime 기준을 UTC 로 할 것인지 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.KeepConnectionAlive">
      <summary>
            Connection을 IAdoProvider 인스턴스의 생명주기와 같이 계속 열어둘 것인가?
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.AdoProviderBase.NameMapper">
      <summary>
            Column 명 - Property 명 매핑을 담당하는 Mapper 
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.SqlCeProvider">
      <summary>
      </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.SqlServerProvider">
      <summary>
      </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.AdoProviderFactory">
      <summary>
        <see cref="T:NSoft.NFramework.Data.AdoPoco.IAdoProvider" /> 인스턴스를 생성하는 Factory 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.AdoProviderTool">
      <summary>
        <see cref="T:NSoft.NFramework.Data.AdoPoco.IAdoProvider" />에 대한 Extension Method 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.AdoTransaction">
      <summary>
            Transaction 클래스
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.IAdoTransaction">
      <summary>
            Transaction 정보
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.IAdoTransaction.Complete">
      <summary>
            Transaction 을 완료합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoTransaction.Complete">
      <summary>
            Transaction 을 완료합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.AdoTransaction.Dispose">
      <summary>
            관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 응용 프로그램 정의 작업을 수행합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.SqlBuilder">
      <summary>
            SQL 문자열을 빌드하는 헬퍼 클래스입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.SqlBuilder.SQL">
      <summary>
            완성된 SQL 문장을 반환합니다.    
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoPoco.SqlBuilder.Arguments">
      <summary>
            완성된 SQL 문장에 쓰인 인자 정보를 반환합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoPoco.SqlBuilder.SqlJoinClause">
      <summary>
            Join 과 관련된 절을 빌드하는 클래스입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoPoco.SqlBuilder.SqlJoinClause.On(System.String,System.Object[])">
      <summary>
            Join 문의 ON 에 해당하는 Clause 를 추가합니다.
            </summary>
      <param name="onClause">
      </param>
      <param name="args">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoRepositoryEx">
      <summary>
            AdoRepository에 대한 비동기 작업 (Future) (<see cref="T:System.Threading.Tasks.Task" />) 에 대한 확장 메소드입니다.
            </summary>
      <summary>
            ADO.NET DataReader, DataTable 을 Persistent object로 매핑하는 작업을 비동기적으로 수행할 수 있도록 하는 Extension Method
            </summary>
      <summary>
            ADO.NET DataReader, DataTable 을 Persistent object로 매핑하는 작업을 비동기적으로 수행할 수 있도록 하는 Extension Method
            </summary>
      <summary>
            ADO.NET DataReader, DataTable 을 Persistent object로 매핑하는 작업을 비동기적으로 수행할 수 있도록 하는 Extension Method
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetDataAdapter(NSoft.NFramework.Data.IAdoRepository)">
      <summary>
            Create <see cref="T:System.Data.Common.DbDataAdapter" /></summary>
      <returns>Inatance of <see cref="T:System.Data.Common.DbDataAdapter" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetCommand(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리문을 CommendText로 가지는 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="query">simple query string or procedure name or queryKey of QueryProvider ([Section,] QueryName)</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetCommand(NSoft.NFramework.Data.IAdoRepository,System.String,System.Boolean)">
      <summary>
            지정된 쿼리문을 CommendText로 가지는 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="query">simple query string or procedure name or queryKey of QueryProvider ([Section,] QueryName)</param>
      <param name="discoverParams">discover parameters</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetSqlStringCommand(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Get <see cref="T:System.Data.Common.DbCommand" /> which CommandText is sqlString, build up parameters by parameters
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="sqlString">simple query string</param>
      <param name="parameters">collection of parameter</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetProcedureCommand(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Stored Procedure를 실행할 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">procedure name</param>
      <param name="parameters">collection of parameter</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetProcedureCommand(NSoft.NFramework.Data.IAdoRepository,System.String,System.Boolean,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Stored Procedure를 실행할 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">프로시저 명</param>
      <param name="discoverParams">DbCommand 인자를 DB에서 확인할 것인지 여부</param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetProcedureCommandWithSourceColumn(NSoft.NFramework.Data.IAdoRepository,System.String,System.String[])">
      <summary>
            DataSet 변경 정보를 DB에 한꺼번에 적용하기 위해 Insert, Update, Delete Command를 제공해야 하는데,
            이 때는 DataSet의 Source Column과 Command의 Parameter 이름을 매핑되어 있어야 한다.
            이를 위해 Stored Procudure용 Command의 Parameter Name을 sourceColumns 것으로 교체한다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">프로시저 명</param>
      <param name="sourceColumns">소스 컬럼명의 배열</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetNamedQueryCommand(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            QueryProvider에서 제공하는 Query로 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="queryKey">[Section,] QueryName 형태의 쿼리 키</param>
      <param name="parameters">parameter collection</param>
      <returns>DbCommand instance</returns>
      <exception cref="T:System.InvalidOperationException">QueryProvider 속성이 null일때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.GetNamedQueryCommand(NSoft.NFramework.Data.IAdoRepository,System.String,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            QueryProvider에서 제공하는 Query로 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="section">Section Name</param>
      <param name="queryName">쿼리 명</param>
      <param name="parameters">parameter collection</param>
      <returns>DbCommand instance</returns>
      <exception cref="T:System.InvalidOperationException">QueryProvider 속성이 null일 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.Count(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="cmd">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.Count(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리 문을 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="query">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.CountBySqlString(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리 문을 실행한 결과 셋의 레코드 갯수를 구한다. (SQL 문장이 SQL Count() 함수 문장으로 변환이 가능하다면 속도가 가장 빠르다.)
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="sqlString">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수로 변환할 수 있는 SQL문장이라면, 변환하여 Count 값을 가져오고, 
            불가능하다면 IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다. 
            </remarks>
      <seealso cref="M:NSoft.NFramework.Data.AdoTool.GetCountingSqlString(System.String)" />
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.CountByProcedure(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리 문을 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.Exists(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 Command의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.Exists(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 쿼리 문의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsBySqlString(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 쿼리 문의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsByProcedure(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 Procedure의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteCommand(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 수행하고, RETURN_VALUE를 반환합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">인자</param>
      <returns>Procedure인 경우 return value를 반환한다. 반환값이 없으면 0을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteProcedure(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Stored Procedure를 실행하고, Parameter의 Direction이 INPUT이 아닌 Parameter들을 반환한다. (InputOutput, Output, ReturnValue)
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">실행할 Procedure 이름</param>
      <param name="parameters">인자</param>
      <returns>INPUT을 제외한 Oupput, InputOutput, ReturnValue에 해당하는 Parameter 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteEntity``1(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand,``0,NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 Entity의 속성 값을 이용하여 Command의 Parameter 값을 설정하고, 실행시킨다.
            일반적으로 Save / Update시에 활용하면 좋다.
            </summary>
      <typeparam name="T">Persistent object 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="cmd">수행할 Command 객체</param>
      <param name="entity">처리할 Persistent object</param>
      <param name="nameMaps">ParameterName of Procedure = Property Name of Persistent object 매핑 정보</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteEntity``1(NSoft.NFramework.Data.IAdoRepository,System.String,``0,NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 Entity의 속성 값을 이용하여 Procedure의 Parameter 값을 설정하고, 실행시킨다.
            일반적으로 Save / Update시에 활용하면 좋다.
            </summary>
      <typeparam name="T">Persistent object 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">수행할 Procedure 명</param>
      <param name="entity">Persistent object</param>
      <param name="nameMaps">ParameterName of Procedure = Property Name of Persistent object</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteEntity``1(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand,``0,NSoft.NFramework.Data.Mappers.INameMapper)">
      <summary>
            지정된 Procedure를 수행한다. 인자로 entity의 속성값을 이용한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="entity">실행할 Entity</param>
      <param name="nameMapper">Name Mapping Class</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteEntity``1(NSoft.NFramework.Data.IAdoRepository,System.String,``0,NSoft.NFramework.Data.Mappers.INameMapper)">
      <summary>
            지정된 Procedure를 수행한다. 인자로 entity의 속성값을 이용한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="entity">실행할 Entity</param>
      <param name="nameMapper">Name Mapping Class</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.LoadDataSet(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand,System.Data.DataSet,System.String[])">
      <summary>
            Command를 실행시켜, 결과 셋을 DataSet에 저장한다.<br />
            여러 ResultSet을 반환하는 경우 각각의 ResultSet에 대응하는 TableName을 제공해야 합니다.
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="cmd">실행할 Command</param>
      <param name="targetDataSet">
      </param>
      <param name="tableNames">
      </param>
      <example>
        <code>
            // Region 전체 정보 및 갯수를 가져옵니다.
            string query = "select * from Region; select count(*) from Region";
            
            DataSet ds = new DataSet();
            using (DbCommand cmd = Impl.GetSqlStringCommand(query))
            {
            	Impl.LoadDataSet(cmd, ds, new string[] { "Region", "CountOfRegion" });
            	Assert.AreEqual(2, ds.Tables.Count);
            	Assert.AreEqual(4, ds.Tables[1].Rows[0][0]);
            }
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.UpdateDataSet(NSoft.NFramework.Data.IAdoRepository,System.Data.DataSet,System.String,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,Microsoft.Practices.EnterpriseLibrary.Data.UpdateBehavior,System.Int32)">
      <summary>
            Update DataSet with commands
            </summary>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="dataSet">DataSet to update</param>
      <param name="tableName">table name to update</param>
      <param name="insertCommand">command to insert</param>
      <param name="updateCommand">command to update</param>
      <param name="deleteCommand">command to delete</param>
      <param name="updateBehavior">Behavior to update</param>
      <param name="updateBatchSize">batch size to update</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataSetAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataSet을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataSet을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataSetAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataSet을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="firstResult">첫번째 레코드 인덱스</param>
      <param name="maxResults">최대 레코드 갯수</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataSet을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataSetByQueryStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataSet을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataSet을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataSetByQueryStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataSet을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="firstResult">첫번째 레코드 인덱스</param>
      <param name="maxResults">최대 레코드 갯수</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataSet을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataSetByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 Procedure를 실행해서, DataSet을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataSet을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataSetByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 Procedure를 실행해서, DataSet을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="firstResult">첫번째 레코드 인덱스</param>
      <param name="maxResults">최대 레코드 갯수</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataSet을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataTableAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 수행하여 DataTable을 반환하는 작업을 빌드합니다.
            </summary>
      <param name="repository">
      </param>
      <param name="query">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataTableAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="firstResult">첫번째 레코드 인덱스</param>
      <param name="maxResults">최대 레코드 갯수</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataTableByQueryStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataTableByQueryStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, DataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="firstResult">첫번째 레코드 인덱스</param>
      <param name="maxResults">최대 레코드 갯수</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataTableByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 Procedure를 실행해서, DataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteDataTableByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 Procedure를 실행해서, DataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="firstResult">첫번째 레코드 인덱스</param>
      <param name="maxResults">최대 레코드 갯수</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecutePagingDataTableAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, PagingDataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="pageIndex">Page index (0부터 시작합니다.)</param>
      <param name="pageSize">Page당 Item 수 (보통 10개)</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>PagingDataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecutePagingDataTableByQueryStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 쿼리문을 실행해서, PagingDataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="pageIndex">Page index (0부터 시작합니다.)</param>
      <param name="pageSize">Page당 Item 수 (보통 10개)</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>PagingDataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecutePagingDataTableByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 Procedure를 실행해서, PagingDataTable을 반환하는 Task를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="pageIndex">Page index (0부터 시작합니다.)</param>
      <param name="pageSize">Page당 Item 수 (보통 10개)</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>DataTable을 반환하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteNonQueryAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQuery(System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="parameters">Parameters</param>
      <returns>영향받는 레코드수를 결과값으로 제공하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteNonQueryByProcedureTask(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQueryByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">Procedure의 Parameters</param>
      <returns>영향받는 레코드수를 결과값으로 제공하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteNonQueryBySqlStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQueryBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스</param>
      <param name="sqlString">실행할 SQL 문</param>
      <param name="parameters">SQL의 Parameters</param>
      <returns>영향받는 레코드수를 결과값으로 제공하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteReaderAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 작업을 <paramref name="query" />를 수행하여, <see cref="T:System.Data.IDataReader" />를 결과값으로 제공하는 Task를 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="parameters">Parameters</param>
      <returns>결과셋을 IDataReader 로 결과를 제공하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteReaderByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 작업을 <paramref name="spName" />를 수행하여, <see cref="T:System.Data.IDataReader" />를 결과값으로 제공하는 Task를 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">Parameters</param>
      <returns>결과셋을 IDataReader 로 결과를 제공하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteReaderBySqlStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기 방식으로 작업을 <paramref name="sqlString" />를 수행하여, <see cref="T:System.Data.IDataReader" />를 결과값으로 제공하는 Task를 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">Parameters</param>
      <returns>결과셋을 IDataReader 로 결과를 제공하는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteScalarAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalar(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 를 
            비동기 방식으로 수행하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스</param>
      <param name="query">실행할 쿼리 문</param>
      <param name="parameters">파라미터 정보</param>
      <returns>Scalar 값을 결과값으로 가진 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteScalarTaskByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalarByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기 방식으로 수행하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">파라미터 정보</param>
      <returns>Scalar 값을 결과값으로 가진 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteScalarBySqlStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalarBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기 방식으로 수행하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스</param>
      <param name="sqlString">실행할 쿼리 문</param>
      <param name="parameters">파라미터 정보</param>
      <returns>Scalar 값을 결과값으로 가진 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.CountAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.Count(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 인스턴스</param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>Count 수를 결과로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.CountByProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.CountByProcedure(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 인스턴스</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>Count 수를 결과로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.CountBySqlStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.CountBySqlString(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 인스턴스</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">패러미터</param>
      <returns>Count 수를 결과로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.Exists(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 인스턴스</param>
      <param name="query">실행할 쿼리문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>Exists 결과를 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsByProdedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsByProcedure(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 인스턴스</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>Exists 결과를 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsBySqlStringAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExistsBySqlString(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])" />를 비동기 방식으로 수행합니다.
            </summary>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 인스턴스</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">패러미터</param>
      <returns>Exists 결과를 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteProcedureAsync(NSoft.NFramework.Data.IAdoRepository,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" />의 Procedure를 실행하고, 
            Procedure Parameter 중에 <see cref="T:System.Data.ParameterDirection" />중에 Input만 제외한 나머지 Parameter들을 반환합니다.
            </summary>
      <param name="repository">
      </param>
      <param name="spName">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteEntityTask``1(NSoft.NFramework.Data.IAdoRepository,System.String,``0,NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 Entity의 속성 값을 이용하여 Procedure의 Parameter 값을 설정하고, 실행시키는 작업을 비동기적으로 수행합니다.
            일반적으로 Save / Update시에 활용하면 좋다.
            단, 비동기적인 작업이므로, Transaction 에 문제가 발생할 소지가 있습니다.
            </summary>
      <typeparam name="T">Persistent object 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">수행할 Procedure 명</param>
      <param name="entity">Persistent object</param>
      <param name="nameMap">ParameterName of Procedure = Property Name of Persistent object</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteEntityTask``1(NSoft.NFramework.Data.IAdoRepository,System.String,``0,NSoft.NFramework.Data.Mappers.INameMapper)">
      <summary>
            지정된 Entity의 속성 값을 이용하여 Procedure의 Parameter 값을 설정하고, 실행시키는 작업을 비동기적으로 수행합니다.
            일반적으로 Save / Update시에 활용하면 좋다.
            단, 비동기적인 작업이므로, Transaction 에 문제가 발생할 소지가 있습니다.
            </summary>
      <typeparam name="T">Persistent object 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="spName">실행할 Procedure Name</param>
      <param name="entity">실행할 Entity</param>
      <param name="nameMapper">Name Mapping Class</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             DbCommand를 실행해 얻은 DataReader를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명과 속성명 Mapper</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">Procedure 인자</param>
      <returns>Collection of Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             DbCommand를 실행해 얻은 DataReader를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명과 속성명 Mapper</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">Procedure 인자</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type by mapping DataReader Column Value to Instance Property Value
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">Key = ColumnName of DataReader, Value = Property Name of Specifieid Type</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Command parameters</param>
      <returns>Collection of Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type by mapping DataReader Column Value to Instance Property Value
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">Key = ColumnName of DataReader, Value = Property Name of Specifieid Type</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Command parameters</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type from IDataReader using Persister
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="persister">Persister from IDataReader</param>
      <param name="cmd">Instance of DbCommand</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>List of Persistent Object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            DbCommand를 실행해 얻은 DataReader를 Converter를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="mapFunc">IDataReader의 한 레코드인 IDataRecord 정보를 가지고, Persistent Object를 만들 Converter</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Collection of Persistent Object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명:속성명의 매핑정보를 가진 Mapper</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size (0이면 페이징 안함)</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명:속성명의 매핑정보를 가진 Mapper</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">컬럼명:속성명의 매핑정보</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">컬럼명:속성명의 매핑정보</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="persister">IDataReader로부터 Persistent Object를 빌드하는 Persister</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="mapFunc">IDataReader로부터 Persistent Object를 빌드하는 Mapping function</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Func{``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="targetFactory">대상 객체 생성 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Func{``0},System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="targetFactory">대상 객체 생성 함수</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Func{``0},System.Int32,System.Int32,System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="targetFactory">대상 객체 생성 함수</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 갯수(0이면 끝까지)</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Func{``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])" />을 비동기적으로 수행합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="targetFactory">대상 객체 생성 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Func{``0},System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            쿼리를 수행하여, 결과 셋을 대상 객체 컬렉션으로 병렬로 매핑을 수행하여 반환하는 Task를 빌드합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="targetFactory">대상 객체 생성 함수</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Func{``0},System.Int32,System.Int32,System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            쿼리를 수행하여, 결과 셋을 대상 객체 컬렉션으로 병렬로 매핑을 수행하여 반환하는 Task를 빌드합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="targetFactory">대상 객체 생성 함수</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 갯수(0이면 끝까지)</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{NSoft.NFramework.Data.AdoResultRow,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            쿼리를 수행하여, 결과 셋을 대상 객체 컬렉션으로 병렬로 매핑을 수행하여 반환하는 Task를 빌드합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="rowMapFunc">AdoResultRow로부터 {T} 수형의 인스턴스로 변환하는 메소드</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{NSoft.NFramework.Data.AdoResultRow,``0},System.Int32,System.Int32,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            쿼리를 수행하여, 결과 셋을 대상 객체 컬렉션으로 병렬로 매핑을 수행하여 반환하는 Task를 빌드합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="rowMapFunc">AdoResultRow로부터 {T} 수형의 인스턴스로 변환하는 메소드</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 갯수(0이면 끝까지)</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Func{``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Func{``0},System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Func{``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기적으로 ExecuteReader()을 수행하고, 병렬 방식으로 매핑하여 결과를 IPageList{T} 으로 반환하는 Task를 빌드합니다
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Func{``0},System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기적으로 ExecuteReader()을 수행하고, 병렬 방식으로 매핑하여 결과를 IPageList{T} 으로 반환하는 Task를 빌드합니다
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsParallelAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{NSoft.NFramework.Data.AdoResultRow,``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            비동기적으로 ExecuteReader()을 수행하고, 병렬 방식으로 매핑하여 결과를 IPageList{T} 으로 반환하는 Task를 빌드합니다
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="rowMapFunc">DataReader로부터 {T} 수형의 인스턴스로 변환하는 메소드</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             DbCommand를 실행해 얻은 DataReader를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명과 속성명 Mapper</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">Procedure 인자</param>
      <returns>Collection of Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             DbCommand를 실행해 얻은 DataReader를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명과 속성명 Mapper</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">Procedure 인자</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            ExecuteInstance() 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type by mapping DataReader Column Value to Instance Property Value
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">Key = ColumnName of DataReader, Value = Property Name of Specifieid Type</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Command parameters</param>
      <returns>Collection of Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type by mapping DataReader Column Value to Instance Property Value
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">Key = ColumnName of DataReader, Value = Property Name of Specifieid Type</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Command parameters</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])" />을 비동기적으로 수행합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])" />을 비동기적으로 수행합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type from IDataReader using Persister
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="persister">Persister from IDataReader</param>
      <param name="cmd">Instance of DbCommand</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>List of Persistent Object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="persister">DataReader로부터 {T} 수형의 인스턴스를 생성하는 생성자</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            DbCommand를 실행해 얻은 DataReader를 Converter를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="mapFunc">IDataReader의 한 레코드인 IDataRecord 정보를 가지고, Persistent Object를 만들 Converter</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Collection of Persistent Object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="mapFunc">DataReader로부터 {T} 수형의 인스턴스로 변환하는 메소드</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명:속성명의 매핑정보를 가진 Mapper</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size (0이면 페이징 안함)</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMapper">컬럼명:속성명의 매핑정보를 가진 Mapper</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMapper">DataReader 컬럼과 엔티티의 속성명의 Name 매퍼</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">컬럼명:속성명의 매핑정보</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="nameMap">컬럼명:속성명의 매핑정보</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])" />을 비동기적으로 수행합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])" />을 비동기적으로 수행합니다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="nameMap">DataReader 컬럼명 - Class 속성명의 매핑 정보</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="persister">IDataReader로부터 Persistent Object를 빌드하는 Persister</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="persister">DataReader로부터 {T} 수형의 인스턴스를 생성하는 생성자</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="repository">IAdoRepository 인스턴스</param>
      <param name="mapFunc">IDataReader로부터 Persistent Object를 빌드하는 Mapping function</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstance``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="mapFunc">DataReader로부터 {T} 수형의 인스턴스로 변환하는 메소드</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceIfAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 <paramref name="filter" /> 에 만족하는 레코드만 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMapper">DB 컬럼명- 클래스 속성명 매퍼</param>
      <param name="filter">매핑할 Row를 선별할 필터 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceIfAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 <paramref name="filter" /> 에 만족하는 레코드만 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="filter">매핑할 Row를 선별할 필터 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceIfAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 <paramref name="filter" /> 에 만족하는 레코드만 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="filter">매핑할 Row를 선별할 필터 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecutInstanceIfTask``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            DataReader로부터 <paramref name="filter" /> 에 만족하는 레코드만 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="mapFunc">매핑 함수</param>
      <param name="filter">매핑할 Row를 선별할 필터 함수</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceWhileAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            <paramref name="continuationCondition" /> 조건이 만족할 동안만, DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMapper">DB 컬럼명- 클래스 속성명 매퍼</param>
      <param name="continuationCondition">매핑을 계속할 조건인지 판단하는 델리게이트</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceWhileAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            <paramref name="continuationCondition" /> 조건이 만족할 동안만, DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="continuationCondition">매핑을 계속할 조건인지 판단하는 델리게이트</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceWhileAsync``1(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            <paramref name="continuationCondition" /> 조건이 만족할 동안만, DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="continuationCondition">매핑을 계속할 조건인지 판단하는 델리게이트</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryEx.ExecuteInstanceWhileAsync``1(NSoft.NFramework.Data.IAdoRepository,System.Func{System.Data.IDataReader,``0},System.Func{System.Data.IDataReader,System.Boolean},System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="!:IAdoRepository.ExecuteInstance&lt;T&gt;(System.Func&lt;System.Data.IDataReader,T&gt;,System.Data.Common.DbCommand,NFramework.Data.IAdoParameter[])" /> 를 비동기적으로 수행하여, 
            <paramref name="continuationCondition" /> 조건이 만족할 동안만, DataReader로부터 T 수형의 인스턴스를 매핑한다.
            </summary>
      <typeparam name="T">결과 셋으로 표현할 엔티티의 수형</typeparam>
      <param name="repository">
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />
      </param>
      <param name="mapFunc">매핑 함수</param>
      <param name="continuationCondition">매핑을 계속할 조건인지 판단하는 델리게이트</param>
      <param name="query">실행할 SQL문 또는 Procedure Name</param>
      <param name="parameters">패러미터</param>
      <returns>매핑한 엔티티 컬렉션을 결과값으로 가지는 Task</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper">
      <summary>
            컬럼명에서 '_', White Space 를 제외하고, Pascal 명명법에 따라 단어를 대문자로 사용한다. (예: PROJECT_NAME =&gt; ProjectName)
            </summary>
      <example>
        <code>
            	CapitalizeNameMapper cMapper = new CapitalizeNameMapper();
            	string propertyName = cMapper.MapToPropertyName("PROJECT_NAME");	// property name is ProjectName
            	propertyName = cMapper.MapToPropertyName("PROJECT_ID");				// property name is ProjectId
            </code>
      </example>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.NameMapperBase">
      <summary>
            Fluent ADO.NET을 위해, DB Column 명과 Class의 속성명을 매핑시키는 Base abstract class
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.INameMapper">
      <summary>
            Fluent ADO.NET을 위해, DB Column 명과 Class의 속성명을 매핑시키는 클래스에 대한 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.INameMapper.MapToPropertyName(System.String)">
      <summary>
            컬럼명을 속성명으로 맵핑시킨다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>컬럼명에 매칭되는 속성명</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMapperBase.MapToPropertyName(System.String)">
      <summary>
            컬럼명을 속성명으로 맵핑시킨다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>컬럼명에 매칭되는 속성명</returns>
    </member>
    <member name="F:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper.CharsToRemove">
      <summary>
            DB 테이블 컬럼명에서 제거할 Char 들 ('_', ' ')
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper.MapToPropertyName(System.String)">
      <summary>
            컬럼명에서 '_', Space 를 제외하고, Pascal 명명법에 따라 단어를 대문자로 사용한다.
            </summary>
      <param name="columnName">
      </param>
      <returns>
      </returns>
      <example>
        <code>
            	CapitalizeNameMapper cMapper = new CapitalizeNameMapper();
            	string propertyName = cMapper.MapToPropertyName("PROJECT_NAME");	// property name is ProjectName
            	propertyName = cMapper.MapToPropertyName("PROJECT_ID");				// property name is ProjectId
            </code>
      </example>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.INameMap">
      <summary>
            Column 명과 Property 명의 매핑 정보 (Key = Column Name, Value = Property Name)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.INameMap.ContainsColumn(System.String)">
      <summary>
            해당 컬럼명의 키값에 존재하는지 검사한다.
            </summary>
      <param name="columnName">검사할 컬럼명</param>
      <returns>컬럼명 존재 유무</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.INameMap.ContainsProperty(System.String)">
      <summary>
            해당 속성명이 Value 값에 존재하는지 검사한다.
            </summary>
      <param name="propertyName">속성명</param>
      <returns>속성명 존재 유무</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.INameMap.IndexOfColumn(System.String)">
      <summary>
            해당 컬럼명의 인덱스를 구한다. 없다면 -1을 반환한다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>해당 컬럼명의 인덱스, 없으면 -1을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.INameMap.IndexOfProperty(System.String)">
      <summary>
            해당 속성명의 인덱스를 구한다. 없다면 -1을 반환한다.
            </summary>
      <param name="propertyName">속성명</param>
      <returns>해당 속성명의 인덱스, 없으면 -1을 반환한다.</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.Mappers.INameMap.ColumnNames">
      <summary>
            Collection of Column Name (Dictionary의 Key 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.Mappers.INameMap.PropertyNames">
      <summary>
            Collection of Property Name (Dictionary의 Value 값)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.NameMap">
      <summary>
            Column 명과 Property 명의 매핑 정보 (Key = Column Name, Value = Property Name)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMap.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMap.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initialize new instance of NameMap with initial data
            </summary>
      <param name="dictionary">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMap.ContainsColumn(System.String)">
      <summary>
            해당 컬럼명의 키값에 존재하는지 검사한다.
            </summary>
      <param name="columnName">검사할 컬럼명</param>
      <returns>컬럼명 존재 유무</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMap.ContainsProperty(System.String)">
      <summary>
            해당 속성명이 Value 값에 존재하는지 검사한다.
            </summary>
      <param name="propertyName">속성명</param>
      <returns>속성명 존재 유무</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMap.IndexOfColumn(System.String)">
      <summary>
            해당 컬럼명의 인덱스를 구한다. 없다면 -1을 반환한다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>해당 컬럼명의 인덱스, 없으면 -1을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMap.IndexOfProperty(System.String)">
      <summary>
            해당 속성명의 인덱스를 구한다. 없다면 -1을 반환한다.
            </summary>
      <param name="propertyName">속성명</param>
      <returns>해당 속성명의 인덱스, 없으면 -1을 반환한다.</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.Mappers.NameMap.ColumnNames">
      <summary>
            Collection of Column Name (Dictionary의 Key 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.Mappers.NameMap.PropertyNames">
      <summary>
            Collection of Property Name (Dictionary의 Value 값)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.NameMapMapper">
      <summary>
            내부에 <see cref="T:NSoft.NFramework.Data.Mappers.INameMap" />을 가지고, 컬럼명-속성명을 매핑시키는 래퍼 클래습니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMapMapper.#ctor(NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            생성자
            </summary>
      <param name="nameMap">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMapMapper.MapToPropertyName(System.String)">
      <summary>
            컬럼명을 속성명으로 맵핑시킨다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>컬럼명에 매칭되는 속성명</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.Mappers.NameMapMapper.NameMap">
      <summary>
            매핑정보를 가진 INameMap
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.NameMappingUtil">
      <summary>
            일반적으로 DATABASE의 컬럼명들은 대문자, 구분자('_', '[', ']', '_' 등)이 사용됩니다.
            이런 Data 객체 (<see cref="T:System.Data.IDataReader" />, <see cref="T:System.Data.DataTable" />) 에서 Class로 만드려면 
            DATABASE의 컬럼 명과 Class의 Property 명이 매핑시켜줘야 합니다.
            
            NHibernate는 hbm.xml 이라는 Mapping 파일을 사용하고, Active Record는 Property에 Attribute를 정의해서 사용합니다.
            Solution을 만들때에는 위와 같이 정형적인 방식이 유리합니다만....
            
            SI의 경우에는 좀 다릅니다. 아주 많은 Class를 만들어야 하고, 
            그 속성 정의뿐 아니라 Table 만이 아니라 필요에 따라 View, Stored Procedure 등으로부터 정보를 얻어 Instance로 만들어야 할 때가 있습니다.
            (물론 DataTable을 직접 이용하는 것이 Microsoft가 주장하는 가장 생산성이 높은 방법입니다. - 유지보수 등에서 문제가 있습니다.)
            
            이 때 가장 좋은 방법은 Database 컬럼명과 Class의 속성명에 일정한 규칙을 정해 놓으면, 그 규칙에 따라 자동으로 매핑정보를 생성할 수 있습니다.
            
            예를 들어 PROJECT_NAME =&gt; ProjectName, PROJECT_ID =&gt; ProjectId 등으로 변경할 수 있습니다.
            좀 더 특수하게는 PROJECT_ID =&gt; Id 로 변경할 수 있겠죠. (다만 다른 컬럼도 접미사로 _ID 값을 가진다면 매핑에 실패할 것입니다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.NoChangeFunc">
      <summary>
             변경 없이 컬럼명 그대로 속성명으로 매핑한다.
            </summary>
      <returns>아무런 변화를 주지 않는 함수 즉 컬럼명이 속성명과 같다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.CapitalizeMappingFunc">
      <summary>
            컬럼명에서 속성명에 들어갈 수 없는 문자나 '_' 등의 구분 문자를 제거하여, 단어의 첫문자만 대문자로 (Capitalize) 만들어 속성명으로 매핑시킨다.
            </summary>
      <returns>Pascal naming 규칙에 따라 단어단위로 첫글자만 대문자로 만드는 함수</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.CapitalizeMappingFunc(System.Char[])">
      <summary>
            컬럼명에서 속성명에 들어갈 수 없는 문자나 '_' 등의 구분 문자를 제거하여, 단어의 첫문자만 대문자로 (Capitalize) 만들어 속성명으로 매핑시킨다.
            </summary>
      <param name="deleteChars">제거할 문자들</param>
      <returns>Pascal naming 규칙에 따라 단어단위로 첫글자만 대문자로 만드는 함수</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.RemovePrefixFunction(System.String)">
      <summary>
            컬럼명에서 속성명에 들어갈 수 없는 문자나 '_' 등의 구분 문자를 제거하여, 단어의 첫문자만 대문자로 (Capitalize) 만들어 속성명으로 매핑시킨다.
            </summary>
      <param name="prefix">접두사</param>
      <returns>Parameter의 접두사를 제거하는 함수</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.Mapping(System.Data.IDataReader,System.Func{System.String,System.String},System.String[])">
      <summary>
            컬럼명=속성명 매핑함수를 이용하여 지정된 DataReader의 컬럼명을 속성명으로 매핑한다.
            </summary>
      <param name="reader">instance of IDataReader</param>
      <param name="mappingFunc">mapping function</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>instance of <see cref="T:NSoft.NFramework.Data.Mappers.INameMap" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.Mapping(System.Data.DataTable,System.Func{System.String,System.String},System.String[])">
      <summary>
            컬럼명=속성명 매핑함수를 이용하여 지정된 DataTable의 컬럼명을 속성명으로 매핑한다.
            </summary>
      <param name="table">instance of DataTable</param>
      <param name="mappingFunc">mapping function</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>instance of <see cref="T:NSoft.NFramework.Data.Mappers.INameMap" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.Mapping(System.Data.Common.DbCommand,System.Func{System.String,System.String},System.String[])">
      <summary>
            Command의 Parameter 정보와 속성 정보를 매핑한다. (ParameterName = 속성명) 형식
            </summary>
      <param name="command">instance of DbCommand to execute</param>
      <param name="mappingFunc">Mapping function. input = parameter name of command , result = property name of persistent object </param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>instance of <see cref="T:NSoft.NFramework.Data.Mappers.INameMap" />, Key = parameter name of a specified command, Value = property name of persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.NameMapping(System.Data.IDataReader,NSoft.NFramework.Data.Mappers.INameMapper,System.String[])">
      <summary>
            지정된 DataReader의 컬럼명을 속성명으로 변경한다. 매퍼는 IoC를 통해 얻는다.
            </summary>
      <param name="reader">instance of IDataReader</param>
      <param name="nameMapper">Mapper of column name and property name</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>name mapping table</returns>
      <seealso cref="T:NSoft.NFramework.Data.Mappers.INameMapper" />
      <seealso cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" />
      <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.NameMapping(System.Data.DataTable,NSoft.NFramework.Data.Mappers.INameMapper,System.String[])">
      <summary>
            지정된 DataTable의 컬럼명을 속성명으로 변경한다. 매퍼는 IoC를 통해 얻는다.
            </summary>
      <param name="table">Data source</param>
      <param name="nameMapper">Parameter명을 속성명으로 매핑하는 Mapper</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>name mapping table</returns>
      <seealso cref="T:NSoft.NFramework.Data.Mappers.INameMapper" />
      <seealso cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" />
      <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.NameMappingUtil.NameMapping(System.Data.Common.DbCommand,NSoft.NFramework.Data.Mappers.INameMapper,System.String[])">
      <summary>
            지정된 DbCommand의 Parameter Name을 속성명으로 변경한다. 
            </summary>
      <param name="command">실행할 DbCommand</param>
      <param name="nameMapper">Command Parameter명을 Persistent Object의 속성명으로 매핑하는 Mapper</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>name mapping table</returns>
      <seealso cref="T:NSoft.NFramework.Data.Mappers.INameMapper" />
      <seealso cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" />
      <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.SameNameMapper">
      <summary>
            컬럼명과 속성명이 같은 Mapper
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.SameNameMapper.MapToPropertyName(System.String)">
      <summary>
            컬럼명을 속성명으로 맵핑시킨다. 컬럼명과 속성명이 같다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>컬럼명에 매칭되는 속성명</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.Mappers.TrimNameMapper">
      <summary>
            공백을 제거하고 컬럼명과 속성명이 대소문자가 같게 매핑한다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.Mappers.TrimNameMapper.WhiteSpaceChar">
      <summary>
            공백 문자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Mappers.TrimNameMapper.MapToPropertyName(System.String)">
      <summary>
            컬럼명을 속성명으로 맵핑시킨다. 공백을 제거하고 컬럼명과 속성명이 대소문자가 같게 매핑한다.
            </summary>
      <param name="columnName">컬럼명</param>
      <returns>컬럼명에 매칭되는 속성명</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.AdoPersisterBase`2">
      <summary>
             데이터 소스로부터 Persistent Object 를 빌드합니다.
            </summary>
      <typeparam name="TDataSource">Type of dataReader dataReader</typeparam>
      <typeparam name="TPersist">Type of Persistent object</typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.IAdoPersister`2">
      <summary>
            Source 정보로부터 TPersistent 형식의 Persistent Object를 빌드하는 Class의 인터페이스입니다.
            </summary>
      <typeparam name="TDataSource">Type of DataSource</typeparam>
      <typeparam name="TPersistent">Type of Persistent object.</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.IAdoPersister`2.Persist(`0)">
      <summary>
            지정된 dataReader 정보로부터 TPersistent 형식의 Persistent Object를 빌드합니다.
            </summary>
      <param name="dataSource">Data Source</param>
      <returns>Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.AdoPersisterBase`2.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.AdoPersisterBase`2.#ctor(NSoft.NFramework.Data.Mappers.INameMapper,System.Func{`1})">
      <summary>
            생성자
            </summary>
      <param name="nameMapper">name mapper</param>
      <param name="persistentFactory">Persistent object 생성 delegate</param>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.AdoPersisterBase`2.Persist(`0)">
      <summary>
            DataSource로부터 새로운 Persistent object를 빌드합니다.
            </summary>
      <param name="data">데이타 소스</param>
      <returns>Persistent object</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.Persisters.AdoPersisterBase`2.NameMapper">
      <summary>
            컬럼명:속성명의 Name Mapper를 나타냅니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.Persisters.AdoPersisterBase`2.FactoryFunction">
      <summary>
            Persistence 객체를 생성하는 함수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.CapitalizeReaderPersister`1">
      <summary>
            IDataReader의 정보로부터 Persistent Object를 빌드합니다. 컬럼:속성 매핑 정보는 Capitalize Name Mapping 정보를 사용합니다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.ReaderPersister`1">
      <summary>
            DataReader 정보로 부터 Persistent object를 빌드하는 Persister입니다.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.IReaderPersister`1">
      <summary>
        <see cref="T:System.Data.IDataReader" />의 한 레코드를 읽어 TPersistent 형식의 object를 빌드합니다.
            </summary>
      <typeparam name="TPersistent">Type of persistent object</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.ReaderPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.ReaderPersister`1.#ctor(NSoft.NFramework.Data.Mappers.INameMapper,System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="nameMapper">name mapper</param>
      <param name="persistentFactory">Persistent object 생성 delegate</param>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.ReaderPersister`1.Persist(System.Data.IDataReader)">
      <summary>
            DataSource로부터 새로운 Persistent object를 빌드합니다.
            </summary>
      <param name="dataReader">데이타 소스</param>
      <returns>Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.CapitalizeReaderPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.CapitalizeReaderPersister`1.#ctor(System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="factoryFunc">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.CapitalizeRowPersister`1">
      <summary>
        <see cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" />를 이용하여, 하나의 DataRow로부터 Persistent Object를 빌드하는 Persister입니다.
            </summary>
      <typeparam name="T">Persistent Object </typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.RowPersister`1">
      <summary>
            DataRow로 부터 Persistent object를 빌드하는 Persister입니다.
            </summary>
      <typeparam name="TPersistent">
      </typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.IRowPersister`1">
      <summary>
            DataTable의 한 레코드를 TPersistent 형식의 object로 빌드한다.
            </summary>
      <typeparam name="TPersistent">Type of persistent object</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.RowPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.RowPersister`1.#ctor(NSoft.NFramework.Data.Mappers.INameMapper,System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="nameMapper">name mapper</param>
      <param name="persistentFactory">Persistent object 생성 delegate</param>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.RowPersister`1.Persist(System.Data.DataRow)">
      <summary>
            DataSource로부터 새로운 Persistent object를 빌드합니다.
            </summary>
      <param name="dataRow">데이타 소스</param>
      <returns>Persistent object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.CapitalizeRowPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.CapitalizeRowPersister`1.#ctor(System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="factoryFunc">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.SameReaderPersister`1">
      <summary>
            IDataReader의 정보로부터 Persistent Object를 빌드합니다. 컬럼=속성 매핑 정보는 Same Name Mapping 정보를 사용합니다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.SameReaderPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.SameReaderPersister`1.#ctor(System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="factoryFunc">Persistent object 생성 함수</param>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.SameRowPersister`1">
      <summary>
        <see cref="T:NSoft.NFramework.Data.Mappers.SameNameMapper" />를 이용하여, 하나의 DataRow로 부터 Persistent Object를 빌드하는 Persister입니다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.SameRowPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.SameRowPersister`1.#ctor(System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="factoryFunc">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.TrimReaderPersister`1">
      <summary>
            IDataReader의 정보로부터 Persistent Object를 빌드합니다. 컬럼:속성 매핑 정보는 Capitalize Name Mapping 정보를 사용합니다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.TrimReaderPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.TrimReaderPersister`1.#ctor(System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="factoryFunc">Persistent object 생성용 delegate</param>
    </member>
    <member name="T:NSoft.NFramework.Data.Persisters.TrimRowPersister`1">
      <summary>
        <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />를 이용하여, 하나의 DataRow로 부터 Persistent Object를 빌드하는 Persister입니다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.TrimRowPersister`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.Persisters.TrimRowPersister`1.#ctor(System.Func{`0})">
      <summary>
            생성자
            </summary>
      <param name="factoryFunc">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.QueryProviders.DynamicQueryProvider">
      <summary>
            쿼리문이 정의된 파일로부터 쿼리문을 제공하는 프로바이더입니다. 동적으로 파일의 변화에 따른 갱신을 수행합니다.
            NOTE: 파일을 취급하므로, Thread-Safe 하지 않습니다!!!
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase">
      <summary>
            쿼리문이 정의된 파일로부터 쿼리문을 제공하는 프로바이더의 기본 클래스입니다. 동적으로 파일의 변화에 따른 갱신을 수행합니다.
            NOTE: 파일을 취급하므로, Thread-Safe 하지 않습니다!!!
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase">
      <summary>
            쿼리 정의 파일로부터 쿼리문장을 제공하는 기본 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.IIniQueryProvider">
      <summary>
            Query 문이 정의된 DataSource (파일/DB)로 부터 쿼리문을 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.IIniQueryProvider.GetQuery(System.String)">
      <summary>
            지정된 쿼리 키에 해당하는 쿼리문을 가져온다.
            </summary>
      <param name="queryKey">쿼리 키, 형식: [Section,] QueryName</param>
      <returns>쿼리 문장</returns>
      <exception cref="T:System.InvalidOperationException">정의된 쿼리 키가 없을때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.IIniQueryProvider.GetQuery(System.String,System.String)">
      <summary>
            지정된 섹션, 지정된 쿼리명에 해당하는 쿼리문을 가져온다.
            </summary>
      <param name="section">섹션 명</param>
      <param name="queryName">쿼리 명</param>
      <returns>쿼리 문장</returns>
      <exception cref="T:System.InvalidOperationException">정의된 섹션, 쿼리명이 없을때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.IIniQueryProvider.TryGetQuery(System.String,System.String@)">
      <summary>
            지정된 쿼리 키에 해당하는 쿼리 문장을 가져옵니다. 없으면 false를 반환하고, <paramref name="queryString" />에는 빈 문자열이 설정됩니다.
            </summary>
      <param name="queryKey">쿼리 키, 형식: [Section,] QueryName</param>
      <param name="queryString">조회된 쿼리 문장</param>
      <returns>조회 여부</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IIniQueryProvider.TryGetQuery(System.String,System.String,System.String@)">
      <summary>
            지정된 섹션, 쿼리명에 해당하는 쿼리 문장을 가져옵니다. 없으면 false를 반환하고, <paramref name="queryString" />에는 빈 문자열이 설정됩니다.
            </summary>
      <param name="section">섹션 명</param>
      <param name="queryName">쿼리 명</param>
      <param name="queryString">쿼리 문장</param>
      <returns>조회여부</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IIniQueryProvider.GetQueries">
      <summary>
            해당되는 모든 Query정보를 제공한다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.IIniQueryProvider.QueryFilePath">
      <summary>
            Query String이 저장된 File 경로
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IIniQueryProvider.Item(System.String)">
      <summary>
            QueryKey [Section,]QueryName 에 해당하는 Query문장을 나타냅니다.
            </summary>
      <param name="queryKey">쿼리 키, 형식: [Section,] QueryName</param>
      <returns>조회된 쿼리 문장</returns>
      <exception cref="T:System.InvalidOperationException">정의된 섹션, 쿼리명이 없을때</exception>
    </member>
    <member name="P:NSoft.NFramework.Data.IIniQueryProvider.Item(System.String,System.String)">
      <summary>
            지정된 section의 QueryName에 해당하는 Query 문장을 반환합니다.
            </summary>
      <param name="section">섹션 명</param>
      <param name="queryName">쿼리 명</param>
      <returns>쿼리 문장</returns>
      <exception cref="T:System.InvalidOperationException">정의된 섹션, 쿼리명이 없을때</exception>
    </member>
    <member name="F:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.SECTION_DELIMITER">
      <summary>
            Ini 파일의 Section과 Key의 구분자 (',')
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.#ctor(System.String)">
      <summary>
            Initialize a new instance of InIQueryProviderBase with query file.
            </summary>
      <param name="queryFilePath">Query String이 정의된 ini 파일의 전체경로</param>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.GetQuery(System.String)">
      <summary>
            지정된 쿼리 키에 해당하는 쿼리문을 가져온다.
            </summary>
      <param name="queryKey">쿼리 키, 형식: [Section,] QueryName</param>
      <returns>쿼리 문장</returns>
      <exception cref="T:System.InvalidOperationException">정의된 쿼리 키가 없을때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.GetQuery(System.String,System.String)">
      <summary>
            지정된 섹션, 지정된 쿼리명에 해당하는 쿼리문을 가져온다.
            </summary>
      <param name="section">섹션 명</param>
      <param name="queryName">쿼리 명</param>
      <returns>쿼리 문장</returns>
      <exception cref="T:System.InvalidOperationException">정의된 섹션, 쿼리명이 없을때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.TryGetQuery(System.String,System.String@)">
      <summary>
            지정된 쿼리 키에 해당하는 쿼리 문장을 가져옵니다. 없으면 false를 반환하고, <paramref name="queryString" />에는 빈 문자열이 설정됩니다.
            </summary>
      <param name="queryKey">쿼리 키, 형식: [Section,] QueryName</param>
      <param name="queryString">조회된 쿼리 문장</param>
      <returns>조회 여부</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.TryGetQuery(System.String,System.String,System.String@)">
      <summary>
            지정된 섹션, 쿼리명에 해당하는 쿼리 문장을 가져옵니다. 없으면 false를 반환하고, <paramref name="queryString" />에는 빈 문자열이 설정됩니다.
            </summary>
      <param name="section">섹션 명</param>
      <param name="queryName">쿼리 명</param>
      <param name="queryString">쿼리 문장</param>
      <returns>조회여부</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.GetQueries">
      <summary>
            모든 QueryString 을 Table 로 반환한다.
            </summary>
      <returns>Query 정보</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.TryParseQueryKey(System.String,System.String@,System.String@)">
      <summary>
            queryKey값을 파싱하여, section과 queryName 을 구한다.
            </summary>
      <param name="queryKey">NIni의 값에 parameterized value인 ${section|key}를 파싱한다. </param>
      <param name="section">
      </param>
      <param name="queryName">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.QuerySource">
      <summary>
            쿼리 문장을 제공하는 <see cref="T:NSoft.NFramework.Nini.Config.IConfigSource" />의 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.QueryFilePath">
      <summary>
            쿼리 문장이 정의된 Ini 파일의 경로
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.Item(System.String)">
      <summary>
            Indexer
            </summary>
      <param name="queryKey">[Section,] QueryName 형태의 키</param>
      <returns>query string</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.QueryProviders.InIQueryProviderBase.Item(System.String,System.String)">
      <summary>
            Indexer
            </summary>
      <param name="section">section</param>
      <param name="queryKey">key</param>
      <returns>query string</returns>
    </member>
    <member name="F:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.SectionDelimiter">
      <summary>
            쿼리문 조회시, Section과 Key의 구분자 (",")
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.#ctor(System.String)">
      <summary>
            생성자
            </summary>
      <param name="queryPath">Query string 이 정의된 파일의 전체 경로</param>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.BuildQuerySource">
      <summary>
            쿼리 문자열을 제공하는 파일을 읽어서 <see cref="T:NSoft.NFramework.Nini.Config.IniConfigSource" /> 인스턴스를 빌드합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.BuildFileSystemWatcher(System.String)">
      <summary>
            쿼리 문자열을 제공하는 파일의 변화를 감지하기 위해 <see cref="T:System.IO.FileSystemWatcher" /> 를 이용한 감시기능을 빌드합니다.
            </summary>
      <param name="queryFile">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.OnQueryFileChanged(System.Object,System.IO.FileSystemEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.Watcher">
      <summary>
            쿼리정의 파일에 대한 변화를 감시하는 Watcher입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.QuerySource">
      <summary>
            쿼리 문장을 제공하는 <see cref="T:NSoft.NFramework.Nini.Config.IConfigSource" />의 인스턴스
            </summary>
    </member>
    <member name="E:NSoft.NFramework.Data.QueryProviders.DynamicQueryProviderBase.QueryFileChanged">
      <summary>
            쿼리 파일 내용이 변경되었을 때 발생하는 이벤트입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.DynamicQueryProvider.#ctor(System.String)">
      <summary>
            생성자
            </summary>
      <param name="queryPath">쿼리문이 정의된 파일의 전체경로</param>
    </member>
    <member name="T:NSoft.NFramework.Data.QueryProviders.IniAdoQueryProvider">
      <summary>
            Ini 파일을 이용한 ADO.NET용 Query Provider
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.IniAdoQueryProvider.#ctor(System.String)">
      <summary>
            생성자
            </summary>
      <param name="queryFilePath">Query String 이 정의된 파일의 전체 경로</param>
    </member>
    <member name="T:NSoft.NFramework.Data.QueryProviders.IniNHibernateQueryProvider">
      <summary>
            Ini 파일을 이용한 NHibernate 용 Query Provider
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviders.IniNHibernateQueryProvider.#ctor(System.String)">
      <summary>
            생성자
            </summary>
      <param name="queryFilePath">Query String 이 정의된 파일의 전체 경로</param>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviderTool.GetQueryString(NSoft.NFramework.Data.IIniQueryProvider,System.String,System.String)">
      <summary>
        <paramref name="provider" /> 에서 <paramref name="key" /> 에 해당하는 값을 로드합니다. 해당 key가 없으면 <paramref name="defaultValue" />를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviderTool.GetQueryString(NSoft.NFramework.Data.IIniQueryProvider,System.String,System.Func{System.String})">
      <summary>
        <paramref name="provider" /> 에서 <paramref name="key" /> 에 해당하는 값을 로드합니다. 해당 key가 없으면 <paramref name="defaultFactory" />를 실행하여 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviderTool.GetQueryString(NSoft.NFramework.Data.IIniQueryProvider,System.String,System.String,System.String)">
      <summary>
        <paramref name="provider" /> 에서 [section, queryName]에 해당하는 값을 로드합니다. 해당 key가 없으면 <paramref name="defaultValue" />를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryProviderTool.GetQueryString(NSoft.NFramework.Data.IIniQueryProvider,System.String,System.String,System.Func{System.String})">
      <summary>
        <paramref name="provider" /> 에서 [section, queryName]에 해당하는 값을 로드합니다. 해당 key가 없으면 <paramref name="defaultFactory" />를 실행하여 반환합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.QueryTable">
      <summary>
            QueryName:Query String 을 갖는 Dictionary입니다.
            </summary>
      <remarks>
            QueryKey = QueryString 을 갖는 Dictionary입니다. QueryKey는 [Section,]QueryName 형식입니다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryTable.ToString">
      <summary>
            Return string using Set format.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.QueryTable.ToString(System.Boolean)">
      <summary>
            Return query string table information by dictionary style.
            </summary>
      <param name="showDetails">Indicate detail view.</param>
      <returns>query string table.</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlServer.BulkDeleter`2">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlBulkCopy" />를 이용하여 Bulk Delete를 수행한다.
            </summary>
      <typeparam name="TEntity">엔티티 수형</typeparam>
      <typeparam name="TPrimaryKey">엔티티의 Primary Key 수형</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.BulkDeleter`2.#ctor(System.String,System.String,System.Func{`0,`1})">
      <summary>
            Constructor
            </summary>
      <param name="tempTableName">임시 테이블 명</param>
      <param name="procedureName">실행할 Procedure 명</param>
      <param name="getPrimaryKey">Primary Key를 얻는 메소드</param>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.BulkDeleter`2.ResisterForDeletion(`0)">
      <summary>
            삭제할 TABLE을 표현하는 엔티티 형식을 등록한다.
            </summary>
      <param name="entityType">Type of entity</param>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.BulkDeleter`2.PerformDelete(System.String)">
      <summary>
            지정된 DB에 삭제를 수행한다.
            </summary>
      <param name="dbName">database connection string name</param>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlServer.ISqlRepository">
      <summary>
            SQL Server용 AdoRepository의 인터페이스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.IAdoRepository">
      <summary>
            ADO.NET 을 이용하는 Repository의 기본 Interface
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.IRepository">
      <summary>
            Data 관리를 위한 Repository
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            ADO.NET의 기본 Transaction을 시작한다. (TransactionScope와는 달리 DTC를 이용하지 않는다.)
            </summary>
      <param name="isolationLevel">Transaction 격리수준 (기본적으로 ReadCommitted)</param>
      <returns>Return a new instance of DbTransaction</returns>
      <example>
        <code>
            AdoRepository.BeginTransaction(IsolationLevel.ReadUncommitted);
            try
            {
            	DbCommand insertCommand = AdoRepository.GetSqlStringCommand(InsertString);
            	DbCommand deleteCommand = AdoRepository.GetSqlStringCommand(DeleteString);
            	DbCommand countCommand = AdoRepository.GetSqlStringCommand(CountString);
            
            	var count = Convert.ToInt32(AdoRepository.ExecuteScalar(countCommand));
            
            	AdoRepository.ExecuteNonQuery(insertCommand);
            	AdoRepository.ExecuteNonQuery(deleteCommand);
            
            	AdoRepository.Commit();
            
            	Assert.AreEqual(4, count);
            }
            catch (Exception ex)
            {
            	if (IsErrorEnabled)
            		log.ErrorException(ex);
            
            	AdoRepository.Rollback();
            
            	throw;
            }
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.BeginTransaction">
      <summary>
            ADO.NET의 기본 Transaction을 시작한다. 격리수준은 <see cref="F:System.Data.IsolationLevel.ReadCommitted" />이다. 
            (TransactionScope와는 달리 DTC를 이용하지 않는다.)
            </summary>
      <returns>Return a new instance of DbTransaction</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.Commit">
      <summary>
            현재 활성화된 Transaction이 있다면, Commit을 수행한다.
            </summary>
      <exception cref="T:System.InvalidOperationException">Current Thread Context에 활성화된 Transaction이 없을 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.Rollback">
      <summary>
            현재 활성화된 Transaction이 있다면, Rollback을 수행한다.
            </summary>
      <exception cref="T:System.InvalidOperationException">Current Thread Context에 활성화된 Transaction이 없을 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.LoadDataSet(System.Data.Common.DbDataAdapter,System.String,System.Data.DataSet,System.Int32,System.Int32)">
      <summary>
            지정된 DataAdapter를 통해 얻은 정보를 DataSet으로 빌드한다.
            </summary>
      <param name="adapter">DataAdapter</param>
      <param name="tableName">Table name</param>
      <param name="targetDataSet">저장할 Dataset</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSet(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="cmd" />를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">collection of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSet(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="cmd" />를 실행하여 DataSet을 로드합니다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="parameters">collection of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSet(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataSet을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSet(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataSet을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSetBySqlString(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="sqlString">simple query string to execute</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSetBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="sqlString">simple query string to execute</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSetByProcedure(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="spName">Procedure name to execute</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataSetByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="spName">Procedure name to execute</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTable(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTable(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTable(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTableBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 sql string 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="sqlString">실행할 Query 문</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTableBySqlString(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 sql string 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="sqlString">실행할 Query 문</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTableByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Procedure를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="spName">실행할 Select Command</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTableByProcedure(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Procedure를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="spName">실행할 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTableAsList(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteDataTableAsList(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecutePagingDataTable(System.Data.Common.DbCommand,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 조회용 Command 를 Paging 정보에 근거해서 수행하고, 결과를 DataTable로 반환한다.
            </summary>
      <param name="cmd">조회용 Command 인스턴스</param>
      <param name="pageIndex">Page index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecutePagingDataTable(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" />를 Paging 정보에 근거해서 실행하고, 결과를 DataTable로 반환한다.
            NOTE: DISTINCT, TOP N 조회는 Paging에서 지원하지 않습니다.
            </summary>
      <param name="query">조회용 쿼리 문</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecutePagingDataTableBySqlString(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 조회용 쿼리문을 Paging 정보에 근거해서 수행하고, 결과를 DataTable로 반환한다. 
            NOTE: 복잡한 쿼리 문장은 안될 가능성이 있습니다.
            NOTE: DISTINCT, TOP N 조회는 Paging에서 지원하지 않습니다.
            </summary>
      <param name="selectSql">조회용 쿼리 문장</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
      <seealso cref="M:NSoft.NFramework.Data.AdoTool.GetCountingSqlString(System.String)" />
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecutePagingDataTableByProcedure(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" /> Procedure를 실행하여, Paging 정보에 근거해서 Data를 추출하고, 결과를 DataTable로 반환한다. 
            </summary>
      <param name="spName">조회용 Procedure Name</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">Procedure Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
      <seealso cref="M:NSoft.NFramework.Data.AdoTool.GetCountingSqlString(System.String)" />
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalar(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, and return single scalar value
            </summary>
      <param name="cmd">Instance of DbCommand to execute</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalar(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute query, and return single scalar value
            </summary>
      <param name="query">query string ( simple sql string or Procedure name )</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalarBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute sql string, and return single scalar value
            </summary>
      <param name="sqlString">simple sql string</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalarByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute stored procedure, and return single scalar value
            </summary>
      <param name="spName">Procedure name</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQuery(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified DbCommand
            </summary>
      <param name="cmd">Instance of DbCommand to execute</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQuery(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified query or procedure
            </summary>
      <param name="query">query string ( simple sql string or Procedure name )</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQueryBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified sql string
            </summary>
      <param name="sqlString">simple sql string</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQueryByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified stored procedure
            </summary>
      <param name="spName">Procedure name</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteReader(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified DbCommand, and return  <see cref="T:System.Data.IDataReader" /></summary>
      <param name="cmd">DbCommand to execute</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteReader(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified query, and return  <see cref="T:System.Data.IDataReader" /></summary>
      <param name="query">query string ( sql string or procedure name )</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteReaderBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified sql string, and return  <see cref="T:System.Data.IDataReader" /></summary>
      <param name="sqlString">simple query string</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepository.ExecuteReaderByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified stored procedure, and return  <see cref="T:System.Data.IDataReader" /></summary>
      <param name="spName">procedure name</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoRepository.Db">
      <summary>
            Microsoft Data Acess Application Block의 Database
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoRepository.DbName">
      <summary>
            Database ConnectionString 이름
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoRepository.QueryProvider">
      <summary>
            Query String Provider
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoRepository.ActiveTransaction">
      <summary>
            Current Thread Context에서 활성화된 Transaction. (없다면 null을 반환한다.)
            </summary>
      <seealso cref="P:NSoft.NFramework.Data.IAdoRepository.IsActiveTransaction" />
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoRepository.IsActiveTransaction">
      <summary>
            Is exist active transaction in Current Thread Context.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlServer.SqlCommandAsync">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlCommand" />의 비동기 방식의 함수를 TPL(Task Parallel Library)를 사용하여 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlCommand" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlCommand" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsyncBySqlString(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlString" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsyncBySqlString(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlString" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsyncByProcedure(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsyncByProcedure(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" />를 비동기 방식으로 실행하여, 결과 셋을 <see cref="T:System.Threading.Tasks.Task`1" />로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsListAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Multi-ResultSet일 경우에 DataTable 컬렉션으로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteDataTableAsListAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Multi-ResultSet일 경우에 DataTable 컬렉션으로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteNonQueryAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlCommand" />을 ExecuteNonQuery 메소드로 비동기 실행을 하도록 하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 MS SQL Server용 Database 인스턴스</param>
      <param name="sqlCommand">실행할 SqlComnnad 인스턴스</param>
      <param name="parameters">파리미터 정보</param>
      <returns>실행에 영향을 받은 행의 수를 결과로 가지는 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteNonQueryAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" />을 ExecuteNonQuery 메소드로 비동기 실행을 하도록 하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 MS SQL Server용 Database 인스턴스</param>
      <param name="query">실행할 쿼리문 또는 Procecedure 명</param>
      <param name="parameters">파리미터 정보</param>
      <returns>실행에 영향을 받은 행의 수를 결과로 가지는 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteNonQueryBySqlStringAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlString" />을 ExecuteNonQuery 메소드로 비동기 실행을 하도록 하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 MS SQL Server용 Database 인스턴스</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">파리미터 정보</param>
      <returns>실행에 영향을 받은 행의 수를 결과로 가지는 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteNonQueryByProcedureAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" />을 ExecuteNonQuery 메소드로 비동기 실행을 하도록 하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 MS SQL Server용 Database 인스턴스</param>
      <param name="spName">실행할 프로시져 명</param>
      <param name="parameters">파리미터 정보</param>
      <returns>실행에 영향을 받은 행의 수를 결과로 가지는 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteReaderAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlCommand" /> 를 이용하여, <see cref="T:System.Threading.Tasks.Task`1" />를 반환받습니다. 
            받환받은 DataReader는 꼭 Dispose() 해 주어야 Connection이 닫힙니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="sqlCommand">실행할 sqlCommand 인스턴스</param>
      <param name="parameters">Command Parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteReaderAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 를 실행하여, <see cref="T:System.Threading.Tasks.Task`1" />를 반환받습니다. 
            받환받은 DataReader는 꼭 Dispose() 해 주어야 Connection이 닫힙니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="query">실행할 쿼리문 또는 Procedure 명</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 셋을 가지는 IDataReader를 결과로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteReaderBySqlStringAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlString" /> 를 실행하여, <see cref="T:System.Threading.Tasks.Task`1" />를 반환받습니다. 
            받환받은 DataReader는 꼭 Dispose() 해 주어야 Connection이 닫힙니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 셋을 가지는 IDataReader를 결과로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteReaderByProcedureAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" /> 를 실행하여, <see cref="T:System.Threading.Tasks.Task`1" />를 반환받습니다. 
            받환받은 DataReader는 꼭 Dispose() 해 주어야 Connection이 닫힙니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="spName">실행할 프로시져 명</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 셋을 가지는 IDataReader를 결과로 가지는 Task</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteScalarAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlCommand" /> 를 비동기 방식으로 실행하여, Scalar 값을 반환하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="sqlCommand">실행할 sqlCommand 인스턴스</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 Scalar 값을 가지는 Task의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteScalarAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 를 비동기 방식으로 실행하여, Scalar 값을 반환하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="query">실행할 쿼리문 또는 Procedure 명</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 Scalar 값을 가지는 Task의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteScalarBySqlStringAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlString" /> 를 비동기 방식으로 실행하여, Scalar 값을 반환하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 Scalar 값을 가지는 Task의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteScalarByProcedureAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" /> 를 비동기 방식으로 실행하여, Scalar 값을 반환하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB의 SQL Server용 Database</param>
      <param name="spName">실행할 쿼리문</param>
      <param name="parameters">Command Parameters</param>
      <returns>결과 Scalar 값을 가지는 Task의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteXmlReaderAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand)">
      <summary>
            ExecuteXmlReader 를 비동기 IO 방식으로 실행하는 Task 를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB Database 인스턴스</param>
      <param name="sqlCommand">실행할 sqlCommand 인스턴스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteXmlReaderAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,System.Boolean,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 를 비동기 방식으로 실행하는 <see cref="T:System.Threading.Tasks.Task`1" /> 를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB Database 인스턴스</param>
      <param name="sqlCommand">실행할 sqlCommand 인스턴스</param>
      <param name="disposeCommandWhenCompleted">작업 완료 후 command를 dispose할 것인가?</param>
      <param name="parameters">Command paramters</param>
      <returns>비동기 실행용 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteXmlReaderAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 를 비동기 방식으로 실행하는 <see cref="T:System.Threading.Tasks.Task`1" /> 를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB Database 인스턴스</param>
      <param name="query">실행할 쿼리문 또는 Procedure 명</param>
      <param name="parameters">parameters</param>
      <returns>비동기 실행용 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteXmlReaderBySqlStringAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 를 비동기 방식으로 실행하는 <see cref="T:System.Threading.Tasks.Task`1" /> 를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB Database 인스턴스</param>
      <param name="sqlString">실행할 쿼리문</param>
      <param name="parameters">parameters</param>
      <returns>비동기 실행용 <see cref="T:System.Threading.Tasks.Task`1" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteXmlReaderByProcedureAsync(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Procedure <paramref name="spName" /> 을 비동기 방식으로 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />을 수행하는 <see cref="T:System.Threading.Tasks.Task`1" />를 빌드합니다.
            </summary>
      <param name="sqlDatabase">DAAB sqlDatabase</param>
      <param name="spName">수행할 Procedure name</param>
      <param name="parameters">Procedure 인자</param>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteMapObject``1(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlCommand" />를 실행하여, 결과 셋을 Persistent Object의 컬렉션으로 매핑합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sqlDatabase">
      </param>
      <param name="sqlCommand">
      </param>
      <param name="mapObjectFactory">
      </param>
      <param name="nameMapper">
      </param>
      <param name="firstResult">
      </param>
      <param name="maxResults">
      </param>
      <param name="additionalMapping">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.ExecuteMapObject``1(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Data.SqlClient.SqlCommand,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="sqlCommand" />를 실행하여, 결과 셋을 Persistent Object의 컬렉션으로 매핑합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sqlDatabase">
      </param>
      <param name="sqlCommand">
      </param>
      <param name="mapObjectFactory">
      </param>
      <param name="nameMap">
      </param>
      <param name="firstResult">
      </param>
      <param name="maxResults">
      </param>
      <param name="additionalMapping">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.GetSqlCommand(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,System.Boolean)">
      <summary>
            쿼리 문 또는 Procedure Name을 실행할 <see cref="T:System.Data.SqlClient.SqlCommand" />를 생성합니다.
            </summary>
      <param name="sqlDatabase">DAAB sqlDatabase</param>
      <param name="query">수행할 쿼리문 또는 Procedure Name</param>
      <param name="discoverParams">Procedure일 경우 Parameter 빌드</param>
      <returns>생성한 <see cref="T:System.Data.SqlClient.SqlCommand" /></returns>
      <seealso cref="!:AdoRepositoryImplBase.GetCommand(string,bool)" />
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.GetSqlStringSqlCommand(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String)">
      <summary>
            쿼리 문 <paramref name="sqlString" />을 수행할 <see cref="T:System.Data.SqlClient.SqlCommand" />를 생성합니다.
            </summary>
      <param name="sqlDatabase">DAAB sqlDatabase</param>
      <param name="sqlString">수행할 쿼리문</param>
      <returns>생성한 <see cref="T:System.Data.SqlClient.SqlCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandAsync.GetProcedureSqlCommand(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.String,System.Boolean)">
      <summary>
            Procedure <paramref name="spName" />를 수행할 <see cref="T:System.Data.SqlClient.SqlCommand" /> 를 생성합니다.
            </summary>
      <param name="sqlDatabase">DAAB sqlDatabase</param>
      <param name="spName">Procedure name</param>
      <param name="discoverParams">discover parameters</param>
      <returns>생성한 <see cref="T:System.Data.SqlClient.SqlCommand" /></returns>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlServer.SqlCommandSet">
      <summary>
            실행할 복수의 Command 를 Batch로 실행하여, round-trip을 줄이고, 속도를 향샹시킵니다.
            <see cref="T:System.Data.SqlClient.SqlCommandSet" />가 internal이라 외부에서는 사용할 수 없습니다.
            이를 사용하기 위해 delegate를 이용하여 내부 함수를 사용할 수 있도록 했습니다.
            </summary>
      <seealso cref="T:NSoft.NFramework.Data.AdoDataAdapter" />
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandSet.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandSet.Append(System.Data.SqlClient.SqlCommand)">
      <summary>
            Batch 작업을 수행할 Command 를 추가합니다. NOTE: 단 Command의 Parameter는 하나 이상이어야 합니다!!!
            </summary>
      <param name="command">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandSet.ExecuteNonQuery">
      <summary>
            등록된 Command 들을 Batch작업으로 수행하고, 모든 Batch 작업에 의해 영향을 받은 행의 갯수를 반환합니다.
            </summary>
      <returns>
            모든 Batch 작업에 의해 영향을 받은 행의 갯수를 반환합니다.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlCommandSet.Dispose">
      <summary>
            관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 응용 프로그램 정의 작업을 수행합니다.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:NSoft.NFramework.Data.SqlServer.SqlCommandSet.BatchCommand">
      <summary>
            실행할 Batch Command 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.SqlServer.SqlCommandSet.CountofCommands">
      <summary>
            Batch로 실행할 Command의 갯수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl">
      <summary>
            Microsoft SQL Server 전용의 IAdoRepository입니다. 
            비동기 IO 작업을 통해 확장성이 획기적으로 좋아졌습니다. 동시 처리 허용범위가 커졌습니다.
            NOTE: Command를 중복해서 사용하면 안됩니다. (비동기 방식이라 다른 작업에서 Command의 Connection이 닫힐 수 있습니다)
            NOTE: 중복 사용을 하고 싶다면, 메소드 호출 전에 Command에 Connection을 미리 지정해 주고, 모든 비동기 작업이 끝난 후에 Connection을 닫아야 합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoRepositoryImplBase">
      <summary>
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 Implementor의 추상 클래스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.#ctor">
      <summary>
             Initialize AdoRepositoryImplBase with default database name
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.#ctor(System.String)">
      <summary>
            Initialize AdoRepositoryImplBase with database name.
            </summary>
      <param name="dbName">database name</param>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoRepositoryImplBase.ActiveTransactionKey">
      <summary>
            Stored Key for Active Transaction in Current Thread Context.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            ADO.NET의 기본 Transaction을 시작한다. (TransactionScope와는 달리 DTC를 이용하지 않는다.)
            </summary>
      <param name="isolationLevel">Transaction 격리수준 (기본적으로 ReadCommitted)</param>
      <returns>Return a new instance of DbTransaction</returns>
      <example>
        <code>
            AdoRepository.BeginTransaction(IsolationLevel.ReadUncommitted);
            try
            {
            	DbCommand insertCommand = AdoRepository.GetSqlStringCommand(InsertString);
            	DbCommand deleteCommand = AdoRepository.GetSqlStringCommand(DeleteString);
            	DbCommand countCommand = AdoRepository.GetSqlStringCommand(CountString);
            
            	var count = Convert.ToInt32(AdoRepository.ExecuteScalar(countCommand));
            
            	AdoRepository.ExecuteNonQuery(insertCommand);
            	AdoRepository.ExecuteNonQuery(deleteCommand);
            
            	AdoRepository.Commit();
            
            	Assert.AreEqual(4, count);
            }
            catch (Exception ex)
            {
            	if (IsErrorEnabled)
            		log.ErrorException(ex);
            
            	AdoRepository.Rollback();
            
            	throw;
            }
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.BeginTransaction">
      <summary>
            ADO.NET의 기본 Transaction을 시작한다. 격리수준은 <see cref="F:System.Data.IsolationLevel.ReadCommitted" />이다. 
            (TransactionScope와는 달리 DTC를 이용하지 않는다.)
            </summary>
      <returns>Return a new instance of DbTransaction</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.Commit">
      <summary>
            현재 활성화된 Transaction이 있다면, Commit을 수행한다.
            </summary>
      <exception cref="T:System.InvalidOperationException">Current Thread Context에 활성화된 Transaction이 없을 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.Rollback">
      <summary>
            현재 활성화된 Transaction이 있다면, Rollback을 수행한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.LoadDataSet(System.Data.Common.DbDataAdapter,System.String,System.Data.DataSet,System.Int32,System.Int32)">
      <summary>
            지정된 DataAdapter를 통해 얻은 정보를 DataSet으로 빌드한다.
            </summary>
      <param name="adapter">DataAdapter</param>
      <param name="tableName">Table name</param>
      <param name="targetDataSet">저장할 Dataset</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSet(System.Data.Common.DbDataAdapter,System.String,System.Int32,System.Int32)">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="da">실행할 DataAdapter</param>
      <param name="tableName">결과 DataSet의 Table 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSet(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="cmd" />를 실행하여, 결과를 DataSet으로 반환합니다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSet(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="cmd" />를 실행하여, 결과를 DataSet으로 반환합니다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSet(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataSet을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSet(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataSet을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSetBySqlString(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="sqlString">simple query string to execute</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSetBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="sqlString">simple query string to execute</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSetByProcedure(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="spName">Procedure name to execute</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataSetByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="spName">Procedure name to execute</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTable(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTable(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTable(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTableBySqlString(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 sql string 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="sqlString">실행할 Query 문</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTableBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 sql string 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="sqlString">실행할 Query 문</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTableByProcedure(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Procedure를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="spName">실행할 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTableByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Procedure를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="spName">실행할 Select Command</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTableAsList(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
      <param name="cmd">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteDataTableAsList(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
      <param name="cmd">
      </param>
      <param name="firstResult">
      </param>
      <param name="maxResults">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecutePagingDataTable(System.Data.Common.DbCommand,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command 를 Paging 정보에 근거해서 수행하고, 결과를 DataTable로 반환한다.
            </summary>
      <param name="cmd">
      </param>
      <param name="pageIndex">Page index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 <see cref="F:NSoft.NFramework.Data.AdoTool.DefaultPageSize" />으로 간주</param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecutePagingDataTable(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" />를 Paging 정보에 근거해서 실행하고, 결과를 DataTable로 반환한다.
            NOTE: DISTINCT, TOP N 조회는 Paging에서 지원하지 않습니다.
            </summary>
      <param name="query">조회용 쿼리 문</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecutePagingDataTableBySqlString(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 조회용 쿼리문을 Paging 정보에 근거해서 수행하고, 결과를 DataTable로 반환한다.
            NOTE: 복잡한 쿼리 문장은 안될 가능성이 있습니다.
            NOTE: DISTINCT 조회는 지원하지 않습니다.
            </summary>
      <param name="selectSql">조회용 쿼리 문장 (NOTE: DISTINCT 조회는 지원하지 않습니다.)</param>
      <param name="pageIndex">Page index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 <see cref="F:NSoft.NFramework.Data.AdoTool.DefaultPageSize" />으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecutePagingDataTableByProcedure(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" /> Procedure를 실행하여, Paging 정보에 근거해서 Data를 추출하고, 결과를 DataTable로 반환한다. 
            </summary>
      <param name="spName">조회용 Procedure Name</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">Procedure Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
      <seealso cref="M:NSoft.NFramework.Data.AdoTool.GetCountingSqlString(System.String)" />
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteScalarInternal(System.Data.Common.DbCommand)">
      <summary>
            지정된 Command의 ExecuteScalar 메소드를 실행합니다.
            </summary>
      <param name="cmd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteScalar(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, and return single scalar value
            </summary>
      <param name="cmd">Instance of DbCommand to execute</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteScalar(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute query, and return single scalar value
            </summary>
      <param name="query">query string ( simple sql string or Procedure name )</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteScalarBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute sql string, and return single scalar value
            </summary>
      <param name="sqlString">simple sql string</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteScalarByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute stored procedure, and return single scalar value
            </summary>
      <param name="spName">Procedure name</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteNonQueryInternal(System.Data.Common.DbCommand)">
      <summary>
            지정된 Command의 ExecuteNonQuery 메소드를 실행합니다.
            </summary>
      <param name="cmd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteNonQuery(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified DbCommand
            </summary>
      <param name="cmd">Instance of DbCommand to execute</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteNonQuery(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified query or procedure
            </summary>
      <param name="query">query string ( simple sql string or Procedure name )</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteNonQueryBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified sql string
            </summary>
      <param name="sqlString">simple sql string</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteNonQueryByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified stored procedure
            </summary>
      <param name="spName">Procedure name</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteReaderInternal(System.Data.Common.DbCommand)">
      <summary>
            지정된 Command의 ExecuteReader 메소드를 실행합니다.
            </summary>
      <param name="cmd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteReader(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified DbCommand, and return <see cref="!:AdoDataReader" /></summary>
      <param name="cmd">DbCommand to execute</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteReader(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified query, and return <see cref="!:AdoDataReader" /></summary>
      <param name="query">query string ( sql string or procedure name )</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteReaderBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified sql string, and return <see cref="!:AdoDataReader" /></summary>
      <param name="sqlString">simple query string</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImplBase.ExecuteReaderByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified stored procedure, and return <see cref="!:AdoDataReader" /></summary>
      <param name="spName">procedure name</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepositoryImplBase.Db">
      <summary>
            Microsoft Data Acess Application Block의 Database
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepositoryImplBase.DbName">
      <summary>
            Database ConnectionString 이름
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepositoryImplBase.QueryProvider">
      <summary>
            Query String Provider  
            </summary>
      <remarks>IoC를 이용하지 않으면, 사용하기 전에 먼저 설정해 주어야 합니다.</remarks>
      <example>
        <code>
            // IoC 에서 IAdoRepository에 대해 QueryProvider를 정의해주면 사용할 수 있다. (동적으로 지정해도 된다.)
            <component id="NorthwindAdoRepository" service="NSoft.NFramework.Data.IAdoRepository, NSoft.NFramework.Data" type="NFrameowk.Data.AdoRepositoryImpl, NSoft.NFramework.Data"><parameters><QueryProvider>${IniAdoQueryProvider.Northwind}</QueryProvider></parameters></component></code>
      </example>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepositoryImplBase.ActiveTransaction">
      <summary>
            Current Thread Context에서 활성화된 Transaction. (없다면 null을 반환한다.)
            </summary>
      <seealso cref="P:NSoft.NFramework.Data.AdoRepositoryImplBase.IsActiveTransaction" />
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepositoryImplBase.IsActiveTransaction">
      <summary>
            Is exist active transaction in Current Thread Context.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.#ctor(System.String)">
      <summary>
            생성자
            </summary>
      <param name="dbName">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteDataSet(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="cmd" />를 실행하여, 결과를 DataSet으로 반환합니다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteDataTableAsList(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteNonQueryInternal(System.Data.Common.DbCommand)">
      <summary>
            지정된 Command의 ExecuteNonQuery 메소드를 실행합니다.
            </summary>
      <param name="cmd">실행할 Command 객체</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteScalarInternal(System.Data.Common.DbCommand)">
      <summary>
            지정된 Command의 ExecuteScalar 메소드를 실행합니다.
            </summary>
      <param name="cmd">실행할 Command 객체</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteReaderInternal(System.Data.Common.DbCommand)">
      <summary>
            지정된 Command의 ExecuteReader 메소드를 실행합니다.
            </summary>
      <param name="cmd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.ExecuteXmlReader(System.Data.SqlClient.SqlCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 Command의 ExecuteXmlReader를 비동기적으로 수행합니다.
            </summary>
      <param name="cmd">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl.Db">
      <summary>
             Microsoft Enterprise Library DAAB의 Sql Server용 Database
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlServer.SqlTool">
      <summary>
            SQL Server의 SQL 수형과 .NET Language 수형간의 변환 함수를 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.AssertIsMSqlCommand(System.Data.Common.DbCommand)">
      <summary>
        <paramref name="cmd" />의 수형이 <see cref="T:System.Data.SqlClient.SqlCommand" />수형인지 확인합니다.
            </summary>
      <param name="cmd">수형 확인할 DbCommand 인스턴스</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="cmd" />의 수형이 <see cref="T:System.Data.SqlClient.SqlCommand" />가 아닐 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.CreateSqlConnection(Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase,System.Boolean@)">
      <summary>
            Oracle Connection을 비동기 방식으로 엽니다.
            </summary>
      <param name="db">DAAB SqlDatabase 인스턴스</param>
      <param name="newConnectionCreated">새로운 Connenction이 생성되었는지 여부</param>
      <returns>새로 연결된 <see cref="T:System.Data.SqlClient.SqlConnection" />의 인스턴스, 만약 연결에 실패했다면 null을 반환합니다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlBinary)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlByte)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlInt16)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlInt32)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlInt64)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlMoney)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlSingle)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlDouble)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlString)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.ToNullableValue(System.Data.SqlTypes.SqlGuid)">
      <summary>
        <paramref name="sqlValue" />의 값을 Nullable 수형으로 반환한다. 실제 값이 Null인 경우는 Null을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Byte[])">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Boolean})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Byte})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Int16})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Int32})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Int64})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Decimal})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Single})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Double})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.String)">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.DateTime})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlServer.SqlTool.FromNullableValue(System.Nullable{System.Guid})">
      <summary>
        <paramref name="nullableValue" />를 해당하는 Sql 수형으로 변환합니다. null 값인 경우 기본 클래스를 반환합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoTool">
      <summary>
            AdoRepository의 ExtensionMethods 
            </summary>
      <summary>
            Helper class for ADO.NET Operation
            </summary>
      <summary>
            ADO.NET 객체(DataReader,DataTable)을 Persistent Object로 Mapping (변환)을 지원하는 Extension 메소드들입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.DefaultTableName">
      <summary>
            DataTable의 기본 이름 ("Table")
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.DEFAULT_DISCOVER_PARAMETER">
      <summary>
            Command 객체 생성시, Data Source로부터 Parameter 정보를 찾아낼 것인가. (기본=True)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.DefaultPageSize">
      <summary>
            Paging 시 기본 PageSize (10)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_SELECT">
      <summary>
            SELECT sql statement
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_DISTINCT">
      <summary>
            DISTINCT sql statement
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_FROM">
      <summary>
            FROM sql statement
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_TOP">
      <summary>
            TOP sql statement
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_LIMIT">
      <summary>
            LIMIT
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_OFFSET">
      <summary>
            Offset
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_COUNT">
      <summary>
            COUNT(*) sql statement
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.SQL_ORDER_BY">
      <summary>
            ORDER BY sql statement
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.PARAMETER_PREFIX">
      <summary>
            Command Parameter의 DataSource별 접두사
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Ping(NSoft.NFramework.Data.IAdoRepository)">
      <summary>
        <paramref name="repository" />에 해당하는 Database에 연결이 제대뢰 되는지 확인합니다.
            </summary>
      <param name="repository">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CreateDatabase">
      <summary>
            create <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> instance for default connection string
            </summary>
      <returns>instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CreateDatabase(System.String)">
      <summary>
            create <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> instance for the specified connection string name. if dbName is null or empty string, using default database.
            </summary>
      <param name="dbName">database connection string name</param>
      <returns>instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CreateTransactionScopeConnection(Microsoft.Practices.EnterpriseLibrary.Data.Database)">
      <summary>
            현재 Transaction에 해당하는 Connection을 반환한다.
            이미 열려진 Connection을 재활용하거나, TransactionScope가 활성화되어 있다면 새로운 connection을 빌드해서 반환한다.
            TransactionScope도 없고, <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" />관련해서 아직 만들어진게 없다면, 새로운 <see cref="T:System.Data.Common.DbConnection" />을 생성하고, Open() 해서 반환한다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /></param>
      <returns>
            TransactionScope이 활성화되어 있다면, TransactionScope에서 활성화된 <see cref="T:System.Data.Common.DbConnection" />을 반환,
            TransactionScope가 없다면 새로운 <see cref="T:System.Data.Common.DbConnection" />을 생성하여 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CreateTransactionScopeConnection(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Boolean@,System.Func{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbConnection})">
      <summary>
            현재 Transaction에 해당하는 Connection을 반환한다.
            이미 열려진 Connection을 재활용하거나, TransactionScope가 활성화되어 있다면 새로운 connection을 빌드해서 반환한다.
            TransactionScope도 없고, <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" />관련해서 아직 만들어진게 없다면, 새로운 <see cref="T:System.Data.Common.DbConnection" />을 생성하고, Open() 해서 반환한다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /></param>
      <param name="newConnectionCreated">새로 Connection이 만들어졌는지</param>
      <param name="connectionFactory">Connection을 새로 만드는 메소드</param>
      <returns>
            TransactionScope이 활성화되어 있다면, TransactionScope에서 활성화된 <see cref="T:System.Data.Common.DbConnection" />을 반환,
            TransactionScope가 없다면 새로운 <see cref="T:System.Data.Common.DbConnection" />을 생성하여 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.ForceCloseConnection(System.Data.Common.DbCommand)">
      <summary>
        <paramref name="command" />의 Connnection 을 닫습니다.
            </summary>
      <param name="command">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.ClearAllConnectionPools">
      <summary>
            기본 Database의 Connection Pool을 제거합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.ClearAllConnectionPools(System.String)">
      <summary>
            지정된 Database의 Connection Pool을 모두 제거합니다.
            </summary>
      <param name="databaseName">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.ClearAllConnectionPoolsFromConfiguration">
      <summary>
            환경설정에 정의된 모든 Database Connection 에 해당하는 ConnectionPool을 제거합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.BuildDataTableFromDataReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <paramref name="reader" />의 내용을 읽어, <see cref="T:System.Data.DataTable" /> 로 빌드합니다. <b>다 읽은 DataReader는 닫아버립니다.</b></summary>
      <param name="db">DAAB Database instance</param>
      <param name="reader">읽을 IDataReader</param>
      <param name="firstResult">첫번째 인덱스 (0부터 시작)</param>
      <param name="maxResults">읽을 최대 레코드 수</param>
      <returns>DataReader의 내용으로 채워진 DataTable</returns>
      <seealso cref="T:NSoft.NFramework.Data.AdoDataAdapter" />
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.BuildDataTableFromDataReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.IDataReader,System.Func{System.Data.DataTable},System.Int32,System.Int32)">
      <summary>
        <paramref name="reader" />의 내용을 읽어, <see cref="T:System.Data.DataTable" /> 로 빌드합니다. <b>다 읽은 DataReader는 닫아버립니다.</b></summary>
      <param name="db">DAAB Database instance</param>
      <param name="reader">읽을 IDataReader</param>
      <param name="dataTableFactory">DataTable 생성용 델리게이트</param>
      <param name="firstResult">첫번째 인덱스 (0부터 시작)</param>
      <param name="maxResults">읽을 최대 레코드 수</param>
      <returns>DataReader의 내용으로 채워진 DataTable</returns>
      <seealso cref="T:NSoft.NFramework.Data.AdoDataAdapter" />
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetReturnValue(System.Collections.Generic.IEnumerable{NSoft.NFramework.Data.IAdoParameter})">
      <summary>
        <paramref name="parameters" /> 중에 Return Value에 해당하는 Parameter의 값을 반환합니다. 없으면 null 을 반환합니다.
            </summary>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetOutputParameters(System.Collections.Generic.IEnumerable{NSoft.NFramework.Data.IAdoParameter})">
      <summary>
        <paramref name="parameters" /> 중에 Direction이 <see cref="F:System.Data.ParameterDirection.Input" />을 제외한 파라미터 컬렉션을 열거합니다.
            </summary>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetReturnValue(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
      <summary>
            Stored Procedure의 Return Value 값을 반환한다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" />defined in DAAB</param>
      <param name="cmd">instance of DbCommand</param>
      <returns>return value of DbCommand, if not found return value, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetReturnValue``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,``0)">
      <summary>
            Command의 ReturnValue Parameter의 값을 반환한다. 없다면 지정된 기본값을 반환한다.
            </summary>
      <typeparam name="T">Type of return value</typeparam>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</param>
      <param name="cmd">instance of DbCommand</param>
      <param name="defaultValue">default value</param>
      <returns>return value of DbCommand</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetParameterValue(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Collections.Generic.IEnumerable{NSoft.NFramework.Data.IAdoParameter},System.String)">
      <summary>
            DbCommand의 Parameter 정보를 <see cref="M:NSoft.NFramework.Data.AdoTool.GetOutputParameters(System.Collections.Generic.IEnumerable{NSoft.NFramework.Data.IAdoParameter})" />를 통해 얻고, 특정 Parameter의 값을 가져옵니다.
            </summary>
      <param name="db">DAAB Database instance</param>
      <param name="parameters">Output Parameters</param>
      <param name="parameterName">Parameter 명 (Prefix를 안붙여도 됩니다)</param>
      <returns>Parameter에 해당하는 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.RemoveParameterPrefix(System.String)">
      <summary>
            DB마다 다른 Parameter Prefix ('?', '@', ':' 등) 을 제거한다.
            </summary>
      <param name="parameterName">Parameter name</param>
      <returns>DB별로 특성화된 Parameter Prefix가 제거된 Parameter name</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.InitializeParameterValues(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
      <summary>
            지정된 Command 의 Parameter 값을 <see cref="F:System.DBNull.Value" /> 값으로 초기화한다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</param>
      <param name="cmd">instance of DbCommand</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.SetParameterValues(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" />의 Parameter에 값을 설정합니다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</param>
      <param name="cmd">instance of DbCommand</param>
      <param name="adoParameters">Command Parameter에 설정할 정보</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.SetParameterValues``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,``0,NSoft.NFramework.Data.Mappers.INameMap,System.Boolean)">
      <summary>
        <see cref="!:ConvertAll&lt;TEntity&gt;(IDataReader,INameMap)" />와는 반대로, 
            Persistent Object의 속성정보를 DbCommand Parameter Value로 설정한다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</param>
      <param name="cmd">instance of DbCommand</param>
      <param name="entity">Command로 실행할 Persistent object</param>
      <param name="nameMaps">DbCommand 인자명 : Persistent Object 속성명의 매핑 정보</param>
      <param name="ignoreCase">컬럼명과 속성명의 대소문자 구분없이 매칭합니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetOutputParameters(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
      <summary>
            Command 실행 후 Parameter 중에 ParameterDirection이 Input 이 아닌, InputOutput, Output, ReturnValue에 해당하는 Parameter 정보들만 따로 받는다.
            </summary>
      <param name="db">instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database" /> defined in DAAB</param>
      <param name="cmd">instance of DbCommand</param>
      <returns>DbCommand의 Paramter 중에 ParameterDirection이 Input 이 아닌 Parameter의 정보</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetParameterNames(System.Data.Common.DbCommand)">
      <summary>
            Command Parameters의 이름 중에 접두사('@', ':' 등)을 제거하고 대문자로 변환하여 가져온다.
            </summary>
      <param name="cmd">instance of DbCommand</param>
      <returns>Collection of parameter name that defined in the specified command.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CreateCommandParameters(System.Data.Common.DbCommand,NSoft.NFramework.Data.INamedParameter[])">
      <summary>
            ASP.NET Raw 형태의 Command에 Parameter를 빌드한다. RDBMS별 Parameter 접두사에 대한 관리를 해주지 않습니다.
            </summary>
      <param name="cmd">instance of DbCommand</param>
      <param name="parameters">DbCommand Parameter에 설정할 정보</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Count(System.Data.IDataReader)">
      <summary>
            지정된 <see cref="T:System.Data.IDataReader" />의 전체 크기를 구한다. Count를 구한 후에는 reader를 사용할 수 없고, Disposing을 꼭 해주어야 한다.
            </summary>
      <param name="reader">Data Source</param>
      <returns>Record 갯수</returns>
      <example>
        <code>
            	long count = 0;
            	using(IDataReader reader = AdoRepository.ExecuteReader("SELECT * FROM sysobjects"))
            		count = reader.LongCount();
            
            	
            	// 앞 5개, 뒤 5개를 뺀 중간 값들...
                using(IDataReader reader = AdoRepository.ExecuteReader("SELECT * FROM sysobjects"))
            	{
            		var sysObjects = AdoTool.ConvertAll&lt;SysObject&gt;(reader, reader.NameMapping(), 5, count-5);
            	}
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetCommonPropertyNames(System.Type,System.String[])">
      <summary>
            IDataReader의 ColumnName과 지정된 인스턴스 속성이 같은 놈만 추려낸다. (대소문자 구분 없음)
            </summary>
      <param name="instanceType">Type of persistent object</param>
      <param name="columnNames">필터링할 컬럼명</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            지정된 IDataReader로부터 컬럼명-속성명 매퍼를 기준으로, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 대상 객체의 속성</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.String[])">
      <summary>
        <paramref name="reader" /> 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Int32,System.Int32,System.String[])">
      <summary>
        <paramref name="reader" /> 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0},System.String[])">
      <summary>
        <paramref name="reader" />정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <param name="additionalMapping">속성 이외의 추가 매핑을 위한 Action</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},System.String[])">
      <summary>
        <paramref name="reader" />정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},System.Int32,System.Int32,System.String[])">
      <summary>
        <paramref name="reader" />정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},System.Action{System.Data.IDataReader,``0},System.String[])">
      <summary>
        <paramref name="reader" /> 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <param name="additionalMapping">속성 이외의 추가 매핑을 위한 Action</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0},System.String[])">
      <summary>
        <paramref name="reader" /> 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <param name="additionalMapping">속성 이외의 추가 매핑을 위한 Action</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            지정된 IDataReader로부터 컬럼명-속성명 매퍼(<paramref name="nameMapper" />) 를 기준으로, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMapper">DB 컬럼명- 클래스 속성명 매핑 규칙( <seealso cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />, <seealso cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" /> 등)</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 대상 객체의 속성</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            지정된 IDataReader로부터 컬럼명-속성명 매퍼(<paramref name="nameMapper" />) 를 기준으로, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMapper">DB 컬럼명- 클래스 속성명 매핑 규칙( <seealso cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />, <seealso cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" /> 등)</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 대상 객체의 속성</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 IDataReader로부터 (컬럼명-속성명) 매핑 정보(<paramref name="nameMap" />) 에 따라, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32)">
      <summary>
            지정된 IDataReader로부터 (컬럼명-속성명) 매핑 정보(<paramref name="nameMap" />) 에 따라, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 IDataReader로부터 (컬럼명-속성명) 매핑 정보(<paramref name="nameMap" />) 에 따라, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32)">
      <summary>
            지정된 IDataReader로부터 (컬럼명-속성명) 매핑 정보(<paramref name="nameMap" />) 에 따라, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0})">
      <summary>
            지정된 IDataReader로부터 (컬럼명-속성명) 매핑 정보(<paramref name="nameMap" />) 에 따라, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0})">
      <summary>
            지정된 IDataReader로부터 (컬럼명-속성명) 매핑 정보(<paramref name="nameMap" />) 에 따라, 대상 객체를 인스턴싱하고, 속성에 값을 설정하여 반환합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,NSoft.NFramework.Data.Persisters.IReaderPersister{``0})">
      <summary>
            DataReader 정보를 <paramref name="persister" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <returns>생성된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Action{System.Data.IDataReader,``0})">
      <summary>
            DataReader 정보를 <paramref name="persister" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="additinalMapping">부가 매핑 작업을 수행하는 델리게이트</param>
      <returns>생성된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Int32,System.Int32)">
      <summary>
             DataReader 정보를 <paramref name="persister" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <returns>생성된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Int32,System.Int32,System.Action{System.Data.IDataReader,``0})">
      <summary>
            DataReader 정보를 <paramref name="persister" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <param name="additionalMapping">부가 매핑 작업을 수행하는 델리게이트</param>
      <returns>생성된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})">
      <summary>
            지정한 DataReader 정보를 <paramref name="readerMapFunc" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="readerMapFunc">대상 객체를 빌드하는 함수</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0},System.Int32,System.Int32)">
      <summary>
            지정한 DataReader 정보를 <paramref name="readerMapFunc" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="readerMapFunc">대상 객체를 빌드하는 함수</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapIf``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Func{System.Data.IDataReader,System.Boolean},System.Action{System.Data.IDataReader,``0})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 필터링 (<paramref name="rowFilter" />)애 통과한 Row만 <paramref name="nameMap" />를 통해 매핑을 수행합니다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="rowFilter">매핑할 Row를 선별할 필터 함수</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <returns>매핑된 대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapIf``1(System.Data.IDataReader,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Func{System.Data.IDataReader,System.Boolean},System.Action{System.Data.IDataReader,``0})">
      <summary>
            DataReader 정보를 <paramref name="persister" />가 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="rowFilter">매핑할 Row를 선별할 필터 함수</param>
      <param name="additionalMapping">부가 매핑 작업을 수행하는 델리게이트</param>
      <returns>생성된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapIf``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0},System.Func{System.Data.IDataReader,System.Boolean})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 필터링 (<paramref name="rowFilter" />)애 통과한 Row만 <paramref name="readerMapFunc" />를 통해 매핑을 수행합니다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="readerMapFunc">매핑 함수</param>
      <param name="rowFilter">매핑할 Row를 선별할 필터 함수</param>
      <returns>매핑된 대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapWhile``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Func{System.Data.IDataReader,System.Boolean},System.Action{System.Data.IDataReader,``0})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 <paramref name="nameMap" />를 통해 매핑을 수행하는데, 계속조건 (<paramref name="continuationCondition" />) 이 만족할때까지만 수행한다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="targetFactory">대상 객체 생성용 Factory</param>
      <param name="nameMap">DB 컬럼명- 클래스 속성명 매핑 정보</param>
      <param name="continuationCondition">진행 조건 (False가 나올 때까지 진행합니다)</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <returns>매핑된 대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapWhile``1(System.Data.IDataReader,NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Func{System.Data.IDataReader,System.Boolean},System.Action{System.Data.IDataReader,``0})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 <paramref name="persister" />를 통해 매핑을 수행하는데, 계속조건 (<paramref name="continuationCondition" />) 이 만족할때까지만 수행한다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="persister">대상 객체를 빌드하는 Persister</param>
      <param name="continuationCondition">진행 조건 (False가 나올 때까지 진행합니다)</param>
      <param name="additionalMapping">컬럼-속성 단순 값 매핑 이외에 부가적인 매핑을 수행하기 위해 제공되는 델리게이트</param>
      <returns>매핑된 대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapWhile``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0},System.Func{System.Data.IDataReader,System.Boolean})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 <paramref name="readerMapFunc" />를 통해 매핑을 수행하는데, 계속조건 (<paramref name="continuationCondition" />) 이 만족할때까지만 수행한다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="readerMapFunc">매핑 함수</param>
      <param name="continuationCondition">진행 조건 (False가 나올 때까지 진행합니다)</param>
      <returns>매핑된 대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.IDataReader,System.Int32,System.Int32,System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            DataReader 정보를 대상 수형으로 병렬 방식으로 매핑합니다.
            </summary>
      <typeparam name="T">매핑 대상 수형</typeparam>
      <param name="reader">원본 DataReader</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 인덱스 (1 이상 설정해야 적용됨)</param>
      <param name="additionalMapping">추가적인 매핑 작업</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 대상 객체의 속성들</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Action{NSoft.NFramework.Data.AdoResultRow,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            IDataReader 정보를 병렬 방식으로 매핑을 수행하여, 컬렉션을 반환합니다.
            </summary>
      <typeparam name="T">매핑 대상 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="nameMapper">컬럼명-속성명 Mapper</param>
      <param name="targetFactory">대상 수형 Factory 함수</param>
      <param name="additionalMapping">추가 매핑 작업을 수행할 델리게이트</param>
      <param name="propertyExprsToExclude">매핑 작업에서 제외할 속성 표현식 (예: user=&gt;user.Password)</param>
      <returns>매핑된 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            IDataReader 정보를 병렬 방식으로 매핑을 수행하여, 컬렉션을 반환합니다.
            </summary>
      <typeparam name="T">매핑 대상 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="nameMapper">컬럼명-속성명 Mapper</param>
      <param name="targetFactory">대상 수형 Factory 함수</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <param name="propertyExprsToExclude">매핑 작업에서 제외할 속성 표현식 (예: user=&gt;user.Password)</param>
      <returns>매핑된 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.IDataReader,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32,System.Action{NSoft.NFramework.Data.AdoResultRow,``0})">
      <summary>
            IDataReader 정보를 병렬 방식으로 매핑을 수행하여, 컬렉션을 반환합니다.
            </summary>
      <typeparam name="T">매핑 대상 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="nameMap">컬럼명-속성명 매핑 정보</param>
      <param name="targetFactory">대상 수형 Factory 함수</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <param name="additionalMapping">추가 매핑 작업을 수행할 델리게이트</param>
      <returns>매핑된 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.IDataReader,System.Func{NSoft.NFramework.Data.AdoResultRow,``0},System.Int32,System.Int32)">
      <summary>
            IDataReader 정보를 <paramref name="rowMapFunc" />가 병렬 방식으로 처리하여 대상 객체로 빌드합니다.
            </summary>
      <typeparam name="T">대상 객체의 수형</typeparam>
      <param name="reader">DataReader</param>
      <param name="rowMapFunc">대상 객체를 빌드하는 함수</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작합니다. null이면 0으로 간주)</param>
      <param name="maxResults">매핑할 최대 레코드 수 (0이면, IDataReader의 끝까지 매핑합니다)</param>
      <returns>매핑된 대상 객체의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapIfAsParallel``1(System.Data.IDataReader,System.Func{NSoft.NFramework.Data.AdoResultRow,``0},System.Func{NSoft.NFramework.Data.AdoResultRow,System.Boolean})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 필터링 (<paramref name="rowFilter" />)애 통과한 Row만 <paramref name="rowMapFunc" />를 통해 병렬 방식으로 매핑을 수행합니다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="rowMapFunc">매핑 함수</param>
      <param name="rowFilter">매핑할 Row를 선별할 필터 함수</param>
      <returns>대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapWhileAsParallel``1(System.Data.IDataReader,System.Func{NSoft.NFramework.Data.AdoResultRow,``0},System.Func{NSoft.NFramework.Data.AdoResultRow,System.Boolean})">
      <summary>
        <paramref name="reader" />의 레코드 정보를 <paramref name="rowMapFunc" />를 통해 매핑을 병렬 방식으로 수행하는데, 계속조건 (<paramref name="continuationCondition" />) 이 만족할때까지만 수행한다.
            </summary>
      <typeparam name="T">대상 객체</typeparam>
      <param name="reader">IDataReader 객체</param>
      <param name="rowMapFunc">매핑 함수</param>
      <param name="continuationCondition">진행 조건 (False가 나올 때까지 진행합니다)</param>
      <returns>대상 객체 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.String[])">
      <summary>
        <paramref name="table" />의 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="table">읽을 DataTable</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Int32,System.Int32,System.String[])">
      <summary>
        <paramref name="table" />의 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="table">읽을 DataTable</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Func{``0},System.String[])">
      <summary>
        <paramref name="table" />의 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="table">읽을 DataTable</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Func{``0},System.Int32,System.Int32,System.String[])">
      <summary>
        <paramref name="table" />의 정보를 읽어들여, <see cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" /> 매핑정보를 기반으로 T 수형의 인스턴스를 생성하여 제공합니다.
            </summary>
      <typeparam name="T">생성할 Persistent object의 수형</typeparam>
      <param name="table">읽을 DataTable</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <param name="propertyNamesToExclude">매핑에서 제외할 속성명</param>
      <returns>Persistent object의 열거자</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
        <paramref name="table" />의 정보를 Persistent object로 변환하여 제공합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />원본 데이타 테이블</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <param name="nameMapper">컬럼명-속성명 매퍼</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 대상 객체의 속성</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32)">
      <summary>
        <paramref name="table" />의 정보를 Persistent object로 변환하여 제공합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="nameMap">컬럼명-속성명 매핑정보</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32)">
      <summary>
        <paramref name="table" />의 정보를 Persistent object로 변환하여 제공합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="nameMap">컬럼명-속성명 매핑정보</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="targetFactory">Persistent object 생성 함수</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,NSoft.NFramework.Data.Persisters.IRowPersister{``0},System.Int32,System.Int32)">
      <summary>
        <paramref name="table" />의 정보를 Persistent object로 변환하여 제공합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="rowPersister">Persister</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Int32,System.Int32)">
      <summary>
        <paramref name="table" />의 정보를 Persistent object로 변환하여 제공합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="rowMapper">매핑 함수</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.Map``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Func{System.Data.DataRow,System.Boolean},System.Func{System.Data.DataRow,System.Boolean})">
      <summary>
        <paramref name="table" />의 레코드 중 시작 ~ 끝 범위 조건 (<paramref name="startPredicate" />, <paramref name="endPredicate" />)에 해당하는 DataRow만 매핑함수를 이용하여 매핑합니다.
            </summary>
      <example>
        <code>
                // 모든 레코드
            	Map{User}(table, row=&gt;new User(row), row=&gt;true, row=&gt;false);
                
            	// 특정 컬럼 값이 있으면 시작하여 끝까지
                Map{User}(table, row=&gt;new User(row), row=&gt;row.IsNull("UserNo")==false, row=&gt;false);
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapIf``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Func{System.Data.DataRow,System.Boolean})">
      <summary>
        <paramref name="table" />의 레코드 중 <paramref name="filterFunc" />으로 필터링된 DataRow만 매핑을 수행합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapWhile``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Func{System.Data.DataRow,System.Boolean})">
      <summary>
        <paramref name="continuationCondition" />이 만족할 때까지만, Mapping을 수행합니다. 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,System.String[])">
      <summary>
            DataTable 정보를 병렬로 Map을 수행합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="propertyNameToExclude">값 설정을 제외할 속성 명</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,System.Int32,System.Int32,System.String[])">
      <summary>
            DataTable 정보를 병렬로 Map을 수행합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <param name="propertyNameToExclude">값 설정을 제외할 속성 명</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMap,System.Int32,System.Int32)">
      <summary>
            DataTable 정보를 병렬로 Map을 수행합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="nameMap">Name Map</param>
      <param name="targetFactory">Persistent object factory</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,System.Func{``0},NSoft.NFramework.Data.Mappers.INameMapper,System.Int32,System.Int32)">
      <summary>
            DataTable 정보를 병렬로 Map을 수행합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="nameMapper">Name Mapper</param>
      <param name="targetFactory">Persistent object factory</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,NSoft.NFramework.Data.Persisters.IRowPersister{``0},System.Int32,System.Int32)">
      <summary>
            DataTable 정보를 병렬로 Map을 수행합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="rowPersister">
        <see cref="T:System.Data.DataRow" />로부터 Persistent object를 빌드하는 Persister</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Int32,System.Int32)">
      <summary>
        <paramref name="table" />의 정보를 Persistent object로 병렬로 변환하여 제공합니다.
            </summary>
      <typeparam name="T">Persistent object 의 수형</typeparam>
      <param name="table">
        <see cref="T:System.Data.DataTable" />
      </param>
      <param name="rowMapper">매핑 함수</param>
      <param name="firstResult">Persistent object를 만들 첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">Persistent object를 만들 최대 레코드 수 (0이거나 null이면 DataReader 끝까지)</param>
      <returns>Persistent object의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.MapAsParallel``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Func{System.Data.DataRow,System.Boolean})">
      <summary>
            DataTable 정보를 기준으로 병렬로 Mapping을 수행해 T 수형의 인스턴스를 빌드합니다.
            </summary>
      <typeparam name="T">Mapping될 인스턴스의 수형</typeparam>
      <param name="table">DataTable</param>
      <param name="rowMapper">매핑 함수</param>
      <param name="dataRowFilter">매핑할 DataRow인지 판단하는 Predicate</param>
      <returns>매핑된 인스턴스의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.ParallelMapWhile``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0},System.Func{System.Data.DataRow,System.Boolean})">
      <summary>
            계속 조건(<paramref name="continuationCondition" />)이 참을 반환할 동안은 병렬로 매핑을 수행하여 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.IsSqlString(System.String)">
      <summary>
            지정한 쿼리문이 일반적인 쿼리문인지, Stored Procedure 이름인지 판단한다.
            </summary>
      <remarks>
            DAAB의 Database에는 GetSqlStringCommand, GetProcedureCommand 만 지원한다. 
            동적으로 실행할 쿼리문이 결정될 때에는 GetCommand 와 같이 일반 SQL 문장과 Procedure Name을 구분하지 않고, Command를 빌드해주는 함수가 필요하다.
            </remarks>
      <param name="query">검사할 SQL 문장</param>
      <returns>일반 SQL 문장이면 true, Stored Procedure Name이면 false 반환</returns>
      <see cref="!:IAdoRepository.GetCommand(string,bool)" />
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.GetCountingSqlString(System.String)">
      <summary>
            조회용 문장으로부터 결과 셋의 Count를 세는 쿼리 문장으로 변환합니다.
            NOTE : 현재 지원되지 않는 코드는 DISTINCT, TOP 이 들어간 코드입니다.
            </summary>
      <param name="selectSql">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CanConvertableSqlStringToCounting(System.String)">
      <summary>
            조회용 쿼리문을 Count 쿼리문으로 변환 가능한지 판단한다. (DISTINCT, TOP 이 들어가면 안됩니다.)
            </summary>
      <param name="selectSql">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.ToAdoResultSet(System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
            지정한 <see cref="T:System.Data.IDataReader" /> 정보를 읽어 <see cref="T:NSoft.NFramework.Data.AdoResultSet" />으로 빌드합니다.
            </summary>
      <param name="reader">DataReader</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (1 이상, null|0 이면 최대 레코드)</param>
      <returns>빌드된 <see cref="T:NSoft.NFramework.Data.AdoResultSet" /> 인스턴스</returns>
    </member>
    <member name="F:NSoft.NFramework.Data.AdoTool.AdoIsolationLevel">
      <summary>
            ADO.NET Transaction 시의 기본 격리 수준 (= <see cref="F:System.Transactions.IsolationLevel.Unspecified" />)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.EnlistCommandToActiveTransaction(NSoft.NFramework.Data.IAdoRepository,System.Data.Common.DbCommand)">
      <summary>
            지정한 Command를 현재 활성화된 Transaction에 참여시킵니다.
            </summary>
      <param name="repository">
      </param>
      <param name="cmd">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.CreateTransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel)">
      <summary>
            새로운 TransactionScope 를 생성한다.
            </summary>
      <param name="scopeOption">TransactionScopeOption 값</param>
      <param name="isolationLevel">Transaction 격리수준</param>
      <returns>Instance of new <see cref="T:System.Transactions.TransactionScope" /></returns>
      <example>
        <code>
            using(TransactionScope txScope = AdoTool.CreateTransactionScope(TransactionScopeOption.Required, System.Transactions.IsolationLevel.ReadCommitted))
            {
            	// database operations...
            
            	txScope.Commit();
            }
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.UseTransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel,System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
      <param name="scopeOption">TransactionScopeOption 값</param>
      <param name="isolationLevel">Transaction 격리수준</param>
      <param name="actionsToExecute">TransactionScope 안에서 실행할 Action(s).</param>
      <example>
        <code>
            	// 한 Tx안에서 3개의 Action 를 수행합니다.
            	AdoTool.UseTransactionScope(TransactionScopeOption.Required,
                                             IsolationLevel.ReadCommited,
                                             FindAll_By_DetachedCriteria, 
                                             FindAll_By_Criterion, 
                                             FindAll_By_Example);
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.UseTransactionScope(System.Action)">
      <summary>
            지정된 Action을 Transaction Scope로 묶어서 처리합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.UseTransactionScope(System.Transactions.TransactionScopeOption,System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.UseTransactionScope(System.Transactions.IsolationLevel,System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoTool.UseTransactionScope(System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoTool.DefaultDatabaseName">
      <summary>
            Default Database name (not connection string) that defined in configuration at defaultDatabase section with DAAB.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoTool.DefaultConnectionStringSettings">
      <summary>
            DAAB에서 설정한 기본 Database의 <see cref="T:System.Configuration.ConnectionStringSettings" /> 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.ForTesting(System.Action,System.Transactions.TransactionScopeOption)">
      <summary>
            Database 작업을 테스트하기 위한 Utility 함수이다.<br />
            지정된 테스트용 DB 작업이 실제 Database에서 실행은 되지만 Transaction이 Commit이 되지 않으므로, 테스트시에 유용한다.
            </summary>
      <param name="actionToTest">테스트할 Action</param>
      <param name="options">TransactionScopeOption</param>
      <example>
            // ForTesting 의 anonymous method가 실행되지만 실제 DB에 commit 되지는 않습니다.
            <code>
            var originalCount = Convert.ToInt32(AdoRepository.ExecuteScalar(CountString));
            AdoWith.ForTesting(delegate
            	{
            		AdoRepository.ExecuteNonQuery(InsertString);
            		AdoRepository.ExecuteNonQuery(InsertString2);
            		var count = Convert.ToInt32(AdoRepository.ExecuteScalar(CountString));
            
            		Assert.AreEqual(originalCount + 2, count);
            	});
            
            var rollbackCount = Convert.ToInt32(AdoRepository.ExecuteScalar(CountString));
            Assert.AreEqual(originalCount, rollbackCount);
            </code></example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.ForTesting(System.Collections.Generic.IEnumerable{System.Action},System.Transactions.IsolationLevel)">
      <summary>
            Database 작업을 테스트하기 위한 Utility 함수이다.<br />
            지정된 테스트용 DB 작업이 실제 Database에서 실행은 되지만 Transaction이 Commit이 되지 않으므로, 테스트시에 유용한다.
            </summary>
      <remarks>
            Database 작업에 대해, 실제 DB에 적용은 되지 않고, 테스트만을 하기 원할 때 사용합니다.
            </remarks>
      <param name="actionsToTest">테스트할 Action 시퀀스</param>
      <param name="isolationLevel">Transaction isolation level</param>
      <example>
        <code>
            // ForTesting 의 anonymous method가 실행되지만 실제 DB에 commit 되지는 않습니다.
            IList{Action} actions = new List{Action}();
            
            actions.Add(DeleteActionTest);
            actions.Add(InsertActionTest);
            actions.Add(DeleteActionTest);
            actions.Add(InsertActionTest);
            
            var originalCount = TotalCount();
            
            actions.ForTesting(AdoTool.AdoIsolationLevel);
            
            Assert.AreEqual(originalCount, TotalCount());
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.ForTesting(System.Collections.Generic.IEnumerable{System.Action})">
      <summary>
            Database 작업을 테스트하기 위한 Utility 함수이다.<br />
            지정된 테스트용 DB 작업이 실제 Database에서 실행은 되지만 Transaction이 Commit이 되지 않으므로, 테스트시에 유용한다.
            </summary>
      <remarks>
            Database 작업에 대해, 실제 DB에 적용은 되지 않고, 테스트만을 하기 원할 때 사용합니다.
            </remarks>
      <param name="actionsToTest">테스트할 Action 시퀀스</param>
      <example>
        <code>
            // ForTesting 의 anonymous method가 실행되지만 실제 DB에 commit 되지는 않습니다.
            IList{Action} actions = new List{Action}();
            
            actions.Add(DeleteActionTest);
            actions.Add(InsertActionTest);
            actions.Add(DeleteActionTest);
            actions.Add(InsertActionTest);
            
            var originalCount = TotalCount();
            
            actions.ForTesting(AdoTool.AdoIsolationLevel);
            
            Assert.AreEqual(originalCount, TotalCount());
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.ForTesting(System.Transactions.IsolationLevel,System.Action[])">
      <summary>
            Database 작업을 테스트하기 위한 Utility 함수이다.<br />
            지정된 테스트용 DB 작업이 실제 Database에서 실행은 되지만 Transaction이 Commit이 되지 않으므로, 테스트시에 유용한다.
            </summary>
      <remarks>
            Database 작업에 대해, 실제 DB에 적용은 되지 않고, 테스트만을 하기 원할 때 사용합니다.
            </remarks>
      <param name="isolationLevel">Transaction isolation level</param>
      <param name="actionsToTest">테스트할 <see cref="T:System.Action" /> 시퀀스</param>
      <example>
        <code>
            // ForTesting 의 anonymous method가 실행되지만 실제 DB에 commit 되지는 않습니다.
            [Test]
            [ThreadedRepeat(3)]
            public void MultipleActionsForTesting2()
            {
            	var originalCount = TotalCount();
            
            	AdoWith.ForTesting(AdoTool.AdoIsolationLevel,
            	                   DeleteActionTest,
            	                   InsertActionTest,
            	                   DeleteActionTest,
            	                   InsertActionTest);
            
            	Assert.AreEqual(originalCount, TotalCount());
            }
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.TransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel,System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
      <param name="scopeOption">TransactionScopeOption 값</param>
      <param name="isolationLevel">Transaction 격리수준</param>
      <param name="actionsToExecute">TransactionScope 안에서 실행할 Action(s).</param>
      <example>
        <code>
            	// 한 Tx안에서 3개의 Action 를 수행합니다.
            	With.TransactionScope(TransactionScopeOption.Required,
                                      System.Transactions.IsolationLevel.ReadCommited,
                                      FindAll_By_DetachedCriteria, 
                                      FindAll_By_Criterion, 
                                      FindAll_By_Example);
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.TransactionScope(System.Transactions.TransactionScopeOption,System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
      <param name="scopeOption">TransactionScopeOption 값</param>
      <param name="actionsToExecute">TransactionScope 안에서 실행할 Action(s).</param>
      <example>
        <code>
            	// 한 Tx안에서 3개의 Action 를 수행합니다.
            	With.TransactionScope(TransactionScopeOption.Required,
                                      System.Transactions.IsolationLevel.ReadCommited,
                                      FindAll_By_DetachedCriteria, 
                                      FindAll_By_Criterion, 
                                      FindAll_By_Example);
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.TransactionScope(System.Transactions.IsolationLevel,System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
      <param name="isolationLevel">Transaction 격리수준</param>
      <param name="actionsToExecute">TransactionScope 안에서 실행할 Action(s).</param>
      <example>
        <code>
            	// 한 Tx안에서 3개의 Action 를 수행합니다.
            	With.TransactionScope(TransactionScopeOption.Required,
                                      System.Transactions.IsolationLevel.ReadCommited,
                                      FindAll_By_DetachedCriteria, 
                                      FindAll_By_Criterion, 
                                      FindAll_By_Example);
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.TransactionScope(System.Action[])">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
      <param name="actionsToExecute">TransactionScope 안에서 실행할 Action(s).</param>
      <example>
        <code>
            	// 한 Tx안에서 3개의 Action 를 수행합니다.
            	With.TransactionScope(TransactionScopeOption.Required,
                                      System.Transactions.IsolationLevel.ReadCommited,
                                      FindAll_By_DetachedCriteria, 
                                      FindAll_By_Criterion, 
                                      FindAll_By_Example);
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoWith.TransactionScope(System.Action)">
      <summary>
            지정된 Action 들을 하나의 Transaction Scope로 묶어서 처리합니다.
            </summary>
      <param name="actionToExecute">실행할 Action</param>
      <example>
        <code>
            	// 한 Tx안에서 3개의 Action 를 수행합니다.
            	With.TransactionScope(TransactionScopeOption.Required,
                                      System.Transactions.IsolationLevel.ReadCommited,
                                      FindAll_By_DetachedCriteria, 
                                      FindAll_By_Criterion, 
                                      FindAll_By_Example);
            </code>
      </example>
    </member>
    <member name="T:NSoft.NFramework.Data.DataReaderTool">
      <summary>
        <see cref="T:System.Data.IDataReader" />의 확장 메소드입니다. (<see cref="!:AdoDataReader" /> 보다 여기 있는 확장 메소드를 사용하시기 바랍니다. AsValue{T} 형식으로요^^
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.GetFieldNames(System.Data.IDataReader)">
      <summary>
            IDataReader의 필드명 컬렉션을 가져옵니다.
            </summary>
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsValue(System.Data.IDataReader,System.String,System.Func{System.Object})">
      <summary>
            IDataReader의 컬럼명의 값을 가져옵니다. 없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <param name="reader">
      </param>
      <param name="columnName">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsValue(System.Data.IDataReader,System.Int32,System.Func{System.Object})">
      <summary>
            IDataReader의 컬럼명의 값을 가져옵니다. 없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <param name="reader">
      </param>
      <param name="index">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsValue``1(System.Data.IDataReader,System.String,System.Func{``0})">
      <summary>
            IDataReader의 컬럼명의 값을 가져옵니다. 없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="reader">
      </param>
      <param name="columnName">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsValue``1(System.Data.IDataReader,System.Int32,System.Func{``0})">
      <summary>
            IDataReader의 컬럼명의 값을 가져옵니다. 없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="reader">
      </param>
      <param name="index">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsValueNullable``1(System.Data.IDataReader,System.String,System.Func{System.Nullable{``0}})">
      <summary>
            IDataReader의 컬럼명의 값을 가져옵니다. 없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="reader">
      </param>
      <param name="columnName">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsValueNullable``1(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{``0}})">
      <summary>
            IDataReader의 컬럼명의 값을 가져옵니다. 없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="reader">
      </param>
      <param name="index">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsString(System.Data.IDataReader,System.String,System.Func{System.String})">
      <summary>
            IDataReader의 컬럼명의 값을 문자열로 반환합니다.없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <param name="reader">
      </param>
      <param name="columnName">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsString(System.Data.IDataReader,System.Int32,System.Func{System.String})">
      <summary>
            IDataReader의 컬럼명의 값을 문자열로 반환합니다.없으면 <paramref name="valueFactory" />의 반환값을 반환합니다.
            </summary>
      <param name="reader">
      </param>
      <param name="index">
      </param>
      <param name="valueFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsBool(System.Data.IDataReader,System.Int32,System.Func{System.Boolean})">
      <summary>
            Boolean 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(bool) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsBool(System.Data.IDataReader,System.String,System.Func{System.Boolean})">
      <summary>
            Boolean 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column Name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsBoolNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Boolean}})">
      <summary>
            Boolean 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsBoolNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Boolean}})">
      <summary>
            Boolean 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsByte(System.Data.IDataReader,System.Int32,System.Func{System.Byte})">
      <summary>
            System.Byte 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(byte) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsByte(System.Data.IDataReader,System.String,System.Func{System.Byte})">
      <summary>
            System.Byte 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(byte) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsByteNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Byte}})">
      <summary>
            System.Byte 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsByteNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Byte}})">
      <summary>
            System.Byte 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsBytes(System.Data.IDataReader,System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            이진 데이타를 읽어서 버퍼에 저장한다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnIndex">Column index</param>
      <param name="fieldOffset">offset of column data</param>
      <param name="buffer">buffer to store data.</param>
      <param name="bufferoffset">buffer offset</param>
      <param name="length">length to retrieve</param>
      <returns>length to be retrieved</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsBytes(System.Data.IDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            이진 데이타를 읽어서 버퍼에 저장한다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="fieldOffset">offset of column data</param>
      <param name="buffer">buffer to store data.</param>
      <param name="bufferoffset">buffer offset</param>
      <param name="length">length to retrieve</param>
      <returns>length to be retrieved</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsChar(System.Data.IDataReader,System.Int32,System.Func{System.Char})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsChar(System.Data.IDataReader,System.String,System.Func{System.Char})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsCharNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Char}})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsCharNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Char}})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsChars(System.Data.IDataReader,System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
            이진 데이타를 읽어서 버퍼에 저장한다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnIndex">Column index</param>
      <param name="fieldOffset">offset of column data</param>
      <param name="buffer">buffer to store data.</param>
      <param name="bufferoffset">buffer offset</param>
      <param name="length">length to retrieve</param>
      <returns>length to be retrieved</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsChars(System.Data.IDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
            이진 데이타를 읽어서 버퍼에 저장한다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="fieldOffset">offset of column data</param>
      <param name="buffer">buffer to store data.</param>
      <param name="bufferoffset">buffer offset</param>
      <param name="length">length to retrieve</param>
      <returns>length to be retrieved</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDateTime(System.Data.IDataReader,System.Int32,System.Func{System.DateTime})">
      <summary>
            DateTime 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDateTime(System.Data.IDataReader,System.String,System.Func{System.DateTime})">
      <summary>
            DateTime 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDateTimeNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.DateTime}})">
      <summary>
            DateTime 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDateTimeNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.DateTime}})">
      <summary>
            DateTime 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDecimal(System.Data.IDataReader,System.Int32,System.Func{System.Decimal})">
      <summary>
            Decimal 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDecimal(System.Data.IDataReader,System.String,System.Func{System.Decimal})">
      <summary>
            Decimal 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDecimalNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Decimal}})">
      <summary>
            Decimal 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDecimalNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Decimal}})">
      <summary>
            Decimal 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDouble(System.Data.IDataReader,System.Int32,System.Func{System.Double})">
      <summary>
            Double 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDouble(System.Data.IDataReader,System.String,System.Func{System.Double})">
      <summary>
            Double 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDoubleNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Double}})">
      <summary>
            Double 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsDoubleNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Double}})">
      <summary>
            Double 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsFloat(System.Data.IDataReader,System.Int32,System.Func{System.Single})">
      <summary>
            Double 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsFloat(System.Data.IDataReader,System.String,System.Func{System.Single})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, default(char) 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsFloatNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Single}})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">Column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsFloatNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Single}})">
      <summary>
            System.Char 형식으로 값을 읽는다.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">Column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>Column value, 값이 DbNull이면, null 값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsGuid(System.Data.IDataReader,System.Int32,System.Func{System.Guid})">
      <summary>
            Get Guid Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsGuid(System.Data.IDataReader,System.String,System.Func{System.Guid})">
      <summary>
            Get Guid Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsGuidNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Guid}})">
      <summary>
            Get Guid Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsGuidNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Guid}})">
      <summary>
            Get Guid Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt16(System.Data.IDataReader,System.Int32,System.Func{System.Int16})">
      <summary>
            Get Int16 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt16(System.Data.IDataReader,System.String,System.Func{System.Int16})">
      <summary>
            Get Int16 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt16Nullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Int16}})">
      <summary>
            Get Int16 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt16Nullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Int16}})">
      <summary>
            Get Int16 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt32(System.Data.IDataReader,System.Int32,System.Func{System.Int32})">
      <summary>
            Get Int32 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt32(System.Data.IDataReader,System.String,System.Func{System.Int32})">
      <summary>
            Get Int32 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt32Nullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Int32}})">
      <summary>
            Get Int32 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt32Nullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Int32}})">
      <summary>
            Get Int32 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt64(System.Data.IDataReader,System.Int32,System.Func{System.Int64})">
      <summary>
            Get Int64 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt64(System.Data.IDataReader,System.String,System.Func{System.Int64})">
      <summary>
            Get Int64 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return Guid.Empty</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt64Nullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.Int64}})">
      <summary>
            Get Int64 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsInt64Nullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.Int64}})">
      <summary>
            Get Int64 Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsTimeSpan(System.Data.IDataReader,System.Int32,System.Func{System.TimeSpan})">
      <summary>
            Get TimeSpan Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return TimeSpan.Zero</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsTimeSpan(System.Data.IDataReader,System.String,System.Func{System.TimeSpan})">
      <summary>
            Get TimeSpan Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return TimeSpan.Zero</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsTimeSpanNullable(System.Data.IDataReader,System.Int32,System.Func{System.Nullable{System.TimeSpan}})">
      <summary>
            Get TimeSpan Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="index">column index</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.AsTimeSpanNullable(System.Data.IDataReader,System.String,System.Func{System.Nullable{System.TimeSpan}})">
      <summary>
            Get TimeSpan Value
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <param name="valueFactory">기본값 설정 함수</param>
      <returns>if value is DBNull, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.IsDBNull(System.Data.IDataReader,System.String)">
      <summary>
            Return whether the specified field is set to null.
            </summary>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="columnName">column name</param>
      <returns>true if the specified field is set to null; otherwise, false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataReaderTool.ToString(System.Data.IDataReader,System.Boolean)">
      <summary>
            DataReader가 가진 모든 Record의 내용을 전부 보여준다. (내용을 다 보여준 후에는 더 이상 조작할 수 없다.
            </summary>
      <returns>
      </returns>
      <remarks>
            이 함수를 호출하면 더이상 IDataReader를 fetching 할 수 없다.<br />
            Unit Test 시나 Debuging시에만 사용해야 한다.
            </remarks>
      <param name="reader">IDataReader 인스턴스</param>
      <param name="showDetails">내부 내용을 모두 보여줄 것인가?</param>
    </member>
    <member name="T:NSoft.NFramework.Data.DbFunc">
      <summary>
            Database 관련 Helper class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.GetDatabaseNames">
      <summary>
            환경설정에 설정된 ConnectionStrings 섹션의 <see cref="T:System.Configuration.ConnectionStringSettings" /> 의 이름을 가져온다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.GetConnectionStringSettings">
      <summary>
            환경설정에 설정된 ConnectionStrings 섹션의 <see cref="T:System.Configuration.ConnectionStringSettings" /> 을 모두 가져온다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.LSet(System.String,System.Int32)">
      <summary>
            지정된 문자열의 값들을 왼쪽으로 맞추고, 지정된 길이만큼의 나머지 여백은 공백 로 채웁니다. 
            <see cref="M:System.String.PadRight(System.Int32,System.Char)" />와 같은 기능을 수행합니다.
            </summary>
      <example>
        <code>
            LSet("abc", 10); // =&gt; "abc_______"
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.RSet(System.String,System.Int32)">
      <summary>
            지정된 문자열의 값들을 오른쪽으로 맞추고, 지정된 길이만큼의 안쪽 여백은 공백 로 채웁니다. 
            <see cref="M:System.String.PadRight(System.Int32,System.Char)" />와 같은 기능을 수행합니다.
            </summary>
      <example>
        <code>
            LSet("abc", 10); // =&gt; "_______abc"
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.GetLanguageType(System.Data.DbType)">
      <summary>
        <see cref="T:System.Data.DbType" /> 을 .NET Language Type으로 매핑합니다.
            </summary>
      <param name="dbType">
      </param>
      <returns>닷넷 Language Type, 변환 정보가 없으면 typeof(object) 를 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.GetDbType(System.Type)">
      <summary>
            닷넷 Language <see cref="T:System.Type" />을 Database의 <see cref="T:System.Data.DbType" />으로 매핑한다.
            </summary>
      <param name="languageType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.IsStringType(System.Data.DbType)">
      <summary>
            지정된 <see cref="T:System.Data.DbType" />이 닷넷의 <see cref="T:System.String" /> 형식인지 검사한다.
            </summary>
      <param name="dbType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.CellToString(System.Data.DataRow,System.String)">
      <summary>
            지정된 레코드의 해당 컬럼의 값을 문자열로 반환한다. 값이 없을 때에는 빈 문자열을 반환한다.
            </summary>
      <param name="row">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.ConvertToDbTypedValue(System.Data.DbType,System.Object)">
      <summary>
            지정된 값을 지정된 <see cref="T:System.Data.DbType" />과 같은 형식으로 변환한다.
            </summary>
      <param name="dbType">원하는 <see cref="T:System.Data.DbType" /></param>
      <param name="value">변경할 값</param>
      <returns>지정된 <see cref="T:System.Data.DbType" />으로 변경된 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.IsNull(System.Object)">
      <summary>
            객체가 null 이거나 DBNull.Value이거나, INullable.IsNull 이면 true를 반환한다.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.Connection(System.String)">
      <summary>
            create and open connection ( <see cref="T:System.Data.IDbConnection" /> ) for a given named connection string,
            using provider connectionStringName to select the property type.
            </summary>
      <param name="connectionStringName">ConnectionString 설정 이름 (DB 이름)</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.Transaction(System.String,System.Data.IsolationLevel,System.Action{System.Data.IDbCommand})">
      <summary>
            지정된 함수를 Transaction하에서 실행한다.
            일반적인 DB 처리 로직을 Transaction 환경하에서 실행될 수 있도록 한다.
            </summary>
      <param name="connectionStringName">Database connection string name</param>
      <param name="isolationLevel">격리 수준</param>
      <param name="actionToExecute">실행할 Action</param>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.Transaction(System.String,System.Action{System.Data.IDbCommand})">
      <summary>
            지정된 함수를 Transaction하에서 실행한다.
            일반적인 DB 처리 로직을 Transaction 환경하에서 실행될 수 있도록 한다.
            </summary>
      <param name="connectionStringName">connection string name</param>
      <param name="actionToExecute">action to execute</param>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.Transaction``1(System.String,System.Func{System.Data.IDbCommand,``0})">
      <summary>
            지정된 함수를 Transaction하에서 실행하고, 결과를 반환한다.
            일반적인 DB 처리 로직을 Transaction 환경하에서 실행될 수 있도록 한다.
            </summary>
      <typeparam name="TResult">실행결과 값의 형식</typeparam>
      <param name="connectionStringName">connection string name</param>
      <param name="actionToExecute">실행할 Action</param>
      <returns>실행한 결과 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.ToXmlText(System.Data.DataTable,System.Data.XmlWriteMode)">
      <summary>
            DataTable 내용을 Xml Text로 변경한다.
            </summary>
      <param name="table">Instance of DataTable</param>
      <param name="writeMode">Xml Text 생성 모드</param>
      <returns>생성된 Xml 문자열</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.ToDataSet(System.String)">
      <summary>
            지정된 XML 문자열을 읽어, DataSet을 빌드한다.
            </summary>
      <param name="xmlText">Xml Text</param>
      <returns>Instance of DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DbFunc.ToDataTable(System.String)">
      <summary>
            지정된 XML 문자열을 읽어, DataTable을 빌드한다.
            </summary>
      <param name="xmlText">Xml Text</param>
      <returns>Instance of DataTable</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlCeTool">
      <summary>
            SqlCe Database 용 Helper Class
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.SqlCeTool.EngineTypeName">
      <summary>
            Fullname of SqlCe Database Engine Type.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SqlCeTool.CreateDatabaseFile(System.String)">
      <summary>
            SqlServerCe 용 Database 파일을 만듭니다.
            </summary>
      <param name="filename">SqlCe Database 파일의 전체 경로</param>
    </member>
    <member name="T:NSoft.NFramework.Data.SQLServerSetUpTool">
      <summary>
            SQL Server 용 DB 를 생성해주는 Helper class입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SQLServerSetUpTool.CreateDatabaseMedia(System.String)">
      <summary>
            create database media (file)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SQLServerSetUpTool.GetSqlServerDataDirectory">
      <summary>
            SQL 서버의 기본 Data Directory 얻기 (Registry에 정의되어 있음)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.SQLServerSetUpTool.GetSqlExpressDataDirectory">
      <summary>
            SQL 서버의 기본 Data Directory 얻기 (Registry에 정의되어 있음)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.SQLServerSetUpTool.GetSqlServerDataDirectory(System.String)">
      <summary>
            SQL 서버의 기본 Data Directory 얻기 (Registry에 정의되어 있음)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.WindsorInstallers.AdoWindsorInstaller">
      <summary>
            Ado 관련 Component 들을 등록합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AbstractNamedParameter">
      <summary>
            Represents Parameter for Command.Parameters or QueryString parameter or HQL parameter
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.INamedParameter">
      <summary>
            Database처리를 위한 Query문장에서의 Parameter 정보를 나타낸다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.INamedParameter.Name">
      <summary>
            Parameter name
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.INamedParameter.Value">
      <summary>
            Parameter value
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AbstractNamedParameter.#ctor(System.String,System.Object)">
      <summary>
            Initialize a new instance of NamedParameterBase with parameter name and value
             </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AbstractNamedParameter.Equals(NSoft.NFramework.Data.INamedParameter)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AbstractNamedParameter.ToString">
      <summary>
            현재 인스턴스의 내용을 표현하는 문자열을 반환합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AbstractNamedParameter.Name">
      <summary>
            Parameter name
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AbstractNamedParameter.Value">
      <summary>
            Parameter value
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoDataAdapter">
      <summary>
            상속이 불가능한 DataAdapter의 protected 메소드를 사용하기 위해, Delegate를 이용하여, 
            범위를 지정할 수 있는 Fill 메소드를 사용할 수 있도록 하였습니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoDataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>
            생성자
            </summary>
      <param name="adapter">래핑될 실제 <see cref="P:NSoft.NFramework.Data.AdoDataAdapter.DataAdapter" /> 인스턴스</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <paramref name="dataReader" />를 읽어서, <see cref="T:System.Data.DataTable" />을 빌드하여 <paramref name="dataSet" />에 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoDataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <paramref name="dataReader" />를 읽어서, <paramref name="dataTables" /> 에 결과 셋을 채웁니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoDataAdapter.Dispose">
      <summary>
            관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 응용 프로그램 정의 작업을 수행합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoDataAdapter.DataAdapter">
      <summary>
            실제 DbDataAdapter의 인스턴스
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoParameter">
      <summary>
            Represents named parameter used <see cref="T:System.Data.Common.DbCommand" /></summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NamedParameterBase">
      <summary>
            Represents Parameter for Command.Parameters or QueryString parameter or HQL parameter
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NamedParameterBase.#ctor(System.String,System.Object)">
      <summary>
            Initialize a new instance of NamedParameterBase with parameter name and value
             </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NamedParameterBase.Equals(NSoft.NFramework.Data.INamedParameter)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NamedParameterBase.ToString">
      <summary>
            현재 인스턴스의 내용을 표현하는 문자열을 반환합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NamedParameterBase.Name">
      <summary>
            Parameter name
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NamedParameterBase.Value">
      <summary>
            Parameter value
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.IAdoParameter">
      <summary>
            ADO.NET 의 <see cref="T:System.Data.IDbCommand" />의 Parameter 에 사용되는 Named parameter의 interface
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoParameter.ValueType">
      <summary>
             Parameter 값의 수형을 나타냅니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoParameter.SourceColumn">
      <summary>
            DataSet, DataTable에 매핑되어 Parameter 값을 반환하거나 로드하기위한 컬럼의 명 
            DbDataAdapter를 이용하여 Update/Insert/Delete 시에 DataTable column 명과 Parameter를 매핑시키기 위해 필요하다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoParameter.SourceVersion">
      <summary>
            DataRow의 버전을 표현합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoParameter.Size">
      <summary>
            Parameter Data Size
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.IAdoParameter.Direction">
      <summary>
            Parameter Direction (Input | Output | InputOutput | ReturnValue)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object,System.Data.DbType)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="dbType">parameter type</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Data.DbType)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="dbType">parameter type</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Data.DbType,System.String)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="dbType">parameter type</param>
      <param name="sourceColumn">source column</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="dbType">parameter type</param>
      <param name="sourceColumn">source column</param>
      <param name="sourceVersion">source version</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object,System.Data.DbType,System.Int32)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="dbType">parameter type</param>
      <param name="size">size of parameter</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="dbType">parameter type</param>
      <param name="direction">parameter direction</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="dbType">parameter type</param>
      <param name="size">size of parameter value</param>
      <param name="direction">parameter direction</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="dbType">parameter type</param>
      <param name="direction">parameter direction</param>
      <param name="sourceColumn">source column name</param>
      <param name="sourceVersion">source version</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.#ctor(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion)">
      <summary>
            constructor
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="dbType">parameter type</param>
      <param name="size">size of parameter value</param>
      <param name="direction">parameter direction</param>
      <param name="sourceColumn">source column name</param>
      <param name="sourceVersion">source version</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoParameter.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoParameter.ValueType">
      <summary>
             Parameter 값의 Database 수형을 나타냅니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoParameter.SourceColumn">
      <summary>
            DataSet, DataTable에 매핑되어 Parameter 값을 반환하거나 로드하기위한 컬럼의 명 
            DbDataAdapter를 이용하여 Update/Insert/Delete 시에 DataTable column 명과 Parameter를 매핑시키기 위해 필요하다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoParameter.SourceVersion">
      <summary>
            DataRow의 버전을 표현합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoParameter.Size">
      <summary>
            Parameter Data Size
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoParameter.Direction">
      <summary>
            Parameter Direction (Input, Output, InputOutput, ReturnValue)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoRepository">
      <summary>
            환경설정에서 지정된 IAdoRepository 구현 클래스를 IoC를 통해 Resolve 하여 이용하여 <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 메소드들을 제공한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            ADO.NET의 기본 Transaction을 시작한다. (TransactionScope와는 달리 DTC를 이용하지 않는다.)
            </summary>
      <param name="isolationLevel">Transaction 격리수준 (기본적으로 ReadCommitted)</param>
      <returns>Return a new instance of DbTransaction</returns>
      <example>
        <code>
            AdoRepository.BeginTransaction(IsolationLevel.ReadUncommitted);
            try
            {
            	DbCommand insertCommand = AdoRepository.GetSqlStringCommand(InsertString);
            	DbCommand deleteCommand = AdoRepository.GetSqlStringCommand(DeleteString);
            	DbCommand countCommand = AdoRepository.GetSqlStringCommand(CountString);
            
            	var count = Convert.ToInt32(AdoRepository.ExecuteScalar(countCommand));
            
            	AdoRepository.ExecuteNonQuery(insertCommand);
            	AdoRepository.ExecuteNonQuery(deleteCommand);
            
            	AdoRepository.Commit();
            
            	Assert.AreEqual(4, count);
            }
            catch (Exception ex)
            {
            	if (IsErrorEnabled)
            		log.ErrorException(ex);
            
            	AdoRepository.Rollback();
            
            	throw;
            }
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.BeginTransaction">
      <summary>
            ADO.NET의 기본 Transaction을 시작한다. 격리수준은 <see cref="F:System.Data.IsolationLevel.ReadCommitted" />이다. 
            (TransactionScope와는 달리 DTC를 이용하지 않는다.)
            </summary>
      <returns>Return a new instance of DbTransaction</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.Commit">
      <summary>
            현재 활성화된 Transaction이 있다면, Commit을 수행한다.
            </summary>
      <exception cref="T:System.InvalidOperationException">Current Thread Context에 활성화된 Transaction이 없을 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.Rollback">
      <summary>
            현재 활성화된 Transaction이 있다면, Rollback을 수행한다.
            </summary>
      <exception cref="T:System.InvalidOperationException">Current Thread Context에 활성화된 Transaction이 없을 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetDataAdapter">
      <summary>
            Create <see cref="T:System.Data.Common.DbDataAdapter" /></summary>
      <returns>Instance of DbDataAdapter</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetCommand(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리문을 CommendText로 가지는 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="query">simple query string or procedure name</param>
      <param name="parameters">파라미터 컬렉션</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetCommand(System.String,System.Boolean)">
      <summary>
            지정된 쿼리문을 CommendText로 가지는 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="query">simple query string</param>
      <param name="discoverParams">discover parameters</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetSqlStringCommand(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Get <see cref="T:System.Data.Common.DbCommand" /> which CommandText is query, build up parameters by parameters
            </summary>
      <param name="sqlString">simple query string</param>
      <param name="parameters">collection of parameter</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetProcedureCommand(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Stored Procedure를 실행할 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="spName">procedure name</param>
      <param name="parameters">collection of parameter</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetProcedureCommand(System.String,System.Boolean,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Stored Procedure를 실행할 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="spName">Procedure name</param>
      <param name="discoverParams">DbCommand 인자를 DB에서 확인할 것인지 여부</param>
      <param name="parameters">collection of parameter</param>
      <returns>instance of <see cref="T:System.Data.Common.DbCommand" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetProcedureCommandWithSourceColumn(System.String,System.String[])">
      <summary>
            DataSet 변경 정보를 DB에 한꺼번에 적용하기 위해 Insert, Update, Delete Command를 제공해야 하는데,
            이 때는 DataSet의 Source Column과 Command의 Parameter 이름을 매핑되어 있어야 한다.
            이를 위해 Stored Procudure용 Command의 Parameter Name을 sourceColumns 것으로 교체한다.
            </summary>
      <param name="spName">
      </param>
      <param name="sourceColumns">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetNamedQueryCommand(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            QueryProvider에서 제공하는 Query로 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="queryKey">[Section,] QueryName 형태의 쿼리 키</param>
      <param name="parameters">parameter collection</param>
      <returns>DbCommand instance</returns>
      <exception cref="T:System.InvalidOperationException">QueryProvider 속성이 null일때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.GetNamedQueryCommand(System.String,System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            QueryProvider에서 제공하는 Query로 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스를 생성합니다.
            </summary>
      <param name="section">Section Name</param>
      <param name="queryName">쿼리 명</param>
      <param name="parameters">parameter collection</param>
      <returns>DbCommand instance</returns>
      <exception cref="T:System.InvalidOperationException">QueryProvider 속성이 null일 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.LoadDataSet(System.Data.Common.DbDataAdapter,System.String,System.Data.DataSet,System.Int32,System.Int32)">
      <summary>
            지정된 DataAdapter를 통해 얻은 정보를 DataSet으로 빌드한다.
            </summary>
      <param name="da">DataAdapter</param>
      <param name="tableName">Table name</param>
      <param name="targetDataSet">저장할 Dataset</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSet(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSet(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="cmd">실행할 <see cref="T:System.Data.Common.DbCommand" /> instance.</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSet(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataSet을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSet(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataSet을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSetBySqlString(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="sqlString">simple query string to execute</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSetBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="sqlString">simple query string to execute</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSetByProcedure(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="spName">Procedure name to execute</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataSetByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 DataAdpater를 실행하여 DataSet을 빌드한다.
            </summary>
      <param name="spName">Procedure name to execute</param>
      <param name="parameters">collectio of parameters of Command</param>
      <returns>결과 셋이 담긴 DataSet</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTable(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="cmd">실행할 Select용 Command</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTable(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다)</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTable(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" /> 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="query">실행할 쿼림 문 또는 Procedure 명</param>
      <param name="parameters">parameter collection</param>
      <returns>결과 셋</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTableBySqlString(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 sql string 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="sqlString">실행할 Query 문</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTableBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 sql string 문을 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="sqlString">실행할 Query 문</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTableByProcedure(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Procedure를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="spName">실행할 Procedure 명</param>
      <param name="firstResult">첫번째 레코드의 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수 (0 이면 무시하고, 마지막 레코드까지 가져온다</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTableByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Procedure를 실행하여, DataTable을 빌드합니다.
            </summary>
      <param name="spName">실행할 Select Command</param>
      <param name="parameters">DbCommand의 Parameter 정보</param>
      <returns>instance of <see cref="T:System.Data.DataTable" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTableAsList(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
      <param name="cmd">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteDataTableAsList(System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            여러 ResultSet을 반환할 수 있으므로, DataTable의 컬렉션으로 반환합니다.
            </summary>
      <param name="cmd">
      </param>
      <param name="firstResult">
      </param>
      <param name="maxResults">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecutePagingDataTable(System.Data.Common.DbCommand,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command 를 Paging 정보에 근거해서 수행하고, 결과를 DataTable로 반환한다.
            </summary>
      <param name="cmd">
      </param>
      <param name="pageIndex">Page index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecutePagingDataTable(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="query" />를 Paging 정보에 근거해서 실행하고, 결과를 DataTable로 반환한다.
            NOTE: DISTINCT, TOP N 조회는 Paging에서 지원하지 않습니다.
            </summary>
      <param name="query">조회용 쿼리 문</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecutePagingDataTableBySqlString(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 조회용 쿼리문을 Paging 정보에 근거해서 수행하고, 결과를 DataTable로 반환한다.
            NOTE: 복잡한 쿼리 문장은 안될 가능성이 있습니다.
            NOTE: DISTINCT 조회는 지원하지 않습니다.
            </summary>
      <param name="selectSql">조회용 쿼리 문장 (NOTE: DISTINCT 조회는 지원하지 않습니다.)</param>
      <param name="pageIndex">Page index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">조회용 쿼리의 Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecutePagingDataTableByProcedure(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
        <paramref name="spName" /> Procedure를 실행하여, Paging 정보에 근거해서 Data를 추출하고, 결과를 DataTable로 반환한다. 
            </summary>
      <param name="spName">조회용 Procedure Name</param>
      <param name="pageIndex">Page Index (0부터 시작).  null이면 0으로 간주</param>
      <param name="pageSize">Page Size. 한 페이지에 표현할 요소 수 (보통 10개). null이면 10으로 간주</param>
      <param name="parameters">Procedure Parameter 정보</param>
      <returns>Paging된 DataTable</returns>
      <seealso cref="M:NSoft.NFramework.Data.AdoTool.GetCountingSqlString(System.String)" />
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteScalar(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, and return single scalar value
            </summary>
      <param name="cmd">Instance of DbCommand to execute</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteScalar(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute query, and return single scalar value
            </summary>
      <param name="query">query string ( simple sql string or Procedure name )</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteScalarBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute sql string, and return single scalar value
            </summary>
      <param name="sqlString">simple sql string</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteScalarByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute stored procedure, and return single scalar value
            </summary>
      <param name="spName">Procedure name</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>Scalar value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteNonQuery(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified DbCommand
            </summary>
      <param name="cmd">Instance of DbCommand to execute</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteNonQuery(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified query or procedure
            </summary>
      <param name="query">query string ( simple sql string or Procedure name )</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteNonQueryBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified sql string
            </summary>
      <param name="sqlString">simple sql string</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteNonQueryByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified stored procedure
            </summary>
      <param name="spName">Procedure name</param>
      <param name="parameters">Parameters for DbCommand</param>
      <returns>affected row count</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteReader(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified DbCommand, and return <see cref="T:System.Data.IDataReader" /></summary>
      <param name="cmd">DbCommand to execute</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteReader(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified query, and return  <see cref="T:System.Data.IDataReader" /></summary>
      <param name="query">query string ( sql string or procedure name )</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteReaderBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified sql string, and return  <see cref="T:System.Data.IDataReader" /></summary>
      <param name="sqlString">simple query string</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteReaderByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute specified stored procedure, and return <see cref="T:System.Data.IDataReader" /></summary>
      <param name="spName">procedure name</param>
      <param name="parameters">Command parameters</param>
      <returns>instance of <see cref="T:System.Data.IDataReader" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.Count(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="cmd">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.Count(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리 문을 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="query">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.CountBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리 문을 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="sqlString">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.CountByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 쿼리 문을 실행한 결과 셋의 레코드 갯수를 구한다.
            </summary>
      <param name="spName">실행할 Command 객체</param>
      <param name="parameters">Command 인자 정보</param>
      <returns>결과 셋의 레코드 수</returns>
      <remarks>
            실제 SQL의 count(*) 함수를 생성하는 것이 아니라, IDataReader를 이용하여 결과 셋을 가져와서 갯수만 센다.
            장점은 DataSet을 이용하여 Paging하는 것보다 빠르고, Count 용 Query문을 따로 만들 필요가 없다.
            단점은 SQL의 count(*) 함수보다는 당연히 느리다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.Exists(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 Command의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.Exists(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 쿼리 문의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExistsBySqlString(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 쿼리 문의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExistsByProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정한 Procedure의 실행 결과 셋이 존재하는지 검사한다 (결과 셋의 레코드가 하나 이상이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             DbCommand를 실행해 얻은 DataReader를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="nameMapper">컬럼명과 속성명 Mapper</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">Procedure 인자</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
             DbCommand를 실행해 얻은 DataReader를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="nameMapper">컬럼명과 속성명 Mapper</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="parameters">Procedure 인자</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMap,System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type by mapping DataReader Column Value to Instance Property Value
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="nameMaps">Key = ColumnName of DataReader, Value = Property Name of Specifieid Type</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Command parameters</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type by mapping DataReader Column Value to Instance Property Value
            </summary>
      <typeparam name="T">Type of Persistent object</typeparam>
      <param name="nameMaps">Key = ColumnName of DataReader, Value = Property Name of Specifieid Type</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Command parameters</param>
      <returns>Collection of Persistet object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Execute DbCommand, Build instance of specified type from IDataReader using Persister
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
      <param name="persister">Persister from IDataReader</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Collection of Persistent Object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            DbCommand를 실행해 얻은 DataReader를 Converter를 통해 지정된 형식의 인스턴스를 만든다.
            </summary>
      <typeparam name="T">Type of persistent object</typeparam>
      <param name="mapFunc">IDataReader의 한 레코드인 IDataRecord 정보를 가지고, Persistent Object를 만들 Converter</param>
      <param name="cmd">Instance of DbCommand to executed</param>
      <param name="parameters">Parameters for DbCommand to execute</param>
      <returns>Collection of Persistent Object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMapper,System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="nameMapper">컬럼명:속성명의 매핑정보를 가진 Mapper</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMapper,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="nameMapper">컬럼명:속성명의 매핑정보를 가진 Mapper</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMap,System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="nameMaps">컬럼명:속성명의 매핑정보</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Mappers.INameMap,System.Action{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="nameMaps">컬럼명:속성명의 매핑정보</param>
      <param name="additionalMapping">추가적인 매핑 함수</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(NSoft.NFramework.Data.Persisters.IReaderPersister{``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="persister">IDataReader로부터 Persistent Object를 빌드하는 Persister</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteInstance``1(System.Func{System.Data.IDataReader,``0},System.Data.Common.DbCommand,System.Int32,System.Int32,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 실행하여, 결과 셋을 Paging하여, 지정된 Page에 해당하는 정보만 Persistent Object로 빌드하여 반환한다.
            </summary>
      <typeparam name="T">Persistent Object의 수형</typeparam>
      <param name="mapFunc">IDataReader로부터 Persistent Object를 빌드하는 Mapping function</param>
      <param name="cmd">실행할 DbCommand</param>
      <param name="pageIndex">결과셋의 Page Index (0부터 시작)</param>
      <param name="pageSize">결과셋 Paging 시의 Page Size</param>
      <param name="parameters">DbCommand 실행시의 Parameter 정보</param>
      <returns>Paging된 Persistent Object의 List</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteCommand(System.Data.Common.DbCommand,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            지정된 Command를 수행하고, RETURN_VALUE를 반환합니다.
            </summary>
      <param name="cmd">DbCommand 인스턴스</param>
      <param name="parameters">인자</param>
      <returns>Procedure인 경우 return value를 반환한다. 반환값이 없으면 0을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteProcedure(System.String,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            Stored Procedure를 실행하고, Parameter의 Direction이 INPUT이 아닌 Parameter들을 반환한다. (InputOutput, Output, ReturnValue)
            </summary>
      <param name="spName">실행할 Procedure 이름</param>
      <param name="parameters">Collection of parameter for DbCommand</param>
      <returns>INPUT을 제외한 Oupput, InputOutput, ReturnValue에 해당하는 Parameter 정보</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteEntity``1(System.Data.Common.DbCommand,``0,NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 Entity의 속성 값을 이용하여 Command의 Parameter 값을 설정하고, 실행시킨다.
            일반적으로 Save / Update시에 활용하면 좋다.
            </summary>
      <typeparam name="T">Persistent object 수형</typeparam>
      <param name="cmd">수행할 Command 객체</param>
      <param name="entity">처리할 Persistent object</param>
      <param name="nameMaps">ParameterName of Procedure = Property Name of Persistent object 매핑 정보</param>
      <returns>Command 의 RETURN VALUE</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteEntity``1(System.String,``0,NSoft.NFramework.Data.Mappers.INameMap)">
      <summary>
            지정된 Entity의 속성 값을 이용하여 Procedure의 Parameter 값을 설정하고, 실행시킨다.
            일반적으로 Save / Update시에 활용하면 좋다.
            </summary>
      <typeparam name="T">Persistent object 수형</typeparam>
      <param name="spName">수행할 Procedure 명</param>
      <param name="entity">Persistent object</param>
      <param name="nameMaps">ParameterName of Procedure = Property Name of Persistent object</param>
      <returns>Procedure의 RETURN VALUE</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteEntity``1(System.Data.Common.DbCommand,``0,NSoft.NFramework.Data.Mappers.INameMapper)">
      <summary>
            지정된 Procedure를 수행한다. 인자로 entity의 속성값을 이용한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="cmd">실행할 DbCommand</param>
      <param name="entity">실행할 Entity</param>
      <param name="nameMapper">Name Mapping Class</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepository.ExecuteEntity``1(System.String,``0,NSoft.NFramework.Data.Mappers.INameMapper)">
      <summary>
            지정된 Procedure를 수행한다. 인자로 entity의 속성값을 이용한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="spName">실행할 Procedure Name</param>
      <param name="entity">실행할 Entity</param>
      <param name="nameMapper">Name Mapping Class</param>
      <returns>Command 인자 중에 ParameterDirection이 ReturnValue인 인자의 값</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepository.Db">
      <summary>
            Microsoft Data Acess Application Block의 Database
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepository.DbName">
      <summary>
            Database ConnectionString name
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepository.QueryProvider">
      <summary>
            query 문장을 name-value 형식으로 제공하는 provider입니다. IoC를 이용하여 제공합니다. IoC에서 제공하지 않을 시에는 null 값을 가집니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepository.Current">
      <summary>
            현재 스레드 컨텍스트에서 사용하는 IAdoRepository 인스턴스를 말한다. 실질적으로는 Singleton이므로, 그냥 기본 인스턴스를 제공한다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepository.ActiveTransaction">
      <summary>
            Current Thread Context에서 활성화된 Transaction. (없다면 null을 반환한다.)
            </summary>
      <seealso cref="P:NSoft.NFramework.Data.AdoRepository.IsActiveTransaction" />
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepository.IsActiveTransaction">
      <summary>
            Is exist active transaction in Current Thread Context.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoRepositoryFactory">
      <summary>
            Factory for <see cref="T:NSoft.NFramework.Data.IAdoRepository" /></summary>
    </member>
    <member name="T:NSoft.NFramework.Data.IAdoRepositoryFactory">
      <summary>
            Factory interface for IAdoRepository
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.IAdoRepositoryFactory.CreateRepository(System.String)">
      <summary>
            Create AdoRepository using a given database source.
            </summary>
      <param name="dbName">database name used by Repository that defined in connectionStrings section.</param>
      <returns>New instance of implemented class from <see cref="T:NSoft.NFramework.Data.IAdoRepository" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryFactory.CreateRepository(System.String)">
      <summary>
            Create Repository for ADO.NET using specified dbName
            </summary>
      <param name="dbName">database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryFactory.ClearRepositoryCache">
      <summary>
            Repository Cache를 제거합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoRepositoryFactory.Instance">
      <summary>
             Singleton instance.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoRepositoryImpl">
      <summary>
        <see cref="T:NSoft.NFramework.Data.IAdoRepository" />의 기본 Implementor
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImpl.#ctor">
      <summary>
             Initialize AdoRepositoryImplBase with default database name that defined in App/Web.config DAAB configuration section
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoRepositoryImpl.#ctor(System.String)">
      <summary>
            Initialize AdoRepositoryImplBase with database name.
            </summary>
      <param name="dbName">database name</param>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoResultRow">
      <summary>
        <see cref="T:NSoft.NFramework.Data.AdoResultSet" />의 Row를 표현합니다. (필드명-필드값) 매핑 정보를 가집니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoResultRow.#ctor(System.Data.IDataReader,System.Collections.Generic.IList{System.String})">
      <summary>
            생성자
            </summary>
      <param name="reader">
      </param>
      <param name="fieldNames">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoResultRow.FieldNames">
      <summary>
        <see cref="T:NSoft.NFramework.Data.AdoResultSet" />의 필드명 (컬럼명)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AdoResultSet">
      <summary>
        <see cref="T:System.Data.IDataReader" />로부터 정보를 받아두는 저장소 역할을 하는 클래스입니다. 
            IDataReader 정보를 병렬 방식으로 엔티티로 변환하기 위해서, 임시 버퍼 저장소로 쓰입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoResultSet.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoResultSet.#ctor(System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="reader">읽어들일 Reader</param>
      <param name="firstResult">첫번째 레코드의 인덱스</param>
      <param name="maxResults">최대 레코드 인덱스</param>
    </member>
    <member name="M:NSoft.NFramework.Data.AdoResultSet.GetMappedObjects(System.Type)">
      <summary>
            AdoResultSet의 Value인 <see cref="T:NSoft.NFramework.Data.AdoResultRow" />의 정보를 바탕으로 <paramref name="targetType" />로 매핑합니다.
            </summary>
      <param name="targetType">매핑할 수형</param>
      <returns>AdoResultRow의 값으로 매핑된 <see cref="!:targetType" /> 수형의 인스턴스의 컬렉션.</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.AdoResultSet.FieldNames">
      <summary>
            필드(컬럼) 명들
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.AnsiString">
      <summary>
        <see cref="F:System.Data.DbType.AnsiString" />을 표현합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.DatabaseKind">
      <summary>
            Database 종류를 나타냅니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.DatabaseKind.SqlServer">
      <summary>
            SQL Server
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.DatabaseKind.SqlCE">
      <summary>
            Sql CE
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.DatabaseKind.MySql">
      <summary>
            MySql
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.DatabaseKind.PostgreSql">
      <summary>
            PostgreSql
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.DatabaseKind.Oracle">
      <summary>
            Oracle
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.DatabaseKind.SQLite">
      <summary>
            SQLite
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.DataObjectBase">
      <summary>
            Data 관려 Value Object 를 표현하는 가장 기본적인 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.IDataObject">
      <summary>
            Data 관련 Value Object 의 기본 Interface
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectBase.#ctor">
      <summary>
            default constructor
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectBase.#ctor(NSoft.NFramework.Data.IDataObject)">
      <summary>
            copy constructor
            </summary>
      <param name="src">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectBase.Equals(NSoft.NFramework.Data.IDataObject)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectBase.ToString(System.Boolean)">
      <summary>
            현재 인스턴스의 상세 내용을 문자열로 나타낸다.
            </summary>
      <param name="showDetails">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectTool.MapDataObject``1(NSoft.NFramework.Data.IDataObject,``0,System.Action{NSoft.NFramework.Data.IDataObject,``0})">
      <summary>
            TTarget 형식의 인스턴스를 생성하고, 현재 인스턴스의 속성 정보로 설정하여 반환한다.
            </summary>
      <typeparam name="TTarget">복사될 인스턴스의 수형</typeparam>
      <param name="source">원본 객체</param>
      <param name="target">대상 객체</param>
      <param name="additionalMapping">추가 매핑 작업</param>
      <returns>
      </returns>
      <seealso cref="T:NSoft.NFramework.Reflections.ObjectMapper" />
      <seealso cref="T:NSoft.NFramework.Data.AdoTool" />
      <seealso cref="M:NSoft.NFramework.Reflections.ObjectMapper.MapProperty``1(System.Object,System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])" />
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectTool.MapDataObject``1(NSoft.NFramework.Data.IDataObject,System.Action{NSoft.NFramework.Data.IDataObject,``0})">
      <summary>
            TTarget 형식의 인스턴스를 생성하고, 현재 인스턴스의 속성 정보로 설정하여 반환한다.
            </summary>
      <typeparam name="TTarget">복사될 인스턴스의 수형</typeparam>
      <param name="source">원본 객체</param>
      <param name="additionalMapping">추가 매핑 작업</param>
      <returns>
      </returns>
      <seealso cref="T:NSoft.NFramework.Reflections.ObjectMapper" />
      <seealso cref="T:NSoft.NFramework.Data.AdoTool" />
      <seealso cref="M:NSoft.NFramework.Reflections.ObjectMapper.MapProperty``1(System.Object,System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])" />
    </member>
    <member name="M:NSoft.NFramework.Data.DataObjectTool.MapDataObject``1(NSoft.NFramework.Data.IDataObject,System.Func{``0},System.Action{NSoft.NFramework.Data.IDataObject,``0})">
      <summary>
            TTarget 형식의 인스턴스를 생성하고, 현재 인스턴스의 속성 정보로 설정하여 반환한다.
            </summary>
      <typeparam name="TTarget">복사될 인스턴스의 수형</typeparam>
      <param name="source">원본 객체</param>
      <param name="resultFactory">복사될 인스턴스를 생성해주는 함수</param>
      <param name="additionalMapping">추가 매핑 작업</param>
      <returns>
      </returns>
      <seealso cref="T:NSoft.NFramework.Reflections.ObjectMapper" />
      <seealso cref="T:NSoft.NFramework.Data.AdoTool" />
      <seealso cref="M:NSoft.NFramework.Reflections.ObjectMapper.MapProperty``1(System.Object,System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])" />
    </member>
    <member name="T:NSoft.NFramework.Data.PagingDataTable">
      <summary>
        <see cref="T:System.Data.DataTable" />을 래핑하여, 전체 정보 중, 특정 Paging에 해당하는 정보만을 표현하는 DataTable입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.PagingDataTable.#ctor(System.Data.DataTable,System.Int32,System.Int32,System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="table">DataTable 인스턴스</param>
      <param name="pageIndex">Page Index (0부터 시작)</param>
      <param name="pageSize">Page Size (보통 10)</param>
      <param name="totalItemCount">실제 DB에 있는 전체 Item의 수</param>
    </member>
    <member name="M:NSoft.NFramework.Data.PagingDataTable.op_Explicit(NSoft.NFramework.Data.PagingDataTable)~System.Data.DataTable">
      <summary>
            PagingDataTable을 DataTable로 변환하는 명시적 변환자
            </summary>
      <param name="pagingDataTable">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.PagingDataTable.Finalize">
      <summary>
            소멸자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.PagingDataTable.Dispose">
      <summary>
            리소스 해제
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.PagingDataTable.Disposable(System.Boolean)">
      <summary>
            리소스 해제
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.PagingDataTable.Table">
      <summary>
            실제 Data를 가진 DataTable 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.PagingDataTable.PageIndex">
      <summary>
            현재 Page 번호 (0 부터 시작)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.PagingDataTable.PageSize">
      <summary>
            Page 당 Item (레코드) 의 수 (예: 한 페이지에 10개의 Item이면 PageSize는 10이다.)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.PagingDataTable.TotalPageCount">
      <summary>
            전체 Page 수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.PagingDataTable.TotalItemCount">
      <summary>
            전체 Item (레코드)의 갯수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.PagingDataTable.IsDisposed">
      <summary>
            리소스 해제 여부
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.SqlSR">
      <summary>
            SQL 문장에서 사용되는 예약어를 제공합니다.
            </summary>
    </member>
  </members>
</doc>