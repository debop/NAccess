<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NSoft.NFramework.JobScheduler</name>
  </assembly>
  <members>
    <member name="T:NSoft.NFramework.JobScheduler.JobListeners.AbstractJobListener">
      <summary>
            Job 실행 경과를 알아볼 수 있는 Listener의 추상화 클래스입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobListeners.AbstractJobListener.JobToBeExecuted(Quartz.JobExecutionContext)">
      <summary>
            작업 실행 시작 전에 호출됩니다.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobListeners.AbstractJobListener.JobExecutionVetoed(Quartz.JobExecutionContext)">
      <summary>
            작업이 취소되었을 때 호출됩니다.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobListeners.AbstractJobListener.JobWasExecuted(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
      <summary>
            작업이 완료(성공이던 실패던)되었을 때, 호출됩니다.
            </summary>
      <param name="context">
      </param>
      <param name="jobException">
      </param>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.JobListeners.AbstractJobListener.Name">
      <summary>
            JobListener 이름
            </summary>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.JobListeners.LoggingJobListener">
      <summary>
            단순하게 Job 실행과 관련된 기록을 Logging을 수행하는 Listener 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobListeners.LoggingJobListener.JobToBeExecuted(Quartz.JobExecutionContext)">
      <summary>
            작업 실행 시작 전에 호출됩니다.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobListeners.LoggingJobListener.JobExecutionVetoed(Quartz.JobExecutionContext)">
      <summary>
            작업이 취소되었을 때 호출됩니다.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobListeners.LoggingJobListener.JobWasExecuted(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
      <summary>
            작업이 완료(성공이던 실패던)되었을 때, 호출됩니다.
            </summary>
      <param name="context">
      </param>
      <param name="jobException">
      </param>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob">
      <summary>
            서비스 작업의 최상위 추상화 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob">
      <summary>
            Quartz 작업 관리자가 수행할 Background Service 작업을 나타내는 기본 Interface입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.Name">
      <summary>
            Job Name
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.Group">
      <summary>
            Job 그룹
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.Enabled">
      <summary>
            실행 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.MaxRetryCount">
      <summary>
            실패 시 최대 수행 횟수 (주기 작업이 실패했을 경우 바로 다시 재실행하는 횟수를 말한다. 0이면 다음 주기에 실행한다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.RetryInterval">
      <summary>
            재시도 간격 (msec)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.Trigger">
      <summary>
            작업 주기를 설정한 Trigger
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.IServiceJob.StateMap">
      <summary>
            Job 인스턴스의 상태 정보 (처음 Job 실행 시의 초기값만을 설정할 수 있습니다. 내부적으로 <see cref="P:Quartz.JobDetail.JobDataMap" />에 값이 설정됩니다)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.CancellationTokenSource">
      <summary>
            작업 취소 시 <see cref="T:System.Threading.CancellationToken" />에 신호를 보냅니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.Execute(Quartz.JobExecutionContext)">
      <summary>
            스케쥴러에 의해 주기적으로 호출되는 작업의 본체
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.Interrupt">
      <summary>
            작업이 취소되었을 시에 호출되는 메소드입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.DoExecute(Quartz.JobExecutionContext,System.Threading.CancellationToken)">
      <summary>
            실제 작업을 정의합니다.
            </summary>
      <param name="context">Quartz <see cref="T:Quartz.JobExecutionContext" /></param>
      <param name="token">작업 중 작업 취소를 할 수 있도록 하는 Token</param>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.Enabled">
      <summary>
            실행 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.MaxRetryCount">
      <summary>
            실패 시 최대 수행 횟수 (주기 작업이 실패했을 경우 바로 다시 재실행하는 횟수를 말한다. 0이면 다음 주기에 실행한다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.RetryInterval">
      <summary>
            재시도 간격 (msec)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.Trigger">
      <summary>
            작업 주기를 설정한 Trigger
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Jobs.AbstractServiceJob.StateMap">
      <summary>
            Job 인스턴스의 상태 정보 (처음 Job 실행 시의 초기값만을 설정할 수 있습니다. 내부적으로 <see cref="P:Quartz.JobDetail.JobDataMap" />에 값이 설정됩니다)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Jobs.DummyServiceJob">
      <summary>
            테스트용 서비스 작업입니다. 작업 내용은 로그 쓰고, 작업을 흉내내기 위한 작업 시간 지연을 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Jobs.DummyServiceJob.DoExecute(Quartz.JobExecutionContext,System.Threading.CancellationToken)">
      <summary>
            실제 작업을 정의합니다.
            </summary>
      <param name="context">Quartz <see cref="T:Quartz.JobExecutionContext" /></param>
      <param name="token">작업중 중단를 할 수 있도록 하는 Token</param>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager">
      <summary>
            Quartz 작업 관리자를 이용한 Job Manager입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Managers.IServiceJobManager">
      <summary>
            서비스 작업 (<see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" />)을 IoC를 통해 얻은 후, Quartz 작업 스케쥴러에게 작업을 수행하도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.IServiceJobManager.Start">
      <summary>
            서비스 작업 관리자를 시작합니다. 모든 서비스 작업에 대한 작업을 스케쥴에 맞게 수행되도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.IServiceJobManager.Shutdown">
      <summary>
            서비스 작업들을 모두 중단하도록 합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.IServiceJobManager.IsStarted">
      <summary>
            작업 관리 시작 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.IServiceJobManager.ServiceJobs">
      <summary>
            관리할 서비스 작업 (<see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" />)의 인스턴스들
            </summary>
    </member>
    <member name="F:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager._serviceJobs">
      <summary>
            Service Job의 리스트
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            생성자
            </summary>
      <param name="props">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.Start">
      <summary>
            서비스 작업 관리자를 시작합니다. 모든 서비스 작업에 대한 작업을 스케쥴에 맞게 수행되도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.Shutdown">
      <summary>
            서비스 작업들을 모두 중단하도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.Dispose">
      <summary>
            관리되지 않는 리소스를 해제합니다. Quartz Scheduler를 Shutdown시킵니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.Dispose(System.Boolean)">
      <summary>
            JobScheduler를 멈추고, 리소스를 해제합니다.
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.Factory">
      <summary>
            Factory of Scheduler
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.Scheduler">
      <summary>
            Quartz Job Scheduler
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.IsStarted">
      <summary>
            작업 관리 시작 여부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.ServiceJobs">
      <summary>
            관리할 서비스 작업 (<see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" />)의 인스턴스들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.JobScheduler.Managers.AbstractServiceJobManager.IsDisposed">
      <summary>
            리소스 해제 여부
            </summary>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer">
      <summary>
             Quartz 관련 Components (Job, Trigger) 들을 IoC Resolve 하여 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveJob(System.String)">
      <summary>
            지정된 Component Id를 가진 <see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" /> 컴포넌트를 Resolve합니다.
            </summary>
      <param name="componentId">Service Job 의 Id</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.TryResolveJob(System.String,NSoft.NFramework.JobScheduler.Jobs.IServiceJob@)">
      <summary>
            지정된 Component Id를 가진 <see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" /> 컴포넌트를 Resolve합니다.
            </summary>
      <param name="componentId">
      </param>
      <param name="serviceJob">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveAllServiceJob">
      <summary>
            IoC 환경설정에 설정된 모든 <see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" /> Component를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveTrigger(System.String)">
      <summary>
            지정된 Component Id를 가진 <see cref="T:Quartz.Trigger" />  컴포넌트를 Resolve합니다.
            </summary>
      <param name="componentId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveTrigger(System.Type)">
      <summary>
        <paramref name="triggerType" />의 <see cref="T:Quartz.Trigger" /> 컴포넌트를 Resolve 합니다.
            </summary>
      <param name="triggerType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.TryResolveTrigger(System.String,Quartz.Trigger@)">
      <summary>
            지정된 Component Id를 가진 <see cref="T:Quartz.Trigger" />  컴포넌트를 Resolve합니다.
            </summary>
      <param name="componentId">
      </param>
      <param name="trigger">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.TryResolveTrigger(System.Type,Quartz.Trigger@)">
      <summary>
        <paramref name="triggerType" />의 <see cref="T:Quartz.Trigger" /> 컴포넌트를 Resolve 합니다.
            </summary>
      <param name="triggerType">
      </param>
      <param name="trigger">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveAllSimpleTrigger">
      <summary>
            IoC 환경설정에 정의된 <see cref="T:Quartz.SimpleTrigger" /> 의 모든 컴포넌트를 Resolve합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveAllCronTrigger">
      <summary>
            IoC 환경설정에 정의된 <see cref="T:Quartz.CronTrigger" /> 의 모든 컴포넌트를 Resolve합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.ServiceJobContainer.ResolveAllTrigger">
      <summary>
            IoC 환경설정에 정의된 <see cref="T:Quartz.Trigger" />의 모든 컴포넌트를 Resolve합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.Managers.StdServiceJobManager">
      <summary>
            표준 서비스 작업 관리자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.StdServiceJobManager.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.Managers.StdServiceJobManager.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            생성자
            </summary>
      <param name="props">속성 정보</param>
    </member>
    <member name="T:NSoft.NFramework.JobScheduler.JobTool">
      <summary>
            Job 관련 Utility 메소드를 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.GetJobData(Quartz.JobExecutionContext,System.Object)">
      <summary>
            Job 상태정보를 담은 <see cref="T:Quartz.JobDataMap" />에서 해당 키의 값을 반환합니다. 없으면, null을 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.GetJobData(NSoft.NFramework.JobScheduler.Jobs.IServiceJob,System.Object)">
      <summary>
            Job 상태정보를 담은 <see cref="T:Quartz.JobDataMap" />에서 해당 키의 값을 반환합니다. 없으면, null을 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.GetJobData(Quartz.JobDetail,System.Object)">
      <summary>
            Job 상태정보를 담은 <see cref="T:Quartz.JobDataMap" />에서 해당 키의 값을 반환합니다. 없으면, null을 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.GetJobData(Quartz.JobDataMap,System.Object)">
      <summary>
            Job 상태정보를 담은 <see cref="T:Quartz.JobDataMap" />에서 해당 키의 값을 반환합니다. 없으면, null을 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.SetJobData(Quartz.JobDetail,System.Object,System.Object)">
      <summary>
             Job 상태정보를 담은 <see cref="T:Quartz.JobDataMap" />에서 해당 키에 값을 설정합니다.
            </summary>
      <param name="serviceJob">
      </param>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.SetJobData(Quartz.JobDataMap,System.Object,System.Object)">
      <summary>
            Job 상태정보를 담은 <see cref="T:Quartz.JobDataMap" />에서 해당 키에 값을 설정합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.SetJobData(Quartz.JobDetail,System.Collections.IDictionary)">
      <summary>
            특정 Job의 상태 정보를 설정합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.SetJobData(Quartz.JobDataMap,System.Collections.IDictionary)">
      <summary>
            특정 Job의 상태 정보를 설정합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.JobScheduler.JobTool.ScheduleServiceJob(Quartz.IScheduler,NSoft.NFramework.JobScheduler.Jobs.IServiceJob[])">
      <summary>
            Scheduler에 <see cref="T:NSoft.NFramework.JobScheduler.Jobs.IServiceJob" />들을 스케쥴링합니다.
            </summary>
      <param name="scheduler">
      </param>
      <param name="jobs">
      </param>
    </member>
  </members>
</doc>