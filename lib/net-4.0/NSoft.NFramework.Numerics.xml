<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NSoft.NFramework.Numerics</name>
  </assembly>
  <members>
    <member name="T:NSoft.NFramework.Numerics.Complex">
      <summary>
            복소수를 표현하는 클래스
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.ComplexStringExpression">
      <summary>
            Complex string reqular expression pattern
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.ComplexParser">
      <summary>
            Complex Reqular expression 
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.Zero">
      <summary>
            Zero complex number
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.One">
      <summary>
            Unit of Real part
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.I">
      <summary>
            Unit of Imaginary part
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.MaxValue">
      <summary>
            MaxValue
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Complex.MinValue">
      <summary>
            MinValue
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.CreateComplex(System.Double,System.Double)">
      <summary>
            Create new instance of Complex
            </summary>
      <param name="re">
      </param>
      <param name="im">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.FromModulusAndArgument(System.Double,System.Double)">
      <summary>
            복소수의 길이와 각도를 가지고 Complex로 변환한다.
            </summary>
      <param name="modulus">
      </param>
      <param name="argument">라디안 단위의 각도</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Nomalize(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Normalize
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Add(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Add
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Add(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Add
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Add(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Add
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Subtract(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Subtract
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Subtract(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Subtract
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Subtract(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Subtract
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Multiply(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Multiply
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Multiply(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Multiply
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Multiply(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Multiply
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Divide(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Divide
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Divide(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Divide
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Divide(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Divide
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Negative(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Negate
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.ApproximateEquals(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Approximate Equal with two complex
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <param name="epsilon">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Parse(System.String)">
      <summary>
            Parse string and build a new instance of Complex 
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.TryParse(System.String,NSoft.NFramework.Numerics.Complex@)">
      <summary>
            Try Parse the specified string to build a new instance of complex
            </summary>
      <param name="s">
      </param>
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Sin(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Sin
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Cos(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Cosine
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Tan(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Tan
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Sinh(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Sinh
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Cosh(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Cosh
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Tanh(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Tanh
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Sqrt(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Sqrt
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Log(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Log
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Exp(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Exponential
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Pow(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            자승
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Abs(NSoft.NFramework.Numerics.Complex)">
      <summary>
            절대값
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>
            Constructor
            </summary>
      <param name="re">real value</param>
      <param name="im">imaginary value</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.#ctor(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Copy constructor
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Implicit(System.Double)~NSoft.NFramework.Numerics.Complex">
      <summary>
            casting operator to Complex type
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Implicit(System.Single)~NSoft.NFramework.Numerics.Complex">
      <summary>
            casting operator to Complex
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Implicit(System.Decimal)~NSoft.NFramework.Numerics.Complex">
      <summary>
            casting operator to Complex
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Implicit(System.Int64)~NSoft.NFramework.Numerics.Complex">
      <summary>
            casting operator to Complex
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Implicit(System.Int32)~NSoft.NFramework.Numerics.Complex">
      <summary>
            casting operator to Complex
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Implicit(NSoft.NFramework.Numerics.Complex)~System.Double">
      <summary>
            casting operator to double
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Equality(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Equal operator
            </summary>
      <param name="lhs">
      </param>
      <param name="rhs">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Inequality(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Not equal operator
            </summary>
      <param name="lhs">
      </param>
      <param name="rhs">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_UnaryNegation(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Negate operator
            </summary>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Addition(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Addition operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Addition(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Addition operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Addition(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Addition operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Subtraction(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Subtraction operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Subtraction(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Subtraction operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Subtraction(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Subtraction operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Multiply(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Multiply operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Multiply(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Multiply operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Multiply(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Multiply operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Division(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            divide operation
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Division(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            divide operation
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.op_Division(System.Double,NSoft.NFramework.Numerics.Complex)">
      <summary>
            divide operation
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.GetModulus">
      <summary>
            절대값 (복소수 좌표상의 길이)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.GetModulusSquared">
      <summary>
            절대값의 제곱
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.GetArgument">
      <summary>
            복소수의 계수 (복소수 좌표상의 각도) : 라디안 단위
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.GetConjugate">
      <summary>
            켤레 복소수 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Normailize">
      <summary>
            Normalize
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.GetHashCode">
      <summary>
            Get hash code
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Equals(NSoft.NFramework.Numerics.Complex)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Equals(System.Object)">
      <summary>
            객체가 같은지 검사
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.ToString">
      <summary>
            현재 객체를 문자열로 표현
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.CompareTo(NSoft.NFramework.Numerics.Complex)">
      <summary>
            현재 개체를 동일한 형식의 다른 개체와 비교합니다.
            </summary>
      <returns>
            비교되는 개체의 상대 순서를 나타내는 부호 있는 32비트 정수입니다. 반환 값에는 다음과 같은 의미가 있습니다. 값 의미 0보다 작음 이 개체는 <paramref name="other" /> 매개 변수보다 작습니다.0 이 개체는 <paramref name="other" />와 같습니다. 0보다 큼 이 개체는 <paramref name="other" />보다 큽니다. 
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Complex.Clone">
      <summary>
            현재 인스턴스의 복사본인 새 개체를 만듭니다.
            </summary>
      <returns>
            이 인스턴스의 복사본인 새 개체입니다.
            </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Complex.Re">
      <summary>
            실수부
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Complex.Im">
      <summary>
            허수부
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.ComplexConverter">
      <summary>
            복소수 변환자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
             지정된 원본 형식으로부터 변환이 가능한지 알아본다.
            </summary>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <param name="context">
             An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
             </param>
      <param name="sourceType">
             A <see cref="T:System.Type" /> that represents the type you want to convert from. 
             </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:NSoft.NFramework.Numerics.Complex" />가 원하는 형식으로 변환이 가능하지 검사한다.
            </summary>
      <param name="context">
      </param>
      <param name="destinationType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            지정된 값을 <see cref="T:NSoft.NFramework.Numerics.Complex" />로 변환가능한지 검사한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            지정된 <paramref name="value" />의 수형이 <see cref="T:NSoft.NFramework.Numerics.Complex" />이면, <paramref name="destinationType" />으로 변환이 가능한지 검사한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
             Returns whether this object supports a standard set of values that can be picked from a list, 
             using the specified context.
            </summary>
      <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 
             should be called to find a common set of values the object supports; otherwise, false.
            </returns>
      <param name="context">
             An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
             </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
             Returns a collection of standard values for the data type 
             this type converter is designed for when provided with a format context.
            </summary>
      <returns>
             A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that 
             holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
      <param name="context">
             An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context 
             that can be used to extract additional information about the environment from which this converter is invoked. 
             This parameter or properties of this parameter can be null. 
            </param>
    </member>
    <member name="T:NSoft.NFramework.Numerics.ComplexList">
      <summary>
        <see cref="T:NSoft.NFramework.Numerics.Complex" />를 요소로 가지는 리스트
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexList.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexList.#ctor(System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="capacity">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexList.#ctor(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            생성자
            </summary>
      <param name="collection">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Numerics.ComplexTool">
      <summary>
            복소수 연산을 위한 Helper Class입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.ClampLength(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Double,System.Double)">
      <summary>
            제공된 Complex 시퀀스의 요소들의 modulus(length)를 지정된 최소, 최대값으로 제한한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Clamp(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            지정된 Complex 시퀀스의 요소들의 값을 최대, 최소값 범위안에 위치 시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.ClampToRealUnit(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            지정된 Complex 시퀀스의 요소들의 Real Part를 0~1 값을 가지게 하고, Image part는 0을 가지게 한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Shift(NSoft.NFramework.Numerics.Complex[],System.Int32)">
      <summary>
            지정된 Offset 값 만큼 Complex 를 Shift 시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.GetLengthRange(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Double@,System.Double@)">
      <summary>
            지정된 Complex 시퀀스에서 최대/최소 절대값(Modulus/Length)를 구한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.SequentialApproximateEqual(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Double)">
      <summary>
            지정된 두개의 Complex 시퀀스의 요소들이 오차범위에서 일치하는지 검사한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Offset(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Double)">
      <summary>
            지정된 offset 만큼 Complex 시퀀스의 real part 값을 증가시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Offset(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},NSoft.NFramework.Numerics.Complex)">
      <summary>
            지정된 offset 만큼 Complex 시퀀스의 real part 값을 증가시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Scale(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Double)">
      <summary>
            시퀀스의 Complex에 scale 값을 곱한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Scale(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},NSoft.NFramework.Numerics.Complex)">
      <summary>
            시퀀스의 Complex에 sclae 값을 곱한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Multiply(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            두 시퀀스를 곱합니다.
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Divide(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            ㅅ
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Copy(NSoft.NFramework.Numerics.Complex[],NSoft.NFramework.Numerics.Complex[])">
      <summary>
        <paramref name="src" /> 요소를 <paramref name="dest" />로 복사합니다. 대상 배열의 크기가 원본의 크기보다 크거나 같아야합니다.
            </summary>
      <param name="src">
      </param>
      <param name="dest">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Reverse(NSoft.NFramework.Numerics.Complex[])">
      <summary>
            지정된 배열을 역순 정렬을 합니다.
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Normalize(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            시퀀스 요소의 Length들을 0~1의 값을 갖도록 정규화를 수행한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Invert(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            Invert  (1 / c)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Sum(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            Complex 시퀀스의 합을 구한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.SumRecursive(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Int32,System.Int32)">
      <summary>
            시퀀스의 startIndex 부터 count 갯수 만큼의 요소만을 합산한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.SumOfSquares(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            지정된 시퀀스의 Complex 요소의 제곱의 합을 구합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.SumOfSquares(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Int32,System.Int32)">
      <summary>
            지정된 시퀀스의 범위에 있는 Complex 요소의 제곱의 합을 구합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Norm(NSoft.NFramework.Numerics.Complex)">
      <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
      <param name="complex">The <see cref="T:NSoft.NFramework.Numerics.Complex" /> number to perfom this operation on.</param>
      <returns>A norm of this value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.NormOfDifference(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
      <param name="complex">The <see cref="T:NSoft.NFramework.Numerics.Complex" /> number to perfom this operation on.</param>
      <param name="other">The value to compare with.</param>
      <returns>A norm of the difference between this and the other value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Mean(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            평균, 중간값
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Variance(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            분산
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.StdDev(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.RMSError(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            평균 제곱합 제곱근 오차(Root Mean Square Error: RMS 오차)
            </summary>
      <param name="alpha">
      </param>
      <param name="beta">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.SumOfSquaredError(System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex},System.Collections.Generic.IEnumerable{NSoft.NFramework.Numerics.Complex})">
      <summary>
            두 시퀀스의 차이에 대한 제곱 값의 총합 
            </summary>
      <param name="alpha">
      </param>
      <param name="beta">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Swap(NSoft.NFramework.Numerics.Complex[],System.Int32,System.Int32)">
      <summary>
            지정된 배열의 지정된 위치의 요소를 교환합니다.
            </summary>
      <param name="array">
      </param>
      <param name="left">
      </param>
      <param name="right">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Swap(NSoft.NFramework.Numerics.Complex@,NSoft.NFramework.Numerics.Complex@)">
      <summary>
            두 변수를 교환합니다.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Sqrt(NSoft.NFramework.Numerics.Complex)">
      <summary>
            제곱근
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ComplexTool.Pow(NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            지수
            </summary>
      <param name="c">
      </param>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.DataBlock`1">
      <summary>
            Array 의 subset을 만들 때 사용한다.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Numerics.DataBlock`1.#ctor(NSoft.NFramework.Numerics.DataBlock{`0},System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="block">복사할 원본 DataBlock</param>
      <param name="offsetIncrement">offset</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.DataBlock`1.#ctor(System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="length">DataBlock의 내부 버퍼 크기</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.DataBlock`1.GetLength">
      <summary>
            사용가능한 저장소의 크기
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.DataBlock`1.Data">
      <summary>
            Data 배열
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.DataBlock`1.Item(System.Int32)">
      <summary>
            Indexer
            </summary>
      <param name="index">내부 저장소 접근을 위한 인덱스</param>
      <returns>저장소 값</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.DataBlock`1.Offset">
      <summary>
            Offset
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IDifferenciator">
      <summary>
            함수의 미분값을 제공하는 Class의 Interface
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IDifferenciator.Differenticate(System.Func{System.Double,System.Double},System.Double)">
      <summary>
            지정된 함수의 x 지점의 미분값을 구한다.
            </summary>
      <param name="func">미분할 함수</param>
      <param name="x">미분값을 구할 위치</param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IIntegrator">
      <summary>
            적분을 수행하는 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IIntegrator.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            함수의 [a,b] 구간을 적분합니다.
            </summary>
      <param name="func">적분할 함수</param>
      <param name="a">적분 시작 위치</param>
      <param name="b">적분 끝 위치</param>
      <returns>적분 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Interval`1">
      <summary>
            상하한 구간을 표현한다.
             </summary>
      <remarks>
             0 ~ 1 사이 구간 중에 상하한을 포함하는 경우를 Closed 라 표현하고 [0,1] 이라 하고
             상하한을 포함하지 않으면 Opened라 표현하고 (0,1) 이라 쓴다.  상/하한 별개로 Open/Close를 혼용할 수도 있다.
             </remarks>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Interval`1.MinName">
      <summary>
            하한
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Interval`1.MaxName">
      <summary>
            상한
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Interval`1.KindName">
      <summary>
            종류명
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Interval`1.OpenedChars">
      <summary>
            개방 구간을 나타내는 Character
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Interval`1.ClosedChars">
      <summary>
            폐쇄 구간을 나타내는 Character
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.Create``1(``0,``0,NSoft.NFramework.Numerics.IntervalKind)">
      <summary>
        <see cref="T:NSoft.NFramework.Numerics.Interval`1" />를 생성합니다.
            </summary>
      <typeparam name="TOther">
      </typeparam>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <param name="kind">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.#ctor(`0,`0,NSoft.NFramework.Numerics.IntervalKind)">
      <summary>
            생성자
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
      <param name="type">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.#ctor(NSoft.NFramework.Numerics.Interval{`0})">
      <summary>
            생성자
            </summary>
      <param name="source">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            생성자
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.IsIn(`0)">
      <summary>
            간격안에 존재하는가?
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.GetLength">
      <summary>
            간격 길이
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.Equals(NSoft.NFramework.Numerics.Interval{`0})">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
                        현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.Equals(System.Object)">
      <summary>
            현재 인스턴스와 같은지 검사합니다.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.GetHashCode">
      <summary>
            HashCode를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.ToString">
      <summary>
            현재 인스턴스를 문자열로 표현합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            대상 개체를 serialize하는 데 필요한 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 채웁니다.
            </summary>
      <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다. </param>
      <param name="context">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조). </param>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우 </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Interval`1.Clone">
      <summary>
            현재 인스턴스의 복사본인 새 개체를 만듭니다.
            </summary>
      <returns>
            이 인스턴스의 복사본인 새 개체입니다.
            </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Interval`1.Min">
      <summary>
            하한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Interval`1.Max">
      <summary>
            상한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Interval`1.Kind">
      <summary>
            구간 경계 종류
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IntervalKind">
      <summary>
            구간 경계값 포함 여부
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.IntervalKind.Open">
      <summary>
            양쪽 경계 포함 안됨	: (a,b)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.IntervalKind.Closed">
      <summary>
            양쪽 경계 포함 : [a, b]
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.IntervalKind.OpenClosed">
      <summary>
            Min 경계값 포함 안됨, Max 경계값은 포함 : (a, b]
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.IntervalKind.ClosedOpen">
      <summary>
            Min 경계값은 포함, Max 경계값은 포함안됨 : [a, b)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IPrecisionSupport`1">
      <summary>
            Support Interface for Precision Operations (like AlmostEquals).
            </summary>
      <typeparam name="T">Type of the implementing class.</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IPrecisionSupport`1.Norm">
      <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
      <returns>A norm of this value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IPrecisionSupport`1.NormOfDifference(`0)">
      <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
      <param name="other">The value to compare with.</param>
      <returns>A norm of the difference between this and the other value.</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Line">
      <summary>
            선분의 일반식인 A*x + B*y + C = 0 의 계수들로 선분을 표현합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Line.A">
      <summary>
            X의 계수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Line.B">
      <summary>
            Y의 계수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Line.C">
      <summary>
            상수 항
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Matrix">
      <summary>
            Matrix 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.#ctor(System.Int32,System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="rows">
      </param>
      <param name="cols">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="rows">
      </param>
      <param name="cols">
      </param>
      <param name="scalar">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.#ctor(System.Double[][])">
      <summary>
            생성자
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.#ctor(System.Data.DataView)">
      <summary>
            생성자
            </summary>
      <param name="dv">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.#ctor(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            생성자
            </summary>
      <param name="src">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            생성자
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetColumnPackedArray">
      <summary>
            Column 단위로 1차원 배열을 만든다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetRowPackedArray">
      <summary>
            Role 단위로 1차원 배열을 만든다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Equality(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Equal operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Inequality(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Not equal operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_UnaryNegation(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Negate operator
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Addition(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Add operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Subtraction(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Subtract operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Multiply(NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            Multiply operator
            </summary>
      <param name="m">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Multiply(System.Double,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Multiply operator
            </summary>
      <param name="s">
      </param>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Multiply(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Multiply operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Division(NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            Divide operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.op_Division(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Divide operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetHashCode">
      <summary>
            HashCode 계산
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.Equals(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Matrix가 같은지 검사합니다.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.Equals(System.Object)">
      <summary>
            Matrix와 지정된 객체가 같은지 검사합니다.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.ToString">
      <summary>
            매트릭스를 문자열로 표현합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.ToString(System.String)">
      <summary>
            매트릭스를 문자열로 표현합니다.
            </summary>
      <param name="separator">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetEnumerator">
      <summary>
            매트릭스 요소를 열거하기 위한 열거자를 반환합니다. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetColumnFirstEnumerator">
      <summary>
            매트릭스 요소를 열거하기 위한 열을 먼저 열거하는 열거자를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.GetRowFirstEnumerator">
      <summary>
            매트릭스 요소를 열거하기 위한 행을 먼저 열거하는 열거자를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Matrix.Clone">
      <summary>
            현재 인스턴스의 복사본인 새 개체를 만듭니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.Data">
      <summary>
            매트릭스 요소 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.Rows">
      <summary>
            행 수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.Cols">
      <summary>
            열 수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.Item(System.Int32)">
      <summary>
            지정한 행의 요소들
            </summary>
      <param name="row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.Item(System.Int32,System.Int32)">
      <summary>
            M(row, col)
            </summary>
      <param name="row">
      </param>
      <param name="col">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.IsSquare">
      <summary>
            정방형 매트릭스인가? (행과 열의 크기가 같은가?)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Matrix.IsSymmetric">
      <summary>
            대칭형 매트릭스
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.MatrixTool">
      <summary>
            Matrix Helper Class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.CheckSameDimension(System.Double[][],System.Double[][])">
      <summary>
            지정한 두개의 배열이 같은 차원의 배열인지 검사합니다.
            </summary>
      <param name="src">
      </param>
      <param name="dest">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.CheckSameDimension(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            두개의 <see cref="T:NSoft.NFramework.Numerics.Matrix" />가 같은 차원인지 검사합니다.
            </summary>
      <param name="m1">
      </param>
      <param name="m2">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.IsSameDimension(System.Double[][],System.Double[][])">
      <summary>
            두 2차원 배열이 같은 차원인지 검사합니다.
            </summary>
      <param name="data1">
      </param>
      <param name="data2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.IsSameDimension(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            두개의 <see cref="T:NSoft.NFramework.Numerics.Matrix" />가 같은 차원인지 검사합니다.
            </summary>
      <param name="m1">
      </param>
      <param name="m2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.CreateMatrix(System.Int32,System.Int32)">
      <summary>
            지정한 행과 열의크기를 가진 행렬을 생성합니다.
            </summary>
      <param name="rows">행의 수 (양수)</param>
      <param name="cols">열의 수 (양수)</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Initialize(NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            Matrix의 모든 요소 값을 <paramref name="value" />로 설정합니다.
            </summary>
      <param name="m">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Copy(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
        <paramref name="src" /> 매트릭스 정보를 <paramref name="dest" /> 매트릭스로 복사합니다.
            </summary>
      <param name="src">
      </param>
      <param name="dest">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.CopyData(System.Double[][],System.Double[][])">
      <summary>
        <paramref name="srcData" /> 배열을 <paramref name="destData" /> 배열로 복사합니다.
            </summary>
      <param name="srcData">
      </param>
      <param name="destData">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.ForEach(NSoft.NFramework.Numerics.Matrix,System.Action{System.Double})">
      <summary>
            Matrix의 모든 요소를 <paramref name="action" />에 인자로 넣어 실행합니다.
            </summary>
      <param name="m">matrix</param>
      <param name="action">실행할 delegate</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Add(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            a + b
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Add(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            result = a + b
            </summary>
      <param name="result">
      </param>
      <param name="a">
      </param>
      <param name="b">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Subtract(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            a - b
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Subtract(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            result = a  b
            </summary>
      <param name="result">
      </param>
      <param name="a">
      </param>
      <param name="b">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Multiply(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            return a * b
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Multiply(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            result = a * b
            </summary>
      <param name="result">
      </param>
      <param name="a">
      </param>
      <param name="b">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Multiply(NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            return a * s
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Multiply(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            result = a * s
            </summary>
      <param name="result">
      </param>
      <param name="a">
      </param>
      <param name="s">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Divide(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            return a / b
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Divide(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix)">
      <summary>
            result = a  / b 
            </summary>
      <param name="result">
      </param>
      <param name="a">
      </param>
      <param name="b">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Divide(NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            return a / s
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Divide(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,System.Double)">
      <summary>
            result = a  / s 
            </summary>
      <param name="result">
      </param>
      <param name="a">
      </param>
      <param name="s">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SubMatrix(NSoft.NFramework.Numerics.Matrix,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Matrix의 지정한 범위에 해당하는 영역을 Sub matrix 로 만듭니다.
            </summary>
      <param name="m">
      </param>
      <param name="r0">
      </param>
      <param name="r1">
      </param>
      <param name="c0">
      </param>
      <param name="c1">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SubMatrix(NSoft.NFramework.Numerics.Matrix,System.Int32[],System.Int32[])">
      <summary>
            Matirx 에서 지정된 행, 렬의 인덱스에 해당하는 요소들만으로 Sub matrix를 생성합니다. 
            </summary>
      <param name="m">
      </param>
      <param name="rows">
      </param>
      <param name="cols">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SubMatrix(NSoft.NFramework.Numerics.Matrix,System.Int32,System.Int32,System.Int32[])">
      <summary>
            Matirx 에서 지정된 행, 렬의 인덱스에 해당하는 요소들만으로 Sub matrix를 생성합니다. 
            </summary>
      <param name="m">
      </param>
      <param name="r0">
      </param>
      <param name="r1">
      </param>
      <param name="cols">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SubMatrix(NSoft.NFramework.Numerics.Matrix,System.Int32[],System.Int32,System.Int32)">
      <summary>
            지정한 매트릭스에 지정된 인덱스에 해당하는 행과 
            <paramref name="c0" /> ~ <paramref name="c1" /> 범위의 컬럼에 해당하는 요소로 Sub matrix를 빌드합니다.
            </summary>
      <param name="m">
      </param>
      <param name="rows">
      </param>
      <param name="c0">
      </param>
      <param name="c1">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SetMatrix(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,System.Int32[],System.Int32[])">
      <summary>
        <paramref name="m" /> matrix 의 요소값을 <paramref name="s" />의 요소로 설정합니다.
            </summary>
      <param name="m">
      </param>
      <param name="s">
      </param>
      <param name="rows">
      </param>
      <param name="cols">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SetMatrix(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <paramref name="m" /> matrix 의 요소값을 <paramref name="s" />의 요소로 설정합니다.
            </summary>
      <param name="m">
      </param>
      <param name="s">
      </param>
      <param name="r0">
      </param>
      <param name="r1">
      </param>
      <param name="c0">
      </param>
      <param name="c1">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SetMatrix(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,System.Int32,System.Int32,System.Int32[])">
      <summary>
        <paramref name="m" /> matrix 의 요소값을 <paramref name="s" />의 요소로 설정합니다.
            </summary>
      <param name="m">
      </param>
      <param name="s">
      </param>
      <param name="r0">
      </param>
      <param name="r1">
      </param>
      <param name="cols">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.SetMatrix(NSoft.NFramework.Numerics.Matrix,NSoft.NFramework.Numerics.Matrix,System.Int32[],System.Int32,System.Int32)">
      <summary>
        <paramref name="m" /> matrix 의 요소값을 <paramref name="s" />의 요소로 설정합니다.
            </summary>
      <param name="m">
      </param>
      <param name="s">
      </param>
      <param name="rows">
      </param>
      <param name="c0">
      </param>
      <param name="c1">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Resize(NSoft.NFramework.Numerics.Matrix,System.Int32,System.Int32)">
      <summary>
            Matrix의 행, 렬을 지정한 값으로 설정합니다.
            </summary>
      <param name="m">
      </param>
      <param name="rows">
      </param>
      <param name="cols">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Negate(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            음수
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Transpose(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            행/열 변환
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Identity(System.Int32,System.Int32)">
      <summary>
            고유 매트릭스 (대각선만 1)
            </summary>
      <param name="rows">
      </param>
      <param name="cols">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Trace(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Matrix Trace. 대각선 요소들의 합
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Randomize(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Randomize for Testing
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Norm1(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Maximum Column Abs Sum
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.Norm2(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Maximum singular value
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.NormInf(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Maximum Row Abs Sum
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MatrixTool.NormF(NSoft.NFramework.Numerics.Matrix)">
      <summary>
            Frobenius norm
            </summary>
      <remarks>Sqrt of Sum Of Squares of all elements</remarks>
    </member>
    <member name="T:NSoft.NFramework.Numerics.NaturalPermutation">
      <summary>
            자연수 순열을 표현합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NaturalPermutation.Inverse">
      <summary>
            Computes the inverse of the permutation.
            </summary>
      <returns>The inverse of the permutation.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NaturalPermutation.FromInversions(System.Int32[])">
      <summary>
            Construct an array from a sequence of inversions.
            </summary>
      <example>
            From wikipedia: the permutation 12043 has the inversions (0,2), (1,2) and (3,4). This would be
            encoded using the array [22244].
            </example>
      <param name="inv">The set of inversions to construct the permutation from.</param>
      <returns>A permutation generated from a sequence of inversions.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NaturalPermutation.ToInversions">
      <summary>
            Construct a sequence of inversions from the permutation.
            </summary>
      <example>
            From wikipedia: the permutation 12043 has the inversions (0,2), (1,2) and (3,4). This would be
            encoded using the array [22244].
            </example>
      <returns>A sequence of inversions.</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.NaturalPermutation.Dimension">
      <summary>
            Gets the number of elements this permutation is over.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.NaturalPermutation.Item(System.Int32)">
      <summary>
            Computes where <paramref name="idx" /> permutes too.
            </summary>
      <param name="idx">The index to permute from.</param>
      <returns>The index which is permuted to.</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Vector">
      <summary>
            Vector
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Add(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Add
            </summary>
      <param name="u">
      </param>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Add(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            Add
            </summary>
      <param name="u">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Add(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Add
            </summary>
      <param name="s">
      </param>
      <param name="u">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Subtract(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Subtract
            </summary>
      <param name="u">
      </param>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Subtract(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            Subtract
            </summary>
      <param name="u">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Subtract(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Subtract
            </summary>
      <param name="s">
      </param>
      <param name="u">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Multiply(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Multiply
            </summary>
      <param name="u">
      </param>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Multiply(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            Multiply
            </summary>
      <param name="u">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Multiply(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Multiply
            </summary>
      <param name="s">
      </param>
      <param name="u">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Divide(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            divide
            </summary>
      <param name="u">
      </param>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Divide(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            divide (u / s)
            </summary>
      <param name="u">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Divide(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            divide (s / u)
            </summary>
      <param name="s">
      </param>
      <param name="u">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Negate(NSoft.NFramework.Numerics.Vector)">
      <summary>
            -v 를 만든다. (Vector의 모든 요소 값을 negate 한다.)
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Reverse(NSoft.NFramework.Numerics.Vector)">
      <summary>
            벡터 요소의 역순 정렬
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor">
      <summary>
            default constructor (2차원 vector)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor(System.Int32)">
      <summary>
            constructor
            </summary>
      <param name="length">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor(System.Int32,System.Double)">
      <summary>
            constructor
            </summary>
      <param name="length">
      </param>
      <param name="initValue">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            constructor
            </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor(System.Collections.ICollection)">
      <summary>
            constructor
            </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor(NSoft.NFramework.Numerics.Vector)">
      <summary>
            copy constructor
            </summary>
      <param name="src">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            constructor
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Add(NSoft.NFramework.Numerics.Vector)">
      <summary>
            Add
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Subtract(NSoft.NFramework.Numerics.Vector)">
      <summary>
            Subtract
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.SubVector(System.Int32,System.Int32)">
      <summary>
            Get sub vector
            </summary>
      <param name="startIndex">
      </param>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.SubVector(System.Int32[])">
      <summary>
            해당 Index의 요소들만으로 벡터를 만든다.
            </summary>
      <param name="indexes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Equality(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Equal operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Inequality(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            Not euqal operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_UnaryNegation(NSoft.NFramework.Numerics.Vector)">
      <summary>
            Negate operator
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Addition(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            addition operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Addition(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            addition operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Addition(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            addition operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Subtraction(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            subtraction operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Subtraction(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            subtraction operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Subtraction(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            subtraction operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Multiply(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            multiply operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Multiply(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            multiply operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Multiply(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            multiply operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Division(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            divide operator
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Division(NSoft.NFramework.Numerics.Vector,System.Double)">
      <summary>
            divide operator
            </summary>
      <param name="a">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.op_Division(System.Double,NSoft.NFramework.Numerics.Vector)">
      <summary>
            divide operator
            </summary>
      <param name="s">
      </param>
      <param name="a">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.GetHashCode">
      <summary>
            Hashcode 얻기
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Equals(System.Object)">
      <summary>
            객체 비교
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.ToString">
      <summary>
            Vector 를 문자열로 표시
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.ToString(System.String)">
      <summary>
            Vector 를 문자열로 표시
            </summary>
      <param name="separator">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.ToString(System.String,System.String)">
      <summary>
            Vector 를 문자열로 표시
            </summary>
      <param name="separator">
      </param>
      <param name="format">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.ToString(System.String,System.IFormatProvider)">
      <summary>
            Vector 를 문자열로 표시
            </summary>
      <param name="separator">
      </param>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.ToString(System.String,System.String,System.IFormatProvider)">
      <summary>
            Vector 를 문자열로 표시
            </summary>
      <param name="separator">
      </param>
      <param name="format">
      </param>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.GetEnumerator">
      <summary>
            컬렉션을 반복하는 열거자를 반환합니다.
            </summary>
      <returns>
            컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            대상 개체를 serialize하는 데 필요한 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 채웁니다.
            </summary>
      <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다. </param>
      <param name="context">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조). </param>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우 </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector.Clone">
      <summary>
            복사
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Vector.Data">
      <summary>
            elements of vector
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Vector.Length">
      <summary>
            Length of vector
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Vector.Item(System.Int32)">
      <summary>
            Indexer
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Vector2D">
      <summary>
            2차원 벡터
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Vector2D.Zero">
      <summary>
            V (0, 0)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Vector2D.XAxis">
      <summary>
            V (1,0)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Vector2D.YAxis">
      <summary>
            V (0, 1)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Parse(System.String)">
      <summary>
            문자열을 파싱하여 Vector2D 인스턴스를 빌드합니다.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Add(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            v + w
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Add(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            v + s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Add(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = u + v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Add(NSoft.NFramework.Numerics.Vector2D,System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = u + s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Subtract(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
             v - w
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Subtract(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            v - s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Subtract(System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            s - v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Subtract(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = u - v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Subtract(NSoft.NFramework.Numerics.Vector2D,System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = u - s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Subtract(System.Double,NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = s - v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Divide(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            v / w
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Divide(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            v / s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Divide(System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            s / v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Divide(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D@)">
      <summary>
            w = u / v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Divide(NSoft.NFramework.Numerics.Vector2D,System.Double,NSoft.NFramework.Numerics.Vector2D@)">
      <summary>
            w = u / s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Divide(System.Double,NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D@)">
      <summary>
            w = s / u
            </summary>
      <param name="s">
      </param>
      <param name="u">
      </param>
      <param name="w">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Multiply(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            return v * s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Multiply(System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            return s * v
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Multiply(NSoft.NFramework.Numerics.Vector2D,System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = u * s
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Multiply(System.Double,NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            w = s * u 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.DotProduct(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            두 벡터의 Dot를 계산한다.
            </summary>
      <remarks>
            DotProduct의 계산식은 다음과 같다.<br />
            DotProduct(u, v) = (u.X*v.X) + (u.Y*v.Y)
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.CrossProduct(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            두 벡터의 Cross Product를 계산한다.
            </summary>
      <returns>
      </returns>
      <remarks>
            CrossProduct의 계산식은 다음과 같다.<br />
            CrossProduct(u, v) = u.X * v.Y - u.Y * v.X;
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Negate(NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            return -v
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.ApproxEqual(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            두 벡터가 오차범위 내에서 같은 값을 가지는지 검사한다.
            </summary>
      <param name="u">
      </param>
      <param name="v">
      </param>
      <param name="tolerance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.#ctor(System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="x">x 값</param>
      <param name="y">y 값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.#ctor(System.Double[])">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.#ctor(NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            Copy constructor
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Clone">
      <summary>
            현재 인스턴스 복사
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization/
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Normalize">
      <summary>
            Vector2D 정보를 Normalize를 수행합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.GetNormalize">
      <summary>
            현재 인스턴스의 Normalize된 벡터를 빌드합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.GetLength">
      <summary>
            벡터의 길이
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.GetLengthSquared">
      <summary>
            벡터의 길이의 제곱
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Norm">
      <summary>
            Norm 값 계산
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Perpendicular">
      <summary>
            벡터 방향을 시계방향으로 90도 회전한 벡터
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.UnitPerpendicular">
      <summary>
            벡터 방향을 시계방향으로 90도 회전한 벡터의 단위 벡터
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.ClampZero(System.Double)">
      <summary>
            벡터 요소들이 0.0과 지정한 tolerance 내의 오차에 있다면, 벡터 요소들을 0으로 설정합니다.
            </summary>
      <param name="tolerance">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.ClampZero">
      <summary>
            벡터 요소들이 0.0과 Epsilon 내의 오차에 있다면, 벡터 요소들을 0으로 설정합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.GetHashCode">
      <summary>
            HashCode 계산
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.CompareTo(System.Object)">
      <summary>
            값을 비교합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.CompareTo(NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            두 벡터를 비교합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Equals(System.Object)">
      <summary>
            지정한 값과 비교합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.Equals(NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            값이 같은지 검사합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.ToString">
      <summary>
            represent current by string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Equality(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            equal operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Inequality(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            not equal operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_GreaterThan(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            greater than operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_LessThan(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            less than operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_GreaterThanOrEqual(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            greater	than or equal operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_LessThanOrEqual(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            less than or equal operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_UnaryNegation(NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            Negate operator
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Addition(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            Add operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Addition(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            Add operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Subtraction(NSoft.NFramework.Numerics.Vector2D,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            Subtract operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Subtraction(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            Subtract operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Subtraction(System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            Subtract operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Multiply(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            곱하기 연산자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Multiply(System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            곱하기 연산자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Division(NSoft.NFramework.Numerics.Vector2D,System.Double)">
      <summary>
            나누기 연산자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Division(System.Double,NSoft.NFramework.Numerics.Vector2D)">
      <summary>
            나누기 연산자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2D.op_Explicit(NSoft.NFramework.Numerics.Vector2D)~System.Double[]">
      <summary>
            Vector2D 의 요소를 double 의 배열 (double[])로 명시적으로 변환해주는 연산자입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Vector2D.X">
      <summary>
            X-coordinate value
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Vector2D.Y">
      <summary>
            Y-coordinate value
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Vector2D.Item(System.Int32)">
      <summary>
            Index
            </summary>
      <param name="index">0 or 1</param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Vector2DConverter">
      <summary>
            Converter for <see cref="T:NSoft.NFramework.Numerics.Vector2D" /></summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            지정된 sourceType으로부터 <see cref="T:NSoft.NFramework.Numerics.Vector2D" /> 형식으로 변환이 가능한가?
            </summary>
      <param name="context">
      </param>
      <param name="sourceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:NSoft.NFramework.Numerics.Vector2D" /> 형식을 지정한 destinationType으로 변환 가능한가?
            </summary>
      <param name="context">
      </param>
      <param name="destinationType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            지정된 값을 <see cref="T:NSoft.NFramework.Numerics.Vector2D" /> 형식의 값으로 변환
            </summary>
      <param name="context">
      </param>
      <param name="culture">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            지정한 <see cref="T:NSoft.NFramework.Numerics.Vector2D" /> 인스턴스 값을 지정한 수형으로 변환한다.
            </summary>
      <param name="context">
      </param>
      <param name="culture">
      </param>
      <param name="value">
      </param>
      <param name="destinationType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2DConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.
            </summary>
      <returns>
            개체가 지원하는 일반 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />를 호출해야 하는 경우 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Vector2DConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            지정된 수형의 기본값이 되는 것들을 등록해 둔다. (디자인시에 활용하기 위해)
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.VectorTool">
      <summary>
            Utility class for <see cref="T:NSoft.NFramework.Numerics.Vector" /></summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.VectorTool.Rnd">
      <summary>
            난수발생기
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.CheckDimension(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            두 Vector의 창원이 같은지 검사한다.
            </summary>
      <param name="u">
      </param>
      <param name="v">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.IsSameDimension(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            두 Vector가 같은 Dimension을 가졌는지 검사한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.RandomVector(System.Int32)">
      <summary>
            무작위 벡터를 만듭니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.RandomVector(System.Int32,System.Int32)">
      <summary>
            무작위 벡터를 <paramref name="count" /> 갯수만큼 생성합니다.
            </summary>
      <param name="count">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.AbsSum(NSoft.NFramework.Numerics.Vector)">
      <summary>
            Vector의 절대값을 계산한다.
            </summary>
      <param name="v">Vector</param>
      <returns>Vector의 절대값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.Dot(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            두 벡터의 Dot 를 구한다. (요소 순서별로 곱하기의 합)
            </summary>
      <param name="u">First Vector</param>
      <param name="v">Second Vector</param>
      <returns>Dot of vector</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.Norm1(NSoft.NFramework.Numerics.Vector)">
      <summary>
            절대값이 가장 큰 요소를 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.Norm2(NSoft.NFramework.Numerics.Vector,NSoft.NFramework.Numerics.Vector)">
      <summary>
            두 벡터의 Dot의 제곱근
            </summary>
      <param name="u">First Vector</param>
      <param name="v">Second Vector</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.NormInf(NSoft.NFramework.Numerics.Vector)">
      <summary>
            벡터의 요소 중 가장 큰 값 반환한다.
            </summary>
      <param name="v">Vector</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.VectorTool.NormF(NSoft.NFramework.Numerics.Vector)">
      <summary>
            벡터의 길이를 구한다.
            </summary>
      <param name="v">Vector</param>
      <returns>벡터의 길이</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Beta">
      <summary>
            Implements the Beta distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a>.
            </summary>
      <remarks>
        <para>There are a few special cases for the parameterization of the Beta distribution. When both
            shape parameters are positive infinity, the Beta distribution degenerates to a point distribution
            at 0.5. When one of the shape parameters is positive infinity, the distribution degenerates to a point
            distribution at the positive infinity. When both shape parameters are 0.0, the Beta distribution 
            degenerates to a Bernoulli distribution with parameter 0.5. When one shape parameter is 0.0, the
            distribution degenerates to a point distribution at the non-zero shape parameter.</para>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution">
      <summary>
            연속 분포 (Continuous Distribution)의 인터페이스
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.IDistribution">
      <summary>
            분포 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IDistribution.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDistribution.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IContinuousDistribution.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.#ctor(System.Double,System.Double,System.Func{System.Random})">
      <summary>
            베타분포 생성자
            </summary>
      <param name="a">Beta 함수 계수 a</param>
      <param name="b">Beta 함수 계수 b</param>
      <param name="randomFactory">Random 인스턴스 생성자</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.A">
      <summary>
            Beta 함수 Factor A
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.B">
      <summary>
            Beta 함수 Factor B
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Beta.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy">
      <summary>
            The Cauchy distribution is a symmetric continuous probability distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/cauchy_distribution">Wikipedia - Cauchy distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Location">
      <summary>
            분포의 위치 파라미터 (기본 0), <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Median" /> 값과 같다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Scale">
      <summary>
            분포 Scale (기본 1)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Cauchy.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Chi">
      <summary>
            This class implements functionality for the Chi distribution. <br />
            This distribution is  a continuous probability distribution. <br />
            The distribution usually arises when a k-dimensional vector's orthogonal 
            components are independent and each follow a standard normal distribution. The length of the vector will 
            then have a chi distribution.<br /><a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Sample(System.Random,System.Double)">
      <summary>
            Chi 분포의 무작위 값을 반환합니다.
            </summary>
      <param name="rnd">
      </param>
      <param name="dof">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Samples(System.Random,System.Double)">
      <summary>
             Chi 분포의 무작위 값을 열거합니다.
            </summary>
      <param name="rnd">
      </param>
      <param name="dof">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.DegreeOfFreedom">
      <summary>
            Chi 분포의 자유도
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Chi.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare">
      <summary>
            This class implements functionality for the ChiSquare distribution. <br />
            This distribution is  a sum of the squares of k independent standard normal random variables.<br /><a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - ChiSquare distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.DegreeOfFreedom">
      <summary>
            Chi 분포의 자유도
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ChiSquare.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform">
      <summary>
            균일 연속 분포
            The continuous uniform distribution is a distribution over real numbers. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">Wikipedia - Continuous uniform distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Sample(System.Random,System.Double,System.Double)">
      <summary>
            연속 균일 분포의 샘플을 생성합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Samples(System.Random,System.Double,System.Double)">
      <summary>
            연속 균일 분포의 샘플을 생성합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Lower">
      <summary>
            하한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Upper">
      <summary>
            상한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.ContinuousUniform.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang">
      <summary>
            Erlang 연속 분포
            This class implements functionality for the Erlang distribution.<br />
            This distribution is a continuous probability distribution with wide applicability primarily due to its
            relation to the exponential and Gamma distributions.
            <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Erlang.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential">
      <summary>
            지수 분포
            The exponential distribution is a distribution over the real numbers parameterized by one non-negative parameter.
            <a href="http://en.wikipedia.org/wiki/exponential_distribution">Wikipedia - exponential distribution</a>.
            </summary>
      <remarks>The distribution will use the <see cref="T:System.Random" /> by default. 
            <para>Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.RandomSource" /> property.</para><para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Sample(System.Random,System.Double)">
      <summary>
            지수 분포의 샘플을 제공합니다.
            </summary>
      <param name="rnd">
      </param>
      <param name="lambda">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Samples(System.Random,System.Double)">
      <summary>
            지수 분포의 샘플 시퀀스를 제공합니다.
            </summary>
      <param name="rnd">
      </param>
      <param name="lambda">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Lambda">
      <summary>
            람다 값 (기본 1.0)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Exponential.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor">
      <summary>
            Implements the FisherSnedecor distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - FisherSnedecor distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.FisherSnedecor.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma">
      <summary>
            Implements the univariate Gamma distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </summary>
      <remarks>
        <para>The Gamma distribution is parametrized by a shape and inverse scale parameter. When we want
            to specify a Gamma distribution which is a point distribution we set the shape parameter to be the
            location of the point distribution and the inverse scale as positive infinity. The distribution
            with shape and inverse scale both zero is undefined.</para>
        <para> Random number generation for the Gamma distribution is based on the algorithm in:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363?72.</para>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.WithShapeScale(System.Double,System.Double)">
      <summary>
            Constructs a Gamma distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random" /> random number generator.
            </summary>
      <param name="shape">The shape of the Gamma distribution.</param>
      <param name="scale">The scale of the Gamma distribution.</param>
      <returns>a normal distribution.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.WithShapeInvScale(System.Double,System.Double)">
      <summary>
            Constructs a Gamma distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random" /> random number generator.
            </summary>
      <param name="shape">The shape of the Gamma distribution.</param>
      <param name="invScale">The inverse scale of the Gamma distribution.</param>
      <returns>a normal distribution.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Density(System.Double,System.Double,System.Double)">
      <summary>
            감마분포의 확률밀도를 계산합니다.
            </summary>
      <param name="shape">
      </param>
      <param name="invScale">
      </param>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.DensityLn(System.Double,System.Double,System.Double)">
      <summary>
            감마분포의 로그 확률밀도를 계산합니다.
            </summary>
      <param name="shape">
      </param>
      <param name="invScale">
      </param>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Sample(System.Random,System.Double,System.Double)">
      <summary>
            감마 분포의 샘플 데이타를 생성합니다.
            </summary>
      <param name="rnd">
      </param>
      <param name="shape">
      </param>
      <param name="invScale">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Samples(System.Random,System.Double,System.Double)">
      <summary>
            감마 분포의 샘플 데이타를 생성합니다.
            </summary>
      <param name="rnd">
      </param>
      <param name="shape">
      </param>
      <param name="invScale">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Shape">
      <summary>
            Gamma 분포의 Shape
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Scale">
      <summary>
            Gamma 분포의 Scale
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.InvScale">
      <summary>
            감마분포의 역 Scale
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Gamma.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma">
      <summary>
            The inverse Gamma distribution is a distribution over the positive real numbers parameterized by
            two positive parameters.
            <a href="http://en.wikipedia.org/wiki/inverse-gamma_distribution">Wikipedia - InverseGamma distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Shape">
      <summary>
            the shape (alpha) parameter.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Scale">
      <summary>
            The scale (beta) parameter.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.InverseGamma.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace">
      <summary>
            The Laplace distribution is a distribution over the real numbers parameterized by a mean and
            scale parameter. The PDF is:
                p(x) = \frac{1}{2 * scale} \exp{- |x - mean| / scale}.
            <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </summary>
      <remarks>The distribution will use the <see cref="T:System.Random" /> by default. 
            <para>Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.RandomSource" /> property.</para><para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Laplace.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Normal">
      <summary>
            정규 분포.
            Implements the univariate Normal (or Gaussian) distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.#ctor(System.Double,System.Double,System.Func{System.Random})">
      <summary>
            정규분포 생성자
            </summary>
      <param name="mean">평균</param>
      <param name="stDev">표준편차</param>
      <param name="randomFactory">난수발생기 Factory</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.InverseCumulativeDistribution(System.Double)">
      <summary>
            Computes the inverse cumulative distribution function of the normal distribution.
            </summary>
      <param name="p">The location at which to compute the inverse cumulative density.</param>
      <returns>the inverse cumulative density at <paramref name="p" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Density(System.Double,System.Double,System.Double)">
      <summary>
            정규분포의 밀도를 계산합니다.
            </summary>
      <param name="mean">
      </param>
      <param name="stDev">
      </param>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.DensityLn(System.Double,System.Double,System.Double)">
      <summary>
            정규분포의 로그 밀도를 계산합니다.
            </summary>
      <param name="mean">
      </param>
      <param name="stDev">
      </param>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Sample(System.Random,System.Double,System.Double)">
      <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
      <param name="rnd">The random number generator to use.</param>
      <param name="mean">The mean of the normal distribution from which to generate samples.</param>
      <param name="stDev">The standard deviation of the normal distribution from which to generate samples.</param>
      <returns>a sample from the distribution.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Samples(System.Random,System.Double,System.Double)">
      <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
      <param name="rnd">The random number generator to use.</param>
      <param name="mean">The mean of the normal distribution from which to generate samples.</param>
      <param name="stDev">The standard deviation of the normal distribution from which to generate samples.</param>
      <returns>a sequence of samples from the distribution.</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Precision">
      <summary>
            정규분포의 정밀도
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Normal.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto">
      <summary>
            The Pareto distribution is a power law probability distribution that coincides with social, 
            scientific, geophysical, actuarial, and many other types of observable phenomena.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Pareto.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh">
      <summary>
            The Rayleigh distribution (pronounced /ˈreɪli/) is a continuous probability distribution. As an 
            example of how it arises, the wind speed will have a Rayleigh distribution if the components of 
            the two-dimensional wind velocity vector are uncorrelated and normally distributed with equal variance.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Rayleigh.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Stable">
      <summary>
            A random variable is said to be stable (or to have a stable distribution) if it has 
            the property that a linear combination of two independent copies of the variable has 
            the same distribution, up to location and scale parameters.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Stable_distribution">Wikipedia - Stable distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default.`
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Alpha">
      <summary>
            Stable parameter
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Beta">
      <summary>
            Skewness parameter
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Stable.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.StudentT.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull">
      <summary>
            Weibull 분포. 자세한 내용은 <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>을 참고하세요.
            </summary>
      <remarks>
        <para>The Weibull distribution is parametrized by a shape and scale parameter.</para>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can get/set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.#ctor(System.Double,System.Double,System.Func{System.Random})">
      <summary>
            Initializes a new instance of the Weibull class.
            </summary>
      <param name="shape">The shape of the Weibull distribution.</param>
      <param name="scale">The scale of the Weibull distribution.</param>
      <param name="randomFactory">난수발생기 Factory</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Density(System.Double)">
      <summary>
            분포의 확률 밀도
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.DensityLn(System.Double)">
      <summary>
            분포의 로그 확률 밀도 
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Sample">
      <summary>
            분포의 무작위 값을 제공합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Samples">
      <summary>
            현 분포의 무작위 값을 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.AssertValidParameters(System.Double,System.Double)">
      <summary>
            Weibull 분포의 인자 값을 검증합니다.
            </summary>
      <param name="shape">
      </param>
      <param name="scale">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Sample(System.Random,System.Double,System.Double)">
      <summary>
            Generates a sample from the Weibull distribution.
            </summary>
      <param name="rnd">The random number generator to use.</param>
      <param name="shape">The shape of the Weibull distribution from which to generate samples.</param>
      <param name="scale">The scale of the Weibull distribution from which to generate samples.</param>
      <returns>a sample from the distribution.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Samples(System.Random,System.Double,System.Double)">
      <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
      <param name="rnd">The random number generator to use.</param>
      <param name="shape">The shape of the Weibull distribution from which to generate samples.</param>
      <param name="scale">The scale of the Weibull distribution from which to generate samples.</param>
      <returns>a sequence of samples from the distribution.</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Shape">
      <summary>
            The shape of the Weibull distribution.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Scale">
      <summary>
            The scale of the Weibull distribution.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Continuous.Weibull.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli">
      <summary>
            베르누이 분포
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution">
      <summary>
            이산 분포 (Discrete Distribution)의 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Probability(System.Int32)">
      <summary>
            분포의 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.ProbabilityLn(System.Int32)">
      <summary>
            분포의 Log 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Sample">
      <summary>
            분포의 데이타를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Samples">
      <summary>
            분포의 무작위 데이타를 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.IDiscreteDistribution.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Probability(System.Int32)">
      <summary>
            분포의 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.ProbabilityLn(System.Int32)">
      <summary>
            분포의 Log 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Sample">
      <summary>
            분포의 데이타를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Samples">
      <summary>
            분포의 무작위 데이타를 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Sample(System.Random,System.Double)">
      <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
      <param name="rnd">The random number generator to use.</param>
      <param name="p">The probability of generating a 1.</param>
      <returns>A sample from the Bernoulli distribution.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Samples(System.Random,System.Double)">
      <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
      <param name="rnd">The random number generator to use.</param>
      <param name="p">The probability of generating a 1.</param>
      <returns>a sequence of samples from the distribution.</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Bernoulli.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial">
      <summary>
            Implements the binomial distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Binomial_distribution">Wikipedia - Binomial distribution</a>.
            </summary>
      <remarks>
        <para>The distribution is parameterized by a probability (between 0.0 and 1.0).</para>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Probability(System.Int32)">
      <summary>
            분포의 확률
            </summary>
      <param name="k">시도 횟수</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.ProbabilityLn(System.Int32)">
      <summary>
            분포의 Log 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Sample">
      <summary>
            분포의 데이타를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Samples">
      <summary>
            분포의 무작위 데이타를 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.P">
      <summary>
            성공 확률 (Success Probability)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.N">
      <summary>
            시도 횟수 (Number of Trials)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Binomial.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical">
      <summary>
            Implements the categorical distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>. This
            distribution is sometimes called the Discrete distribution.
            </summary>
      <remarks>
        <para>The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.</para>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Probability(System.Int32)">
      <summary>
            분포의 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.ProbabilityLn(System.Int32)">
      <summary>
            분포의 Log 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Sample">
      <summary>
            분포의 데이타를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Samples">
      <summary>
            분포의 무작위 데이타를 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.P">
      <summary>
            he normalized probability vector of the multinomial.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.Categorical.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson">
      <summary>
        <para>The Conway-Maxwell-Poisson distribution is a generalization of the Poisson, Geometric and Bernoulli
            distributions. It is parameterized by two real numbers "lambda" and "nu". For
            <list><item>nu = 0 the distribution reverts to a Geometric distribution</item><item>nu = 1 the distribution reverts to the Poisson distribution</item><item>nu -&gt; infinity the distribution converges to a Bernoulli distribution</item></list></para>
            This implementation will cache the value of the normalization constant.
            <a href="http://en.wikipedia.org/wiki/Conway%E2%80%93Maxwell%E2%80%93Poisson_distribution">Wikipedia - ConwayMaxwellPoisson distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.#ctor(System.Double,System.Double,System.Func{System.Random})">
      <summary>
            Initializes a new instance of the <see cref="T:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson" /> class. 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Probability(System.Int32)">
      <summary>
            분포의 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.ProbabilityLn(System.Int32)">
      <summary>
            분포의 Log 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Sample">
      <summary>
            분포의 데이타를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Samples">
      <summary>
            분포의 무작위 데이타를 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.ConwayMaxwellPoisson.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform">
      <summary>
            정수값을 변량으로 균일하게 이산 분포를 합니다.. 이 분포는 상하한 값을 포함합니다.
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">Wikipedia - Discrete uniform distribution</a>.
            </summary>
      <remarks>
        <para>The distribution will use the <see cref="T:System.Random" /> by default. 
            Users can set the random number generator by using the <see cref="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.RandomSource" /> property.</para>
        <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.CumulativeDistribution(System.Double)">
      <summary>
            확률 분포 계산을 위한 누적분포함수
            </summary>
      <param name="x">The location at which to compute the cumulative distribution function.</param>
      <returns>the cumulative distribution at location <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Probability(System.Int32)">
      <summary>
            분포의 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.ProbabilityLn(System.Int32)">
      <summary>
            분포의 Log 확률
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Sample">
      <summary>
            분포의 데이타를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Samples">
      <summary>
            분포의 무작위 데이타를 열거합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.LowerBound">
      <summary>
            하한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.UpperBound">
      <summary>
            상한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.RandomSource">
      <summary>
            난수 발생기
            TODO: Randomizer로 명칭 변경 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Entropy">
      <summary>
            분포의 엔트로피 (불안정성) 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Skewness">
      <summary>
            기울기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Kurtosis">
      <summary>
            첨도 (뽀족한 정도) (+) 값이면 뾰족하고, (-) 값이면 뭉툭하다
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Mode">
      <summary>
            최빈값 (빈도수가 최대인 값)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Median">
      <summary>
            중앙값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Minumum">
      <summary>
            최소값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Distributions.Discrete.DiscreteUniform.Maximum">
      <summary>
            최대값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.BisectionRootFinder">
      <summary>
            이분법으로 특정 함수의 Root (근)을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.RootFinderBase">
      <summary>
            근을 찾는 알고리즘을 구현한 Class의 기본 Class입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IRootFinder">
      <summary>
            특정 함수의 Root (근)을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IRootFinder.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에 대해, 근을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
      <param name="func">근을 찾을 함수</param>
      <param name="lower">근을 찾을 구간의 하한</param>
      <param name="upper">근을 찾을 구간의 상한</param>
      <param name="tryCount">시도 횟수</param>
      <param name="tolerance">근의 오차허용범위</param>
      <returns>근에 해당하는 x 값. 해를 못찾으면 <see cref="F:System.Double.NaN" />을 반환한다.</returns>
    </member>
    <member name="F:NSoft.NFramework.Numerics.RootFinderBase.DefaultTryCount">
      <summary>
            해 찾기 위한 기본 시도 횟수
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.RootFinderBase.RootY">
      <summary>
            Y축 원점
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RootFinderBase.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에 대해, 근을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
      <param name="func">근을 찾을 함수</param>
      <param name="lower">근을 찾을 구간의 하한</param>
      <param name="upper">근을 찾을 구간의 상한</param>
      <param name="tryCount">시도 횟수</param>
      <param name="tolerance">근의 오차허용범위</param>
      <returns>근에 해당하는 x 값. 해를 못찾으면 <see cref="F:System.Double.NaN" />을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BisectionRootFinder.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            이분법으로 y = func(x) 함수의 [lower, upper] 구간에 대해, 근을 찾는다 (y=0 이되는 x 값)
            </summary>
      <param name="func">근을 찾을 함수</param>
      <param name="lower">근을 찾을 구간의 하한</param>
      <param name="upper">근을 찾을 구간의 상한</param>
      <param name="tryCount">시도 횟수</param>
      <param name="tolerance">근의 오차허용범위</param>
      <returns>근에 해당하는 x 값. 해를 못찾으면 <see cref="F:System.Double.NaN" />을 반환한다.</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.GoldenSectionMinimumFinder">
      <summary>
            황금비-분할법 (Golden Section ) 알고리즘을 이용하여 특정 함수의 [lower, upper]구간에서 func(x)의 최소값의 위치를 찾는다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IMinimumFinder.FindMiminum(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에서 f(x)의 최소 값이 되는 x를 구합니다.
            </summary>
      <param name="func">함수</param>
      <param name="lower">구간의 하한</param>
      <param name="upper">구간의 상한</param>
      <param name="tryCount">시도횟수</param>
      <param name="tolerance">허용 오차</param>
      <returns>f(x)가 최소값이 되는 x 값, 검색 실패시에는 double.NaN을 반환한다</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MinimumFinderBase.FindMiminum(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에서 f(x)의 최소 값이 되는 x를 구합니다.
            </summary>
      <param name="func">함수</param>
      <param name="lower">구간의 하한</param>
      <param name="upper">구간의 상한</param>
      <param name="tryCount">시도횟수</param>
      <param name="tolerance">허용 오차</param>
      <returns>f(x)가 최소값이 되는 x 값, 검색 실패시에는 double.NaN을 반환한다</returns>
    </member>
    <member name="F:NSoft.NFramework.Numerics.GoldenSectionMinimumFinder.GodenRatio">
      <summary>
            황금 비율 (2 / (3 + Sqrt(5))
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GoldenSectionMinimumFinder.FindMiminum(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에서 f(x)의 최소 값이 되는 x를 구합니다.
            </summary>
      <param name="func">함수</param>
      <param name="lower">구간의 하한</param>
      <param name="upper">구간의 상한</param>
      <param name="tryCount">시도횟수</param>
      <param name="tolerance">허용 오차</param>
      <returns>f(x)가 최소값이 되는 x 값, 검색 실패시에는 double.NaN을 반환한다</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.NewtonRapsonRootFinder">
      <summary>
            Newton-Rapson 알고리즘을 이용하여 특정 함수의 Root (근)을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NewtonRapsonRootFinder.gfunc(System.Func{System.Double,System.Double},System.Double)">
      <summary>
            미분 함수
            </summary>
      <param name="func">원함수</param>
      <param name="x">미분 함수를 얻기 위한 X 좌표</param>
      <returns>미분함수에의한 Y 좌표</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NewtonRapsonRootFinder.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에 대해, 근을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
      <param name="func">근을 찾을 함수</param>
      <param name="lower">근을 찾을 구간의 하한</param>
      <param name="upper">근을 찾을 구간의 상한</param>
      <param name="tryCount">시도 횟수</param>
      <param name="tolerance">근의 오차허용범위</param>
      <returns>근에 해당하는 x 값. 해를 못찾으면 <see cref="F:System.Double.NaN" />을 반환한다.</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.SecantRootFinder">
      <summary>
            활선법(Secant) 알고리즘을 이용하여 특정 함수의 Root (근)을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SecantRootFinder.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에 대해, 근을 찾는다 ( func(x) = 0 인 x 값 )
            </summary>
      <param name="func">근을 찾을 함수</param>
      <param name="lower">근을 찾을 구간의 하한</param>
      <param name="upper">근을 찾을 구간의 상한</param>
      <param name="tryCount">시도 횟수</param>
      <param name="tolerance">근의 오차허용범위</param>
      <returns>근에 해당하는 x 값. 해를 못찾으면 <see cref="F:System.Double.NaN" />을 반환한다.</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Expressions.CalcExpression">
      <summary>
            NCalc 라이브러리를 이용하여 계산식에 대한 수행을 합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Integration.IntegratorBase">
      <summary>
            적분을 수행하는 기본 Class
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Integration.IntegratorBase.DefaultSteps">
      <summary>
            기본 적분 구간 갯수
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Integration.IntegratorBase.DefaultOrder">
      <summary>
            기본 차수
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.IntegratorBase.GetSteps(System.Double,System.Double,System.Int32)">
      <summary>
            구간에 따라 Step 수를 조정한다.
            </summary>
      <param name="a">하한</param>
      <param name="b">상한</param>
      <param name="steps">초기 구간 수</param>
      <returns>조정된 구간 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.IntegratorBase.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            함수의 [a,b] 구간을 적분합니다.
            </summary>
      <param name="func">적분할 함수</param>
      <param name="a">적분 시작 위치</param>
      <param name="b">적분 끝 위치</param>
      <returns>적분 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Integration.MidValueIntegrator">
      <summary>
            중점법
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.MidValueIntegrator.#ctor(System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="steps">적분 구간 갯수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.MidValueIntegrator.#ctor(NSoft.NFramework.Numerics.Integration.MidValueIntegrator)">
      <summary>
            Copy constructor
            </summary>
      <param name="integrator">원본</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.MidValueIntegrator.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            함수의 [a,b] 구간을 적분합니다.
            </summary>
      <param name="func">적분할 함수</param>
      <param name="a">적분 시작 위치</param>
      <param name="b">적분 끝 위치</param>
      <returns>적분 값</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Integration.MidValueIntegrator.Steps">
      <summary>
            적분할 구간 갯수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Integration.RombergIntegrator">
      <summary>
            Romberg 적분법
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.RombergIntegrator.#ctor(System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="order">Romberg approximation order (기본값은 5)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.RombergIntegrator.#ctor(NSoft.NFramework.Numerics.Integration.RombergIntegrator)">
      <summary>
            Copy constructor
            </summary>
      <param name="integrator">원본 RombergIntegrator</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.RombergIntegrator.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            함수의 [a,b] 구간을 적분합니다.
            </summary>
      <param name="func">적분할 함수</param>
      <param name="a">적분 시작 위치</param>
      <param name="b">적분 끝 위치</param>
      <returns>적분 값</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Integration.RombergIntegrator.Order">
      <summary>
            Romberg approximation order (기본값은 5)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Integration.SimpsonIntegrator">
      <summary>
            Simpson 적분법 (1-4-1 방식) 2차 곡선 근사 방식이다. 정확도가 <see cref="T:NSoft.NFramework.Numerics.Integration.TrapizoidalIntegrator" />보다 좋다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.SimpsonIntegrator.#ctor(System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="steps">적분 구간 갯수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.SimpsonIntegrator.#ctor(NSoft.NFramework.Numerics.Integration.SimpsonIntegrator)">
      <summary>
            Copy constructor
            </summary>
      <param name="integrator">source integrator</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.SimpsonIntegrator.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            함수의 [a,b] 구간을 적분합니다.
            </summary>
      <param name="func">적분할 함수</param>
      <param name="a">적분 시작 위치</param>
      <param name="b">적분 끝 위치</param>
      <returns>적분 값</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Integration.SimpsonIntegrator.Steps">
      <summary>
            적분할 구간 갯수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Integration.TrapizoidalIntegrator">
      <summary>
            사다리꼴 적분
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Integration.TrapizoidalIntegrator.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
      <summary>
            함수의 [a,b] 구간을 적분합니다.
            </summary>
      <param name="func">적분할 함수</param>
      <param name="a">적분 시작 위치</param>
      <param name="b">적분 끝 위치</param>
      <returns>적분 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IInterpolator">
      <summary>
            보간 (Interpolation)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IInterpolator.Interpolate(System.Double[],System.Double[],System.Double)">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IInterpolator.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.InterpolatorBase">
      <summary>
            보간을 수행하는 기본 Class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.InterpolatorBase.CheckSameLength(System.Double[],System.Double[])">
      <summary>
            두 배열이 같은 길이를 가졌는지 검사한다.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.InterpolatorBase.Interpolate(System.Double[],System.Double[],System.Double)">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.InterpolatorBase.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.LagrangeInterpolator">
      <summary>
            Lagrange 보간법
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LagrangeInterpolator.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.LinearInterpolator">
      <summary>
            선형 보간
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.LinearInterpolator.MaxIteration">
      <summary>
            최대 반복 횟수
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LinearInterpolator.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.NevilleInterpolator">
      <summary>
            Neville 보간법
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NevilleInterpolator.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.NewtonInterpolator">
      <summary>
            Newton 보간법
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NewtonInterpolator.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.SplineInterpolator">
      <summary>
            Spline 보간법
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SplineInterpolator.Interpolate(System.Double[],System.Double[],System.Double[])">
      <summary>
            (x,y) 값으로 (t, ?) 값을 찾는다
            </summary>
      <param name="x">x 값</param>
      <param name="y">f(x)의 값</param>
      <param name="t">보간을 수행할 위치</param>
      <returns>f(t)의 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Optimizing.GoldenSection">
      <summary>
            함수의 지정된 구간에서의 최소 값을 가지는 X 를 Golden Section 방식으로 구한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Optimizing.OptimizingBase.FindMiminum(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            y = func(x) 함수의 [lower, upper] 구간에서 f(x)의 최소 값이 되는 x를 구합니다.
            </summary>
      <param name="func">함수</param>
      <param name="lower">구간의 하한</param>
      <param name="upper">구간의 상한</param>
      <param name="tryCount">시도횟수</param>
      <param name="tolerance">허용 오차</param>
      <returns>f(x)가 최소값이 되는 x 값, 검색 실패시에는 double.NaN을 반환한다</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.BetaRandomizer">
      <summary>
            베타 분포를 가지는 난수 발생기
            </summary>
      <remarks>
        <para>
            a, b가 둘다 1보다 클때,  f(0)=f(1)=0 이고 x = (a-1) / (a+b-2) 인 삼각형 산의 모양을 가진다.
            </para>
        <para>
            Gamma 분포가 하한을 결정하기 쉽지만, Beta 분포는 상,하한 분포를 결정하기 쉽다.
            a가 b보다 클 수록 1에  치우친 분포, b가 a보다 클 때에는 0에 치우친 분포를 나타낸다.
            </para>
        <para>
            평균 = a / (a+b), 분산 = a*b/((a+b)^2 * (a + b + 1))<br />
            a,b 의 값이 커질수록 표준편차가 작아져서 Narrow한 정규분포를 가지게 된다.
            </para>
      </remarks>
    </member>
    <member name="T:NSoft.NFramework.Numerics.RandomizerBase">
      <summary>
            기본 난수 발생기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.IRandomizer">
      <summary>
            난수발생기의 기본 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.IRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="F:NSoft.NFramework.Numerics.RandomizerBase._randomNumberFunc">
      <summary>
            난수를 발생시키는 함수 (사용자가 지정할 수 있다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Normalize(System.Double,System.Double,System.Double)">
      <summary>
            일양분포의 난수값을 정규분포의 난수값으로 변환한다.
            </summary>
      <param name="v">Uniform 분포에서의 변수</param>
      <param name="mean">정규분포의 평균</param>
      <param name="stdev">정규분포의 표준편차</param>
      <returns>난수 발생 분포(밀도 함수)를 정규분포로 변환했을 때의 난수 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Normalize(System.Double[],System.Double,System.Double)">
      <summary>
            일양분포의 난수값을 정규분포의 난수값으로 변환한다.
            </summary>
      <param name="v">Uniform 분포에서의 변수</param>
      <param name="mean">정규분포의 평균</param>
      <param name="stdev">정규분포의 표준편차</param>
      <returns>난수 발생 분포(밀도 함수)를 정규분포로 변환했을 때의 난수 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Fill(System.Double[])">
      <summary>
            난수를 발생시켜서 지정된 배열에 채운다
            </summary>
      <param name="v">난수를 담을 배열</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Fill(System.Double[],System.Double,System.Double)">
      <summary>
            난수를 발생시켜서 <see cref="M:NSoft.NFramework.Numerics.RandomizerBase.Normalize(System.Double[],System.Double,System.Double)" />를 수행한다.
            </summary>
      <param name="v">난수를 담을 배열</param>
      <param name="mean">정규분포의 평균</param>
      <param name="stdev">정규분포의 표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Reset(System.Nullable{System.Int32})">
      <summary>
            난수 발생 함수를 초기화 한다.
            </summary>
      <param name="seed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomizerBase.Reset">
      <summary>
            초기화한다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.RandomizerBase.RandomGenerator">
      <summary>
            난수 발생기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.RandomizerBase.RandomNumberFunc">
      <summary>
            난수를 발생시키는 함수
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BetaRandomizer.#ctor(System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="a">하한</param>
      <param name="b">상한</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BetaRandomizer.#ctor(System.Double,System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="a">하한</param>
      <param name="b">상한</param>
      <param name="randomNumberFunc">사용자 난수 발생기</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BetaRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BetaRandomizer.A">
      <summary>
            하한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BetaRandomizer.B">
      <summary>
            상한
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BetaRandomizer.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BetaRandomizer.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BetaRandomizer.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.BinominalRandomizer">
      <summary>
            시도 횟수와 확률이 주어지면 그 확률을 만족하는 횟수를 Random하게 반환한다.
            주사위의 한면이 나올 확률이 1/6 인데, 시도 횟수가 증가함에 따라 1/6에 수렴하게 된다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BinominalRandomizer.#ctor(System.Int32,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="trials">시도 횟수</param>
      <param name="probability">확률</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BinominalRandomizer.#ctor(System.Int32,System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="trials">시도 횟수</param>
      <param name="probability">확률</param>
      <param name="rndFunc">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.BinominalRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BinominalRandomizer.Probability">
      <summary>
            확률
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.BinominalRandomizer.Trials">
      <summary>
            시도 횟수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.CauchyRandomizer">
      <summary>
            Cauchy 분포를 가지는 Random 함수
            </summary>
      <remarks>
        <para>( 밀도 함수 f(x) = 1 / ( 1 + x * x) * PI)의 분포 )</para>
        <para>정규분포와 비슷하지만, 끝이 퍼져있고, 적분은 발산하므로, 확률이나 분산은 구할 수 없다.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.CauchyRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.CauchyRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.CauchyRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.CauchyRandomizer.NextUniform">
      <summary>
            일양분포를 가지도록 한 난수 발생 함수
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.ChiSquareRandomizer">
      <summary>
            Chi-Square distribution을 따르는 Random 함수
            </summary>
      <remarks>
        <para>
            확률변수 z1,z2,...zn이 독립적으로 표준정규분포에 따를 때 
            x^2 = z1^2 + z2^2 + ... + zn^2 의 분포를 자유도 chi의 카이제곱(chi^2) 분포라고 한다.
            </para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ChiSquareRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ChiSquareRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="n">단위시간당 발생하는 횟수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ChiSquareRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="n">단위시간당 발생하는 횟수</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ChiSquareRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ChiSquareRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ChiSquareRandomizer.NextGamma">
      <summary>
            감마 함수 분포를 가지는 난수발생기로 난수 발생
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.N">
      <summary>
            단위시간당 발생하는 횟수 (Chi-Square parameter number)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.Gamma">
      <summary>
            Gamma 분포를 가지는 Random Generator
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.ExponentialRandomizer">
      <summary>
            지수분포를 가지는 Random 함수 (분포의 평균은 1 / Lambda 가 된다) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ExponentialRandomizer.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ExponentialRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="lambda">분포의 평균은 1 / Lambda 가 된다</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ExponentialRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ExponentialRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자 
            </summary>
      <param name="lambda">분포의 평균은 1 / Lambda 가 된다</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ExponentialRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.ExponentialRandomizer.Lambda">
      <summary>
            난수의 평균은 1 / lambda 가 된다. 기본값은 1 이다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.FastRandom">
      <summary>
            A fast random number generator for .NET
            Colin Green, January 2005
            
            Key points:
             1) Based on a simple and fast xor-shift pseudo random number generator (RNG) specified in: 
             Marsaglia, George. (2003). Xorshift RNGs.
             http://www.jstatsoft.org/v08/i14/xorshift.pdf
             
             This particular implementation of xorshift has a period of 2^128-1. See the above paper to see
             how this can be easily extened if you need a longer period. At the time of writing I could find no 
             information on the period of System.Random for comparison.
            
             2) Faster than System.Random. Up to 15x faster, depending on which methods are called.
            
             3) Direct replacement for System.Random. This class implements all of the methods that System.Random 
             does plus some additional methods. The like named methods are functionally equivalent.
             
             4) Allows fast re-initialisation with a seed, unlike System.Random which accepts a seed at construction
             time which then executes a relatively expensive initialisation routine. This provides a vast speed improvement
             if you need to reset the pseudo-random number sequence many times, e.g. if you want to re-generate the same
             sequence many times. An alternative might be to cache random numbers in an array, but that approach is limited
             by memory capacity and the fact that you may also want a large number of different sequences cached. Each sequence
             can each be represented by a single seed value (int) when using FastRandom.
             
             Notes.
             A further performance improvement can be obtained by declaring local variables as static, thus avoiding 
             re-allocation of variables on each call. However care should be taken if multiple instances of
             FastRandom are in use or if being used in a multi-threaded environment.
            
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.#ctor">
      <summary>
            Initialises a new instance using time dependent seed.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.#ctor(System.Int32)">
      <summary>
            Initialises a new instance using an int value as seed.
            This constructor signature is provided to maintain compatibility with
            System.Random
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.Reinitialize(System.Int32)">
      <summary>
            Reinitializes using an int value as a seed.
            </summary>
      <param name="seed">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.NextUInt">
      <summary>
            Generates a uint. Values returned are over the full range of a uint, 
            uint.MinValue to uint.MaxValue, including the min and max values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.Next">
      <summary>
            Generates a random int. Values returned are over the range 0 to int.MaxValue-1.
            MaxValue is not generated to remain functionally equivalent to System.Random.Next().
            If you require an int from the full range, including negative values then call
            NextUint() and cast the value to an int.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.Next(System.Int32)">
      <summary>
            Generates a random int over the range 0 to upperBound-1, and not including upperBound.
            </summary>
      <param name="upperBound">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.Next(System.Int32,System.Int32)">
      <summary>
            Generates a random int over the range lowerBound to upperBound-1, and not including upperBound.
            upperBound must be &gt;= lowerBound. lowerBound may be negative.
            </summary>
      <param name="lowerBound">
      </param>
      <param name="upperBound">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.NextDouble">
      <summary>
            Generates a random double. Values returned are from 0.0 up to but not including 1.0.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.NextBytes(System.Byte[])">
      <summary>
            Fills the provided byte array with random bytes.
            Increased performance is achieved by dividing and packaging bits directly from the
            random number generator and storing them in 4 byte 'chunks'.
            </summary>
      <param name="buffer">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FastRandom.NextBool">
      <summary>
            Generates random bool. 
            Increased performance is achieved by buffering 32 random bits for 
            future calls. Thus the random number generator is only invoked once
            in every 32 calls.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.FRandomizer">
      <summary>
            F 함수의 분포를 가지는 난수 발생기
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FRandomizer.#ctor(System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="n1">첫번째 <see cref="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.N" /> 값 </param>
      <param name="n2">두번째 <see cref="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.N" /> 값 </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="c">모든<see cref="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.N" /> 값 </param>
      <param name="randomNumberFunc">사용자 정의 난수 발생기</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생기</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.FRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.FRandomizer.N1">
      <summary>
            첫번째 <see cref="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.N" /> 값 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.FRandomizer.N2">
      <summary>
            두번째 <see cref="P:NSoft.NFramework.Numerics.ChiSquareRandomizer.N" /> 값 
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.GammaRandomizer">
      <summary>
            Gamma 분포를 가지는 Random Generator
            </summary>
      <remarks>
        <para>
            평균하여 단위시간에 1회 일어나는 독립 사상을 어떤 시각부터 관측했을 때 정확히 a 개째의 사상이 일어나기 까지의 시간은 감마분포에 따른다.
            </para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GammaRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GammaRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="n">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GammaRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="n">
      </param>
      <param name="randomNumberFunc">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GammaRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GammaRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.GammaRandomizer.N">
      <summary>
            단위시간당 발생하는 횟수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.GeometricRandomizer">
      <summary>
            기하 분포를 따르는 난수 발생기
            </summary>
      <remarks>
            확률 p로 당첨되는 현상금에 n회째의 응모로 처음 당첨될 확률은 Pn = p(1-p)^n-1 이다. 이 분포를 기하분포라 한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GeometricRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GeometricRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="p">확률</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GeometricRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="p">확률</param>
      <param name="randumNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GeometricRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randumNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.GeometricRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.GeometricRandomizer.Probability">
      <summary>
             확률 (기본값은 0.5)
             </summary>
      <exception cref="T:System.ArgumentException">확률값이 0~1 사이가 아니면 예외가 발생한다.</exception>
    </member>
    <member name="T:NSoft.NFramework.Numerics.LogisticsRandomizer">
      <summary>
            logistic 분포를 따르는 난수 발생기
            </summary>
      <remarks>
        <para>
            분포 함수 F(x) = 1 / ( 1 + e ^-x), 밀도 함수 f(x) = e^-x / ( 1 + e^-x )^2 의 분포
            </para>
        <para>평균 0, 분산 pi^2/3 이다. 분포는 정규분포에 가깝지만 끝은 정규 분포보다 길다.</para>
        <para>역함수 F-1(x) = log((1-x)/x) 를 이용한다.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogisticsRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogisticsRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogisticsRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogisticsRandomizer.Normalize(System.Double,System.Double,System.Double)">
      <summary>
            일양분포의 난수값을 정규분포의 난수값으로 변환한다.
            </summary>
      <param name="v">Uniform 분포에서의 변수</param>
      <param name="mean">정규분포의 평균</param>
      <param name="stdev">정규분포의 표준편차</param>
      <returns>난수 발생 분포(밀도 함수)를 정규분포로 변환했을 때의 난수 값</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.LogNormalRandomizer">
      <summary>
            Log Normal 분포
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogNormalRandomizer.#ctor(System.Double,System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="mean">평균</param>
      <param name="variance">분산</param>
      <param name="rndFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogNormalRandomizer.#ctor(System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="mean">평균</param>
      <param name="variance">분산</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogNormalRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="rndFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogNormalRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogNormalRandomizer.Reset(System.Nullable{System.Int32})">
      <summary>
            난수 발생 함수를 초기화 한다.
            </summary>
      <param name="seed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.LogNormalRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.LogNormalRandomizer.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.LogNormalRandomizer.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.LogNormalRandomizer.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.LogNormalRandomizer.Normal">
      <summary>
            Instance of <see cref="T:NSoft.NFramework.Numerics.NormalRandomizer" /> : N(Mean, StDev)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.LogNormalRandomizer.NormalMean">
      <summary>
            정규분포 상의 평균 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.LogNormalRandomizer.NormalVariance">
      <summary>
            정규분포상의 분산
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.NormalRandomizer">
      <summary>
            정규분포를 가지는 난수 발생기
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NormalRandomizer.#ctor">
      <summary>
            N(0,1) 의 정규분포를 가지는 난수발생기 생성
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NormalRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            N(0,1) 의 정규분포를 가지는 난수발생기 생성
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NormalRandomizer.#ctor(System.Double,System.Double,System.Func{System.Double})">
      <summary>
            N(mean,stdev) 의 정규분포를 가지는 난수발생기 생성
            </summary>
      <param name="mean">정규분포의 평균 값</param>
      <param name="stdev">정규분포의 표준편차</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NormalRandomizer.#ctor(System.Double,System.Double)">
      <summary>
            N(mean,stdev) 의 정규분포를 가지는 난수발생기 생성
            </summary>
      <param name="mean">정규분포의 평균 값</param>
      <param name="stdev">정규분포의 표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.NormalRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.NormalRandomizer.Mean">
      <summary>
            평균
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.NormalRandomizer.StDev">
      <summary>
            표준편차
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.NormalRandomizer.Variance">
      <summary>
            분산
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.ParetoRandomizer">
      <summary>
            Pareto 분포를 가지는 난수발생기
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ParetoRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ParetoRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ParetoRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="c">Pareto Shape Parameter (default: 1.0) (양수여야 합니다.)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ParetoRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자 
            </summary>
      <param name="c">Pareto Shape Parameter (default: 1.0) (양수여야 합니다.)</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.ParetoRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.ParetoRandomizer.C">
      <summary>
            Pareto Shape Parameter (default: 1.0) (양수여야 합니다.)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.PoissonRandomizer">
      <summary>
            시간당 발생하는 횟수의 평균이 lambda인 Poisson 분포를 가지는 Random 함수
            </summary>
      <remarks>
        <para>
            단위시간당 일어난 횟수의 평균값을 가지고 실제 단위사간당 일어나는 횟수에 대한 난수를 발생시킨다.
            </para>
        <para>
            단위시간에 접수창고에 오는 손님의 수, 고속도로에서 단위시간에 통과하는 차량의 수 등은 Poisson 분포에 따른다.
            </para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PoissonRandomizer.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PoissonRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생기</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PoissonRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="mean">단위시간당 발생하는 평균 횟수 (기본값은 1.0)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PoissonRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="mean">단위시간당 발생하는 평균 횟수 (기본값은 1.0)</param>
      <param name="randomNumberFunc">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PoissonRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.PoissonRandomizer.Mean">
      <summary>
            단위시간당 발생하는 평균 횟수 (기본값은 1.0)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.PowerRandomizer">
      <summary>
            Power distribution을 가지는 난수 발생기
            </summary>
      <remarks>
        <para>
            [0,1) 의 Uniform Distribution을 n+1개 만들면 그 최대값은 밀도 함수 f(x) = (n+1)*X^n ( 0 &lt;= x &lt; 1 )을 따른다.
            </para>
        <para>
            거듭제곱 분포 함수 F(x) = x^(n+1) 의 역함수인 F-1(x) = x^(1/(n+1)) 로 난수를 발생시킨다.
            </para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PowerRandomizer.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PowerRandomizer.#ctor(System.Int32)">
      <summary>
            생성자
            </summary>
      <param name="n">Power Parameter (default: 1) (양수만 가능)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PowerRandomizer.#ctor(System.Int32,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="n">Power Parameter (default: 1) (양수만 가능)</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PowerRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.PowerRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.PowerRandomizer.N">
      <summary>
            Power Parameter (default: 1) (양수만 가능)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.RandomTool">
      <summary>
            난수 발생을 위한 Utility 클래스입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomTool.FillValues(NSoft.NFramework.Numerics.IRandomizer,System.Double[],System.Int32)">
      <summary>
            난수발생기를 이용하여 <paramref name="values" /> 배열에 난수를 <paramref name="count" /> 갯수만큼 할당합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomTool.FillValues(NSoft.NFramework.Numerics.IRandomizer,System.Double[])">
      <summary>
            난수발생기를 이용하여 <paramref name="values" /> 배열에 난수를 할당합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.RandomTool.GenerateValues(NSoft.NFramework.Numerics.IRandomizer,System.Int32)">
      <summary>
            난수발생기로 지정한 갯수만큼 난수를 발생시킵니다.
            </summary>
      <param name="randomizer">
      </param>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.TRandomizer">
      <summary>
            N 자유도를 가지는 T 분포를 가지는 Random Generator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="n">자유도 (default : 1) (양수만 가능)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TRandomizer.#ctor(System.Int32,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="n">자유도 (default : 1) (양수만 가능)</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.TRandomizer.N">
      <summary>
            자유도 (T-Deviation parameter) (default : 1) (양수만 가능)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.TriangularRandomizer">
      <summary>
            삼각 분포의 난수발생기
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.#ctor(System.Double,System.Double,System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="lower">하한</param>
      <param name="upper">상한</param>
      <param name="m">중심 (삼각형의 꼭지점)</param>
      <param name="randomNumberFunc">사용자 정의 난수 발생 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.#ctor(NSoft.NFramework.Numerics.Interval{System.Double},System.Double)">
      <summary>
            생성자
            </summary>
      <param name="interval">상하한 구간</param>
      <param name="m">중심 (삼각형의 꼭지점)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="lower">하한</param>
      <param name="upper">상한</param>
      <param name="m">중심 (삼각형의 꼭지점)</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.SetParameters(System.Double,System.Double,System.Double)">
      <summary>
            상하한 구간 설정
            </summary>
      <param name="lower">
      </param>
      <param name="upper">
      </param>
      <param name="m">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.GetIntervalLength">
      <summary>
            상하한 구간 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.TriangularRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.TriangularRandomizer.LowerBound">
      <summary>
            하한 값 (기본값은 0.0)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.TriangularRandomizer.UpperBound">
      <summary>
            상한 값 (기본값은 1.0)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.TriangularRandomizer.Mode">
      <summary>
            삼각형의 꼭지점의 위치 (기본값은 0.5)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.UniformRandomizer">
      <summary>
            [LOW, HIGH] 범위의 Uniform(일양) 분포를 가지는 난수 발생기 (기본은 [0, 1] 범위이다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.UniformRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.UniformRandomizer.#ctor(System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="min">하한값</param>
      <param name="max">상한값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.UniformRandomizer.#ctor(System.Double,System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="min">하한값</param>
      <param name="max">상한값</param>
      <param name="randomNumberFunc">난수 발생을 담당하는 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.UniformRandomizer.#ctor(NSoft.NFramework.Numerics.Interval{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="interval">상하한 구간</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.UniformRandomizer.#ctor(NSoft.NFramework.Numerics.Interval{System.Double},System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="interval">상하한 구간</param>
      <param name="randomNumberFunc">난수 발생을 담당하는 함수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.UniformRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.UniformRandomizer.Range">
      <summary>
            Uniform 분포의 상하한 구간을 나타낸다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.WeibullRandomizer">
      <summary>
            Weibull 분포를 따르는 Random Generator
            </summary>
      <remarks>
        <para>
            기계 구입 후 시간에 따라 발생하는 고장 확률에 대한 분포를 표현한다.
            </para>
        <para>
            alpha &lt; 1 이면 초기 고장형, 
            alpha = 1 이면 지수분포이며, 우발 고장형,
            alpha &gt; 1 이면 마모 고장형이라 한다.
            </para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.WeibullRandomizer.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.WeibullRandomizer.#ctor(System.Double)">
      <summary>
            생성자
            </summary>
      <param name="alpha">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.WeibullRandomizer.#ctor(System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="randomNumberFunc">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.WeibullRandomizer.#ctor(System.Double,System.Func{System.Double})">
      <summary>
            생성자
            </summary>
      <param name="alpha">
      </param>
      <param name="randomNumberFunc">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.WeibullRandomizer.Next">
      <summary>
            난수 발생
            </summary>
      <returns>난수</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.WeibullRandomizer.Alpha">
      <summary>
            alpha &lt; 1 이면 초기 고장형, 
            alpha = 1 이면 지수분포이며, 우발 고장형, 
            alpha &gt; 1 이면 마모 고장형이라 한다.
            기본값은 1.0 이다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Signals.SignalGenerator">
      <summary>
             Generic Function Sampling and Quantization Provider
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantInterval``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
      <summary>
            Samples a function equidistant within the provided interval.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
      <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantInterval``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
      <summary>
            Samples a function equidistant within the provided interval.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
      <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <param name="samplePoints">The real domain points where the samples are taken at.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantPeriodic``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
      <summary>
            Samples a periodic function equidistant within one period, but omits the last sample such that the sequence
            can be concatenated together.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="periodLength">The real domain full period length.</param>
      <param name="periodOffset">The real domain offset where to start the sampling period.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantPeriodic``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
      <summary>
            Samples a periodic function equidistant within one period, but omits the last sample such that the sequence
            can be concatenated together.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="periodLength">The real domain full period length.</param>
      <param name="periodOffset">The real domain offset where to start the sampling period.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <param name="samplePoints">The real domain points where the samples are taken at.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantStartingAt``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
      <summary>
            Samples a function equidistant starting from the provided location with a fixed step length.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="start">The real domain location offset where to start sampling.</param>
      <param name="step">The real domain step length between the equidistant samples.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantStartingAt``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
      <summary>
            Samples a function equidistant starting from the provided location with a fixed step length.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="start">The real domain location offset where to start sampling.</param>
      <param name="step">The real domain step length between the equidistant samples.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <param name="samplePoints">The real domain points where the samples are taken at.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantContinuous``1(System.Func{System.Double,``0},System.Double,System.Double)">
      <summary>
            Samples a function equidistant continuously starting from the provided location with a fixed step length.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="start">The real domain location offset where to start sampling.</param>
      <param name="step">The real domain step length between the equidistant samples.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample enumerator.</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.EquidistantToFunction``1(System.Func{System.Double,``0},System.Double,System.Double)">
      <summary>
            Samples a function equidistant with the provided start and step length to an integer-domain function
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="start">The real domain location where to start sampling.</param>
      <param name="step">The real domain step length between the equidistant samples.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated samples integer-domain function.</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.Random``1(System.Func{System.Double,``0},NSoft.NFramework.Numerics.Distributions.IContinuousDistribution,System.Int32)">
      <summary>
            Samples a function randomly with the provided distribution.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="distribution">Random distribution of the real domain sample points.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.Random``1(System.Func{System.Double,``0},NSoft.NFramework.Numerics.Distributions.IContinuousDistribution,System.Int32,System.Double[]@)">
      <summary>
            Samples a function randomly with the provided distribution.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="distribution">Random distribution of the real domain sample points.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <param name="samplePoints">The real domain points where the samples are taken at.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Signals.SignalGenerator.Random``1(System.Func{System.Double,System.Double,``0},NSoft.NFramework.Numerics.Distributions.IContinuousDistribution,System.Int32)">
      <summary>
            Samples a two-domain function randomly with the provided distribution.
            </summary>
      <param name="function">The real-domain function to sample.</param>
      <param name="distribution">Random distribution of the real domain sample points.</param>
      <param name="sampleCount">The number of samples to generate.</param>
      <typeparam name="T">The value type of the function to sample.</typeparam>
      <returns>The generated sample vector.</returns>
      <exception cref="T:System.ArgumentNullException" />
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="T:NSoft.NFramework.Numerics.SpecialFunctions">
      <summary>
            특수 함수 모음 (Beta, Gamma 등)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.BetaLn(System.Double,System.Double)">
      <summary>
            Log Beta Function
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.BetaLn(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Log Beta Function
            </summary>
      <param name="xs">
      </param>
      <param name="ys">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Beta(System.Double,System.Double)">
      <summary>
            Beta Function
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Beta(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Beta Function
            </summary>
      <param name="xs">
      </param>
      <param name="ys">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.BetaIncomplete(System.Double,System.Double,System.Double)">
      <summary>
            Returns the lower incomplete (unregularized) beta function
            I_x(a,b) = int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
      <param name="a">The first Beta parameter, a positive real number.</param>
      <param name="b">The second Beta parameter, a positive real number.</param>
      <param name="x">The upper limit of the integral.</param>
      <returns>The lower incomplete (unregularized) beta function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double)">
      <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
      <param name="a">The first Beta parameter, a positive real number.</param>
      <param name="b">The second Beta parameter, a positive real number.</param>
      <param name="x">The upper limit of the integral.</param>
      <returns>The regularized lower incomplete beta function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
      <param name="a">The first Beta parameter, a positive real number.</param>
      <param name="b">The second Beta parameter, a positive real number.</param>
      <param name="x">The upper limit of the integral.</param>
      <param name="maxIteration">최대 반복 횟수</param>
      <returns>The regularized lower incomplete beta function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.ChiSquare(System.Double)">
      <summary>
            ChiSquare 함수
            </summary>
      <param name="x">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.ChiSquare(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            ChiSquare 함수
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.ChiSquare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            ChiSquare 함수
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <param name="selector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Erf(System.Double)">
      <summary>Calculates the error function.</summary>
      <param name="x">The value to evaluate.</param>
      <returns>the error function evaluated at given value.</returns>
      <remarks>
        <list type="bullet">
          <item>returns 1 if <c>x == Double.PositiveInfinity</c>.</item>
          <item>returns -1 if <c>x == Double.NegativeInfinity</c>.</item>
        </list>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Erfc(System.Double)">
      <summary>Calculates the complementary error function.</summary>
      <param name="x">The value to evaluate.</param>
      <returns>the complementary error function evaluated at given value.</returns>
      <remarks>
        <list type="bullet">
          <item>returns 0 if <c>x == Double.PositiveInfinity</c>.</item>
          <item>returns 2 if <c>x == Double.NegativeInfinity</c>.</item>
        </list>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.ErfInv(System.Double)">
      <summary>Calculates the inverse error function evaluated at z.</summary>
      <returns>The inverse error function evaluated at given value.</returns>
      <remarks>
        <list type="bullet">
          <item>returns Double.PositiveInfinity if <c>z &gt;= 1.0</c>.</item>
          <item>returns Double.NegativeInfinity if <c>z &lt;= -1.0</c>.</item>
        </list>
      </remarks>
      <summary>Calculates the inverse error function evaluated at z.</summary>
      <param name="z">value to evaluate.</param>
      <returns>the inverse error function evaluated at Z.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.ErfcInv(System.Double)">
      <summary>Calculates the complementary inverse error function evaluated at z.</summary>
      <returns>The complementary inverse error function evaluated at given value.</returns>
      <remarks> We have tested this implementation against the arbitrary precision mpmath library
            and found cases where we can only guarantee 9 significant figures correct.
                <list type="bullet"><item>returns Double.PositiveInfinity if <c>z &lt;= 0.0</c>.</item><item>returns Double.NegativeInfinity if <c>z &gt;= 2.0</c>.</item></list></remarks>
      <summary>calculates the complementary inverse error function evaluated at z.</summary>
      <param name="z">value to evaluate.</param>
      <returns>the complementary inverse error function evaluated at Z.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Factorial(System.Int32)">
      <summary>
            Computes the factorial function x -&gt; x! of an integer number &gt; 0. The function can represent all number up
            to 22! exactly, all numbers up to 170! using a double representation. All larger values will overflow.
            </summary>
      <returns>A value value! for value &gt; 0</returns>
      <remarks>
            If you need to multiply or divide various such factorials, consider using the logarithmic version 
            <see cref="M:NSoft.NFramework.Numerics.SpecialFunctions.FactorialLn(System.Int32)" /> instead so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)" />. This will also circumvent the problem that
            factorials become very large even for small parameters.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.FactorialLn(System.Int32)">
      <summary>
            Computes the logarithmic factorial function x -&gt; ln(x!) of an integer number &gt; 0.
            </summary>
      <returns>A value value! for value &gt; 0</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Binomial(System.Int32,System.Int32)">
      <summary>
            Computes the binomial coefficient: n choose k.
            </summary>
      <param name="n">A nonnegative value n.</param>
      <param name="k">A nonnegative value h.</param>
      <returns>The binomial coefficient: n choose k.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.BinomialLn(System.Int32,System.Int32)">
      <summary>
            Computes the natural logarithm of the binomial coefficient: ln(n choose k).
            </summary>
      <param name="n">A nonnegative value n.</param>
      <param name="k">A nonnegative value h.</param>
      <returns>The logarithmic binomial coefficient: ln(n choose k).</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Multinomial(System.Int32,System.Int32[])">
      <summary>
            Computes the multinomial coefficient: n choose n1, n2, n3, ...
            </summary>
      <param name="n">A nonnegative value n.</param>
      <param name="ni">An array of nonnegative values that sum to <paramref name="n" />.</param>
      <returns>The multinomial coefficient.</returns>
      <exception cref="T:System.ArgumentNullException">if <paramref name="ni" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">If <paramref name="n" /> or any of the <paramref name="ni" /> are negative.</exception>
      <exception cref="T:System.ArgumentException">If the sum of all <paramref name="ni" /> is not equal to <paramref name="n" />.</exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaLn(System.Double)">
      <summary>
            Computes the logarithm of the Gamma function. 
            </summary>
      <param name="z">The argument of the gamma function.</param>
      <returns>The logarithm of the gamma function.</returns>
      <remarks>
        <para>This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).</para>
        <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 14 floating point digits.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Gamma(System.Double)">
      <summary>
            Computes the Gamma function. 
            </summary>
      <param name="z">The argument of the gamma function.</param>
      <returns>The logarithm of the gamma function.</returns>
      <remarks>
        <para>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which should achieve an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </para>
        <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 13 floating point digits.</para>
      </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaUpperRegularized(System.Double,System.Double)">
      <summary>
            Returns the upper incomplete regularized gamma function
            Q(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
      <param name="a">The argument for the gamma function.</param>
      <param name="x">The lower integral limit.</param>
      <returns>The upper incomplete regularized gamma function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaUpperIncomplete(System.Double,System.Double)">
      <summary>
            Returns the upper incomplete gamma function
            Gamma(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
      <param name="a">The argument for the gamma function.</param>
      <param name="x">The lower integral limit.</param>
      <returns>The upper incomplete gamma function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaLowerIncomplete(System.Double,System.Double)">
      <summary>
            Returns the lower incomplete gamma function
            gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
      <param name="a">The argument for the gamma function.</param>
      <param name="x">The upper integral limit.</param>
      <returns>The lower incomplete gamma function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaLowerRegularized(System.Double,System.Double)">
      <summary>
            Returns the lower incomplete regularized gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
      <param name="a">The argument for the gamma function.</param>
      <param name="x">The upper integral limit.</param>
      <returns>The lower incomplete gamma function.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaLn(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            GammaLn function
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GammaLn``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            GammaLn function
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <param name="selector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Gamma(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Gamma function
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Gamma``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Gamma function
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <param name="selector">source 중에 인자로 쓸 요소를 선택하는 선택자</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Harmonic(System.Int32)">
      <summary>
            Computes the <paramref name="t" />'th Harmonic number.
            </summary>
      <param name="t">The Harmonic number which needs to be computed.</param>
      <returns>The t'th Harmonic number.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.GeneralHarmonic(System.Int32,System.Double)">
      <summary>
            Compute the generalized harmonic number of order n of m. (1 + 1/2^m + 1/3^m + ... + 1/n^m)
            </summary>
      <param name="n">The order parameter.</param>
      <param name="m">The power parameter.</param>
      <returns>General Harmonic number.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.DiGamma(System.Double)">
      <summary>
            Computes the Digamma function which is mathematically defined as the derivative of the logarithm of the gamma function.
            This implementation is based on
                Jose Bernardo
                Algorithm AS 103:
                Psi ( Digamma ) Function,
                Applied Statistics,
                Volume 25, Number 3, 1976, pages 315-317.
            Using the modifications as in Tom Minka's lightspeed toolbox.
            </summary>
      <param name="x">The argument of the digamma function.</param>
      <returns>The value of the DiGamma function at <paramref name="x" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.DiGammaInv(System.Double)">
      <summary>
        <para>Computes the inverse Digamma function: this is the inverse of the logarithm of the gamma function. This function will
            only return solutions that are positive.</para>
        <para>This implementation is based on the bisection method.</para>
      </summary>
      <param name="p">The argument of the inverse digamma function.</param>
      <returns>The positive solution to the inverse DiGamma function at <paramref name="p" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Logit(System.Double)">
      <summary>
            Computes the logit function. see: http://en.wikipedia.org/wiki/Logit
            </summary>
      <param name="p">The parameter for which to compute the logit function. This number should be
            between 0 and 1.</param>
      <returns>The logarithm of <paramref name="p" /> divided by 1.0 - <paramref name="p" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Logistic(System.Double)">
      <summary>
            Computes the logistic function. see: http://en.wikipedia.org/wiki/Logistic
            </summary>
      <param name="p">The parameter for which to compute the logistic function.</param>
      <returns>The logistic function of <paramref name="p" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.ExponentialMinusOne(System.Double)">
      <summary>
            Numerically stable exponential minus one, i.e. <code>x -&gt; exp(x)-1</code></summary>
      <param name="power">A number specifying a power.</param>
      <returns>Returns <code>exp(power)-1</code>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Hypotenuse(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -&gt; sqrt(a^2 + b^2)</code></summary>
      <param name="a">The length of side a of the triangle.</param>
      <param name="b">The length of side b of the triangle.</param>
      <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Hypotenuse(System.Double,System.Double)">
      <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -&gt; sqrt(a^2 + b^2)</code></summary>
      <param name="a">The length of side a of the triangle.</param>
      <param name="b">The length of side b of the triangle.</param>
      <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.SpecialFunctions.Hypotenuse(System.Single,System.Single)">
      <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -&gt; sqrt(a^2 + b^2)</code></summary>
      <param name="a">The length of side a of the triangle.</param>
      <param name="b">The length of side b of the triangle.</param>
      <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Statistics.Bucket">
      <summary>
            히스토그램 (<see cref="T:NSoft.NFramework.Numerics.Statistics.Histogram" />) 을 구성하는 Bucket 을 나타내는 클래스입니다.
            하나의 Bucket은 구간 [하한, 상한) (하한(inclusive), 상한(exclusive)) 로 표현됩니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Bucket.Copy(NSoft.NFramework.Numerics.Statistics.Bucket)">
      <summary>
            원본 Bucket 정보를 이용하여, 새로운 Bucket을 빌드합니다.
            </summary>
      <param name="src">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="lowerBound">하한 (inclusive)</param>
      <param name="upperBound">상한 (exclusive)</param>
      <param name="count">변량 수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Bucket.Contains(System.Double)">
      <summary>
        <paramref name="x" /> 가 현 Bucket 구간에 속하면 0, LowerBound 아래이면 -1,  UpperBound 보다 크면 1을 반환한다.
            </summary>
      <param name="x">The point to check.</param>
      <returns>0 if the point falls within the bucket boundaries; -1 if the point is
            smaller than the bucket, +1 if the point is larger than the bucket.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Bucket.CompareTo(NSoft.NFramework.Numerics.Statistics.Bucket)">
      <summary>
            현재 개체를 동일한 형식의 다른 개체와 비교합니다.
            </summary>
      <returns>
            비교되는 개체의 상대 순서를 나타내는 값입니다.반환 값에는 다음과 같은 의미가 있습니다.값 의미 음수 이 개체는 <paramref name="other" /> 매개 변수보다 작습니다.0 이 개체는 <paramref name="other" />와 같습니다. 양수 이 개체는 <paramref name="other" />보다 큽니다. 
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Bucket.Equals(NSoft.NFramework.Numerics.Statistics.Bucket)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Bucket.DefaultBucketComparer">
      <summary>
            Default Comparer
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Bucket.LowerBound">
      <summary>
            Bucket 구간의 하한 (구간에 포함됩니다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Bucket.UpperBound">
      <summary>
            Bucket 구간의 상한 (구간에 포함되지 않습니다.)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Bucket.Count">
      <summary>
            Bucket 구간에 속한 변량의 수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Bucket.Width">
      <summary>
            Bucket 구간의 폭
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Bucket.Median">
      <summary>
            Bucket의 중간 값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics">
      <summary>
            변량에 대한 기본 통계 정보를 한번에 계산합니다.
            계산하는 정보로는 평균, 분산, 표준편차, 분포의 기울기, 중앙값, 최빈값, 첨예도, 최대/최소값 등을 한꺼번에 계산합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics" /> class. 
            </summary>
      <param name="source">
      </param>
      <param name="highAccuracy">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics" /> class. 
            </summary>
      <param name="source">
      </param>
      <param name="highAccuracy">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Count">
      <summary>
            Gets the size of the sample.
            </summary>
      <value>The size of the sample.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Mean">
      <summary>
            Gets the sample mean.
            </summary>
      <value>The sample mean.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Variance">
      <summary>
            Gets the sample variance.
            </summary>
      <value>The sample variance.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.StandardDeviation">
      <summary>
            Gets the sample standard deviation.
            </summary>
      <value>The sample standard deviation.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Skewness">
      <summary>
            Gets the sample skewness.
            </summary>
      <value>The sample skewness.</value>
      <remarks>Returns zero if <see cref="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Count" /> is less than three. </remarks>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Median">
      <summary>
            Gets the sample median.
            </summary>
      <value>The sample median.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Kurtosis">
      <summary>
            Gets the sample kurtosis.
            </summary>
      <value>The sample kurtosis.</value>
      <remarks>Returns zero if <see cref="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Count" /> is less than four. </remarks>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Maximum">
      <summary>
            Gets the maximum sample value.
            </summary>
      <value>The maximum sample value.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.DescriptiveStatistics.Minimum">
      <summary>
            Gets the minimum sample value.
            </summary>
      <value>The minimum sample value.</value>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Statistics.Histogram">
      <summary>
            데이타의 빈도를 Histogram으로 표현하기 위한 클래스입니다.
            
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Histogram.AddData(System.Double)">
      <summary>
            변량 추가
            </summary>
      <param name="d">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Histogram.AddData(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Data를 추가합니다.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Histogram.AddBucket(NSoft.NFramework.Numerics.Statistics.Bucket)">
      <summary>
        <paramref name="bucket" /> 을 현재 Histogram에 추가합니다.
            </summary>
      <param name="bucket">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Histogram.ResetData">
      <summary>
            모든 변량들의 빈도수를 Clear합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Histogram.StemLeaf(System.Int32)">
      <summary>
            Formats the contents of the Histogram into a simple acsii stem-leaf
            diagram.
            </summary>
      <remarks>If the bin boundaries are b0, b1, b2,...,bn-1, and the 
            counts for these bins are c1, c2,...,cn, respectively,
            then the this method returns a string with the following 
            format:
            Number SmallerCount:   ***number SmallerCount
            [b0,b1):     *****c1
            [b1,b2):     **********c2
            [b2,b3):     ***************c3
            .
            .
            .
            [bn-2,bn-1]: *****cn
            Number LargerCount : *****number LargerCount.
            Where the number of '*'s is for a particular bin is equal to
            the count for that bin minus one.</remarks>
      <returns>Fomatted string.</returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Histogram.LowerBound">
      <summary>
            Histogram의 하한 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Histogram.UpperBound">
      <summary>
            Histogram의 상한 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Histogram.Item(System.Int32)">
      <summary>
            지정된 인덱스의 Bucket
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Histogram.BucketCount">
      <summary>
            전체 Bucket 갯수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Histogram.DataCount">
      <summary>
            모든 변량의 갯수
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Statistics.Percentile">
      <summary>
            Class to calculate percentiles.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Percentile.Compute(System.Double)">
      <summary>
            Computes the percentile.
            </summary>
      <param name="percentile">The percentile, must be between 0.0 and 1.0 (inclusive).</param>
      <returns>the requested percentile.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Statistics.Percentile.Compute(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            주어진 값의 percentile을 계산합니다.
            </summary>
      <param name="percentiles">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Statistics.Percentile.Method">
      <summary>
            Percentiles 계산 방식
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Statistics.PercentileMethod.Nist">
      <summary>
            Using the method recommened my NIST,
            http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Statistics.PercentileMethod.Nearest">
      <summary>
            Using the nearest rank, http://en.wikipedia.org/wiki/Percentile#Nearest_Rank
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Statistics.PercentileMethod.Excel">
      <summary>
            Using the same method as Excel does, 
            http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.Statistics.PercentileMethod.Interpolation">
      <summary>
            두 개의 근접 Rank를 선형 보간법을 사용한다.
            http://en.wikipedia.org/wiki/Percentile#Linear_Interpolation_Between_Closest_Ranks
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Numerics.MathTool">
      <summary>
            Mathematical Methods
            </summary>
      <summary>
            Mathematical Methods
            </summary>
      <summary>
            Mathematical Methods
            </summary>
      <summary>
            수학 함수를 제공합니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Epsilon">
      <summary>
            Double에서의 Epsilon (1.0E-10)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.E">
      <summary>The number e</summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Pi">
      <summary>The number pi</summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Pi2">
      <summary>The number 2*pi</summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.PiOver2">
      <summary>
            PI / 2.0
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.SquarePI">
      <summary>
            PI 제곱 (pi^2)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Degree">
      <summary>
            각도 (degree 를 radian으로 변환하기 위한 factor) (Pi / 180)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Catalan">
      <summary>The Catalan constant</summary>
      <remarks>Sum(k=0 -&gt; inf){ (-1)^k/(2*k + 1)2 }</remarks>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.EulerMascheroni">
      <summary>The Euler-Mascheroni constant</summary>
      <remarks>lim(n -&gt; inf){ Sum(k=1 -&gt; n) { 1/k - log(n) } }</remarks>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Glaisher">
      <summary>The Glaisher constant</summary>
      <remarks>e^(1/12 - Zeta(-1))</remarks>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Khinchin">
      <summary>The Khinchin constant</summary>
      <remarks>prod(k=1 -&gt; inf){1+1/(k*(k+2))^log(k,2)}</remarks>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.DefaultTryCount">
      <summary>
            해를 찾기 위한 기본 시되 횟수 (100회)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.BlockSize">
      <summary>
            블록의 기본 크기 (구간을 이용한 이동평균이나 합을 구할때 사용)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs``1(``0)">
      <summary>
            Absoluete value
            </summary>
      <typeparam name="T">numeric type</typeparam>
      <param name="value">value to get absolute value</param>
      <returns>absolute value</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <param name="selector">selector for projection.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <param name="selector">selector for projection.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <param name="selector">selector for projection.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <param name="selector">selector for projection.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Abs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Return enumerable of absolute value.
            </summary>
      <param name="source">sequence to get absolute value.</param>
      <param name="selector">selector for projection.</param>
      <returns>sequence of absolute value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.LongSum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Overflow 를 방지 하기 위해 Int 수형 변량들의 합을 구해서 long 수형으로 반환한다. 
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>합계</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.LongSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Overflow 를 방지 하기 위해 Int 수형 변량들의 합을 구해서 long 수형으로 반환한다. 
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>합계</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.LongSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Overflow 를 방지 하기 위해 Int 수형 변량들의 합을 구해서 long 수형으로 반환한다. 
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>합계</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.LongSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Overflow 를 방지 하기 위해 Int 수형 변량들의 합을 구해서 long 수형으로 반환한다. 
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>합계</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AbsSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            변량들의 절대값의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>변량들의 절대값의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.SumOfSquares``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            변량들의 제곱의 합을 구한다.
            </summary>
      <param name="source">변량을 추출할 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택할 선택자</param>
      <returns>제곱의 합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.LongSumParallel(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            시퀀스의 변량의 합을 병렬로 계산합니다. 
            </summary>
      <param name="sequence">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ApproximateEqual(System.Double,System.Double,System.Double)">
      <summary>
            근사치 비교
            </summary>
      <param name="a">비교 값</param>
      <param name="b">비교 대상 값</param>
      <param name="epsilon">허용오차</param>
      <returns>허용오차 내에서 같은 값인가?</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ApproximateEqual(System.Nullable{System.Double},System.Nullable{System.Double},System.Double)">
      <summary>
            근사치 비교
            </summary>
      <param name="a">비교 값</param>
      <param name="b">비교 대상 값</param>
      <param name="epsilon">허용오차</param>
      <returns>허용오차 내에서 같은 값인가?</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ApproximateEqual(System.Single,System.Single,System.Single)">
      <summary>
            근사치 비교
            </summary>
      <param name="a">비교 값</param>
      <param name="b">비교 대상 값</param>
      <param name="epsilon">허용오차</param>
      <returns>허용오차 내에서 같은 값인가?</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ApproximateEqual(System.Nullable{System.Single},System.Nullable{System.Single},System.Single)">
      <summary>
            근사치 비교
            </summary>
      <param name="a">비교 값</param>
      <param name="b">비교 대상 값</param>
      <param name="epsilon">허용오차</param>
      <returns>허용오차 내에서 같은 값인가?</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ApproximateEqual(System.Decimal,System.Decimal,System.Decimal)">
      <summary>
            근사치 비교
            </summary>
      <param name="a">비교 값</param>
      <param name="b">비교 대상 값</param>
      <param name="epsilon">허용오차</param>
      <returns>허용오차 내에서 같은 값인가?</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ApproximateEqual(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal)">
      <summary>
            근사치 비교
            </summary>
      <param name="a">비교 값</param>
      <param name="b">비교 대상 값</param>
      <param name="epsilon">허용오차</param>
      <returns>허용오차 내에서 같은 값인가?</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Approximate(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
      <summary>
            시퀀스 요소중 selector와 허용오차 내의 근사치에 해당하는 요소만 필터링해서 반환합니다.
            </summary>
      <param name="source">
      </param>
      <param name="check">
      </param>
      <param name="epsilon">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Approximate``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,System.Double})">
      <summary>
            시퀀스 요소중 검사값과 허용오차범위 내에 있는 근사치를 가진 요소만 반환한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">시퀀스</param>
      <param name="check">검사값</param>
      <param name="selector">시퀀스에서 비교할 요소를 선택하는 함수</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Approximate``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Double,System.Func{``0,System.Double})">
      <summary>
            시퀀스 요소중 검사값과 허용오차범위 내에 있는 근사치를 가진 요소만 반환한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">시퀀스</param>
      <param name="check">검사값</param>
      <param name="epsilon">허용오차</param>
      <param name="selector">시퀀스에서 비교할 요소를 선택하는 함수</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Clamp(System.Double,System.Double,System.Double)">
      <summary>
            지정된 값이 원하는 값과의 차이가 오차범위 내에 있다면 원하는 값으로 대체한다.
            </summary>
      <param name="value">검사할 값</param>
      <param name="destValue">원하는 값</param>
      <param name="tolerance">오차</param>
      <returns>value와 destValue의 오차가 허용범위에 있다면 destValue, 아니면 value를 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Clamp(System.Single,System.Single,System.Single)">
      <summary>
            지정된 값이 원하는 값과의 차이가 오차범위 내에 있다면 원하는 값으로 대체한다.
            </summary>
      <param name="value">검사할 값</param>
      <param name="destValue">원하는 값</param>
      <param name="tolerance">오차</param>
      <returns>value와 destValue의 오차가 허용범위에 있다면 destValue, 아니면 value를 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Clamp``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
      <summary>
            시퀀스 항목 값이 원하는 값과의 차이가 오차범위 내에 있다면 원하는 값으로 대체한다.
            </summary>
      <param name="source">검사할 값을 가진 시퀀스</param>
      <param name="destValue">원하는 값</param>
      <param name="tolerance">오차</param>
      <returns>value와 destValue의 오차가 허용범위에 있다면 destValue, 아니면 value를 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RangeClamp(System.Double,System.Double,System.Double)">
      <summary>
            지정된 값이 상하한을 벗어나면 벗어난 값에 가까운 한계값으로 대체된다.
            </summary>
      <param name="value">실제값</param>
      <param name="minValue">하한 값</param>
      <param name="maxValue">상한 값</param>
      <returns>실제값이 상한을 넘어서면 상한값을, 하한값을 벗어나면 하한값을 반환한다. 상하한 영역에 있다면 실제값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RangeClamp(System.Single,System.Single,System.Single)">
      <summary>
            지정된 값이 상하한을 벗어나면 벗어난 값에 가까운 한계값으로 대체된다.
            </summary>
      <param name="value">실제값</param>
      <param name="minValue">하한 값</param>
      <param name="maxValue">상한 값</param>
      <returns>실제값이 상한을 넘어서면 상한값을, 하한값을 벗어나면 하한값을 반환한다. 상하한 영역에 있다면 실제값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RangeClamp``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
      <summary>
            시퀀스 항목 값이 상하한을 벗어나면 벗어난 값에 가까운 한계값으로 대체된다.
            </summary>
      <param name="source">실제값을 가진 시퀀스</param>
      <param name="minValue">하한 값</param>
      <param name="maxValue">상한 값</param>
      <returns>실제값이 상한을 넘어서면 상한값을, 하한값을 벗어나면 하한값을 반환한다. 상하한 영역에 있다면 실제값을 반환한다.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Combination(System.Int32,System.Int32)">
      <summary>
            순열에서 조합을 구한다.
            </summary>
      <param name="n">모집단 갯수</param>
      <param name="k">선택할 갯수</param>
      <returns>조합</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.LongCombination(System.Int32,System.Int32)">
      <summary>
            순열에서 조합을 구한다.
            </summary>
      <param name="n">모집단 갯수</param>
      <param name="k">선택할 갯수, k가 17보다 크면 예외를 발생시킨다.</param>
      <returns>조합 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variations(System.Int32,System.Int32)">
      <summary>
            Counts the number of possible variations without repetition.
            The order matters and each object can be chosen only once.
            </summary>
      <param name="n">Number of elements in the set.</param>
      <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
      <returns>Maximum number of distinct variations.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.VariationsWithRepetition(System.Int32,System.Int32)">
      <summary>
            Counts the number of possible variations with repetition.
            The order matters and each object can be chosen more than once.
            </summary>
      <param name="n">Number of elements in the set.</param>
      <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
      <returns>Maximum number of distinct variations with repetition.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Combinations(System.Int32,System.Int32)">
      <summary>
            Counts the number of possible combinations without repetition.
            The order does not matter and each object can be chosen only once.
            </summary>
      <param name="n">Number of elements in the set.</param>
      <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
      <returns>Maximum number of combinations.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CombinationsWithRepetition(System.Int32,System.Int32)">
      <summary>
            Counts the number of possible combinations with repetition.
            The order does not matter and an object can be chosen more than once.
            </summary>
      <param name="n">Number of elements in the set.</param>
      <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
      <returns>Maximum number of combinations with repetition.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Permutations(System.Int32)">
      <summary>
            Counts the number of possible permutations (without repetition). 
            </summary>
      <param name="n">Number of (distinguishable) elements in the set.</param>
      <returns>Maximum number of permutations without repetition.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CorrelationCoefficient(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            지정된 두 차원의 변량들을 가지고 상관관계 계수를 계산한다.
            </summary>
      <param name="first">첫번째 변량 시퀀스</param>
      <param name="second">두번째 변량 시퀀스</param>
      <returns>두 변량 시퀀스의 상관관계 계수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CorrelationCoefficient``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Collections.Generic.IEnumerable{``1},System.Func{``1,System.Double})">
      <summary>
            지정된 두 시퀀스의 선택된 변량들을 가지고, 상관관계 계수를 계산한다.
            </summary>
      <typeparam name="T1">첫번째 변량을 가진 객체의 형식</typeparam>
      <typeparam name="T2">두번째 변량을 가진 객체의 형식</typeparam>
      <param name="first">첫번째 변량을 가진 객체의 시퀀스</param>
      <param name="firstSelector">첫번째 객체의 시퀀스로부터 변량을 선택하는 선택자</param>
      <param name="second">두번째 변량을 가진 객체의 시퀀스</param>
      <param name="secondSelector">두번째 객체의 시퀀스로부터 변량을 선택하는 선택자</param>
      <returns>상관 계수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.PearsonCorrelationCoefficient(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes the Pearson product-moment correlation coefficient.
            </summary>
      <param name="first">첫번째 변량 시퀀스</param>
      <param name="second">두번째 변량 시퀀스</param>
      <returns>두 변량 시퀀스의 상관관계 계수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.PearsonCorrelationCoefficient``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Collections.Generic.IEnumerable{``1},System.Func{``1,System.Double})">
      <summary>
            지정된 두 시퀀스의 선택된 변량들을 가지고, Pearson product-moment 상관관계 계수를 계산한다.
            </summary>
      <typeparam name="T1">첫번째 변량을 가진 객체의 형식</typeparam>
      <typeparam name="T2">두번째 변량을 가진 객체의 형식</typeparam>
      <param name="first">첫번째 변량을 가진 객체의 시퀀스</param>
      <param name="firstSelector">첫번째 객체의 시퀀스로부터 변량을 선택하는 선택자</param>
      <param name="second">두번째 변량을 가진 객체의 시퀀스</param>
      <param name="secondSelector">두번째 객체의 시퀀스로부터 변량을 선택하는 선택자</param>
      <returns>상관 계수</returns>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.SqrtPi">
      <summary>
            PI 제곱근 sqrt(pi)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.SqrtPi2">
      <summary>
            sqrt(2*pi)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.SqrtPi2E">
      <summary>
            sqrt(2*pi*e)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.LnSqrtPi2">
      <summary>
            log[e](sqrt(2*pi))
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.LnSqrtPi2E">
      <summary>
            log[e](sqrt(2*pi*e))
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Ln2SqrtEOverPi">
      <summary>
            log[e](2 * sqrt(e/pi))
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.InvSqrtPi">
      <summary>
            1 / sqrt(pi)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.InvSqrtPi2">
      <summary>
            1 / sqrt(2*pi)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.TwoSqrtEOverPi">
      <summary>
            2 * sqrt(e/pi))
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Log2E">
      <summary>
            log[2](e)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Log10E">
      <summary>
            log[10](e)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Ln2">
      <summary>
            log[e](2)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Ln10">
      <summary>
            log[e](10)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.LnPI2">
      <summary>
            2PI의 Log값 log[e](2*pi)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.LnPI">
      <summary>
            log[e](pi)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.InvE">
      <summary>
            1/e
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.SqrtE">
      <summary>
            sqrt(e)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.Sqrt2">
      <summary>
            sqrt(2)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.PowerDecibel">
      <summary>
            ln(10) / 20 - Power Decibel (dB) 를 Neper (Np) 로 변환할 때의 factor
            Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.NeutralDecibel">
      <summary>
            ln(10) / 10 - Neutral Decibel (dB)를 Neper (Np)로 변환할 때의 factor
            Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.GoldenRatio">
      <summary>황금비 (Golden Ratio) (1+sqrt(5))/2</summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Hypot(System.Double,System.Double)">
      <summary>
            직각삼각형의 빗변의 길이를 구하는 식이다.  Sqrt(a^2 + b^2)
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Hypot2(System.Double,System.Double)">
      <summary>
            Moler-Morrison 법을 이용하여 직각 삼각형의 빗변을 구한다.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Distance(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            2차원 두 점 사이의 최단 거리를 구한다.
            </summary>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Distance(System.Drawing.Point,System.Drawing.Point)">
      <summary>
             2차원 두 점 사이의 최단 거리를 구한다.
            </summary>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Distance(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
             2차원 두 점 사이의 최단 거리를 구한다.
            </summary>
      <param name="p1">
      </param>
      <param name="p2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Kurtosis(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            변량 분포의 첨예도를 나타냅니다. 값이 작을 수록 뾰족한 분포이고, 값이 클수록 언덕 분포입니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            평균
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GeometricMean(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            기하평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GeometricMean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            기하평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GeometricMean(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            기하평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GeometricMean(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            기하평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GeometricMean(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            기하평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GeometricMean(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            기하평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.HarmonicMean(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            조화평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.HarmonicMean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            조화평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.HarmonicMean(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            조화평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.HarmonicMean(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            조화평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.HarmonicMean(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            조화평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.HarmonicMean(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            조화평균, 참고 : http://en.wikipedia.org/wiki/Mean
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Median(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            중앙값
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            중앙값
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Double},System.Double@,System.Double@)">
      <summary>
            지정된 시퀀스의 항목 중 최대/최소 값을 구한다
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double@,System.Double@)">
      <summary>
            지정된 시퀀스의 항목 중 최대/최소 값을 구한다
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Single},System.Single@,System.Single@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Single@,System.Single@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal@,System.Decimal@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Decimal@,System.Decimal@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Int64},System.Int64@,System.Int64@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int64@,System.Int64@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Int32},System.Int32@,System.Int32@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32@,System.Int32@)">
      <summary>
            지정된 시퀀스의 최대/최소 값을 구하다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double@,System.Double@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Double@,System.Double@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single@,System.Single@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Single@,System.Single@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64@,System.Int64@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Int64@,System.Int64@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Int32@,System.Int32@)">
      <summary>
            시퀀스의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Double},System.Double@,System.Double@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double@,System.Double@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Single},System.Single@,System.Single@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Single@,System.Single@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Int64},System.Int64@,System.Int64@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int64@,System.Int64@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Int32},System.Int32@,System.Int32@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32@,System.Int32@)">
      <summary>
            시퀀스 요소의 절대값의 최대/최소값을 구한다.
            </summary>
      <param name="source">Sequece of variable</param>
      <param name="min">변량의 절대값의 최소값</param>
      <param name="max">변량의 절대값의 최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double@,System.Double@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Double@,System.Double@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single@,System.Single@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Single@,System.Single@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64@,System.Int64@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Int64@,System.Int64@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetAbsMinMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Int32@,System.Int32@)">
      <summary>
            시퀀스의 변량의 절대값의 최대, 최소 값을 구한다.
            </summary>
      <typeparam name="T">변량을 가진 객체의 형식</typeparam>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체로부터 변량을 선택하는 선택자</param>
      <param name="min">최소값</param>
      <param name="max">최대값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            지정된 시퀀스의 값 중 가장 큰 값을 가진 요소의 인덱스를 구한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            지정된 시퀀스의 값 중 가장 작은 값을 가진 요소의 인덱스를 구한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.IndexOfAbsMax``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            지정된 시퀀스의 값 중 가장 큰 값을 가진 요소의 인덱스를 구한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.IndexOfAbsMin``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            지정된 시퀀스의 값 중 가장 작은 값을 가진 요소의 인덱스를 구한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Moment(System.Collections.Generic.IEnumerable{System.Double},System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
        <paramref name="source" /> 변량으로부터 평균(average), 평균편차(average deviation), 분산(variance), 기울기(skewness), 첨도(kurtosis, 뾰족한 정도)
            </summary>
      <param name="source">변량</param>
      <param name="avg">평균</param>
      <param name="avgDev">평균 분산</param>
      <param name="variance">분산</param>
      <param name="skew">기울기(skewness) 양의 수이면 오른쪽으로 기울고, 음의 수이면 왼쪽으로 기울기</param>
      <param name="kurtosis">첨도 (Kurtosis, 뽀족한정도), 양의 수일수록 뾰족하고, 음의 수일 수록 뭉툭하다</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Moment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
        <paramref name="source" /> 변량으로부터 평균(average), 평균편차(average deviation), 분산(variance), 기울기(skewness), 첨도(kurtosis, 뾰족한 정도)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">변량 선택자</param>
      <param name="avg">평균</param>
      <param name="avgDev">평균 분산</param>
      <param name="variance">분산</param>
      <param name="skew">기울기(skewness) 양의 수이면 오른쪽으로 기울고, 음의 수이면 왼쪽으로 기울기</param>
      <param name="kurtosis">첨도 (Kurtosis, 뽀족한정도), 양의 수일수록 뾰족하고, 음의 수일 수록 뭉툭하다</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            표준 방식으로 이동평균을 구합니다.
            </summary>
      <param name="source">변량을 포함한 시퀀스</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <param name="selector">변량 선택자</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ExponentialMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
      <summary>
            지수 방식으로 이동평균을 구합니다. (표준방식보다 부드러운 곡선을 만듭니다)
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동 평균을 계산하기 위한 항목 수 (최소 2)</param>
      <returns>이동 평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            누적 이동 평균을 구합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="selector">항목에서 변량을 선택하는 선택자</param>
      <returns>누적 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Func{System.Int32,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32,System.Func{System.Int32,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Func{System.Int32,System.Single})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32,System.Func{System.Int32,System.Single})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32,System.Func{System.Int32,System.Decimal})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32,System.Func{System.Int32,System.Decimal})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Func{System.Int32,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32,System.Func{System.Int32,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Func{System.Int32,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32,System.Func{System.Int32,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Double})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Single},System.Func{``0,System.Single})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Single},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Decimal},System.Func{``0,System.Decimal})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Decimal},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Int64})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Int32})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            지정한 시퀀스의 항목에 가중치를 준 이동평균을 계산합니다.
            </summary>
      <param name="source">변량을 가진 항목의 시퀀스</param>
      <param name="blockSize">이동평균 계산시 변량 수</param>
      <param name="weightingFunc">가중치 함수</param>
      <param name="selector">항목에서 변량을 선택하는 함수</param>
      <returns>가중치가 적용된 이동평균</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">변량</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
      <returns>이동 합계 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            변량(<paramref name="source" />)로부터 이동합계을 계산합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="blockSize">합계를 구하는 변량의 갯수</param>
            /// <param name="selector">시퀀스 항목에서 변량 선택자</param><returns>이동 합계 시퀀스</returns></member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Double[])">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Single[])">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Decimal[])">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량의 시퀀스</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체에서 변량을 선택하는 선택자</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체에서 변량을 선택하는 선택자</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체에서 변량을 선택하는 선택자</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체에서 변량을 선택하는 선택자</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체에서 변량을 선택하는 선택자</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Norm``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Norm ( 요소의 제곱의 합 )을 구한다. (벡터의 길이, 차원의 가장 짧은 거리)
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">객체에서 변량을 선택하는 선택자</param>
      <returns>Norm</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Normalize(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            지정된 시퀀스를 Normalize 한다. norm[i] = item[i] / sum(items) 이다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.IsPrimes(System.Int64)">
      <summary>
            지정된 수가 소수인지 검사한다.
            </summary>
      <param name="value">검사할 값</param>
      <returns>소수인지 여부</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.IsPrimes(System.Int32)">
      <summary>
            지정된 수가 소수인지 검사한다.
            </summary>
      <param name="value">검사할 값</param>
      <returns>소수인지 여부</returns>
    </member>
    <member name="F:NSoft.NFramework.Numerics.MathTool.SqrtOfTwoPI">
      <summary>
            Sqrt of 2 * PI
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalDensity(System.Double,System.Double,System.Double)">
      <summary>
            해당 평균, 표준편차를 가지는 정규분포에서의 x 지점에서의 확률을 구한다.
            </summary>
      <param name="x">
      </param>
      <param name="avg">
      </param>
      <param name="stdev">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalDensity(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
      <summary>
            해당 평균, 표준편차를 가지는 정규분포에서의 확률을 구한다.
            </summary>
      <param name="source">확률을 구하고자 하는 지점의 시퀀스</param>
      <param name="avg">
      </param>
      <param name="stdev">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalDensity``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double,System.Double)">
      <summary>
            해당 평균, 표준편차를 가지는 정규분포에서의 확률을 구한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <param name="selector">
      </param>
      <param name="avg">
      </param>
      <param name="stdev">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Frequency``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        <paramref name="source" /> 항목의 빈도 수를 Dictionary 형태로 제공합니다.
            </summary>
      <typeparam name="T">항목의 수형</typeparam>
      <param name="source">시퀀스</param>
      <returns>시퀀스의 {항목,빈도수} 정보</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Frequency``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``1})">
      <summary>
        <paramref name="source" />의 항목들을 대표값(<paramref name="buckets" />)으로 그룹핑하여 빈도수를 나타냅니다. (히스토그램처럼)
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TBucket">
      </typeparam>
      <param name="source">
      </param>
      <param name="buckets">
      </param>
      <param name="bucketSelector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Frequency``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
        <paramref name="source" />의 항목들을 <paramref name="bucketSelector" />를 통해 그룹핑하여 빈도수를 나타냅니다. (히스토그램 처럼)
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TBucket">
      </typeparam>
      <param name="source">
      </param>
      <param name="bucketSelector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Probability``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            항목(<paramref name="item" />)의 빈도 수 / 전체 항목 수
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">시퀀스</param>
      <param name="item">비교 항목</param>
      <returns>항목 수 / 전체 항목 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Probability``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            항목(<paramref name="item" />)의 빈도 수 / 전체 항목 수
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">시퀀스</param>
      <param name="item">비교 항목</param>
      <param name="comparer">값 비교자</param>
      <returns>항목 수 / 전체 항목 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.GetRandomFactory">
      <summary>
            Random 인스턴스를 생성해주는 함수를 제공합니다. seed 값을 유일한 값을 제공하도록 합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Ranking``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            변량들의 순위 매기기, 점수 배열에 대한 순위를 매긴다. 가장 큰 수가 1등이 된다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CubeRoot(System.Double)">
      <summary>
            3제곱근 계산
            </summary>
      <param name="x">3 제곱근을 계산할 값</param>
      <returns>3 제곱근 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CubeRoot(System.Single)">
      <summary>
            3제곱근 계산
            </summary>
      <param name="x">3 제곱근을 계산할 값</param>
      <returns>3 제곱근 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CubeRoot(System.Decimal)">
      <summary>
            3제곱근 계산
            </summary>
      <param name="x">3 제곱근을 계산할 값</param>
      <returns>3 제곱근 값</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquare(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            제곱 평균 (root-mean-square) - 표준편차와 같은 값이다.
            참고: http://en.wikipedia.org/wiki/Root_mean_square
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.RootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            제곱 평균(root-mean-square) error (RMSE) : 예측치와 실제값과의 오차를 제곱 평균으로 계산합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.NormalizedRootMeanSquareError(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            정규화된 제곱 평균 - Normalized root-mean-square error (RMSE) : 예측치와 실제값과의 오차를 제곱평균으로 계산하고, 정규화합니다.
            참고 : http://en.wikipedia.org/wiki/Root_mean_square_error
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Skewness(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            변량의 분포의 대칭성을 나타냅니다. 0 을 기준으로 좌우로 기울어져 분포하는 것을 표현합니다.
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Double)">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Nullable{System.Double})">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Single)">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Nullable{System.Single})">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Decimal)">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Nullable{System.Decimal})">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Int64)">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Nullable{System.Int64})">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Int32)">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Square(System.Nullable{System.Int32})">
      <summary>
            제곱
            </summary>
      <param name="x">제곱할 수</param>
      <returns>제곱된 수</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            표준편차를 구한다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            변량들의 표준편차를 구한다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Double},System.Double@,System.Double@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Single},System.Single@,System.Single@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Int64},System.Double@,System.Double@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Int32},System.Double@,System.Double@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double@,System.Double@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single@,System.Single@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Decimal@,System.Decimal@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Nullable{System.Decimal}@,System.Nullable{System.Decimal}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Double@,System.Double@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Double@,System.Double@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.AverageAndStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
      <summary>
            시퀀스에서 평균과 표준편차를 구한다.
            </summary>
      <param name="source">변량을 가진 객체의 시퀀스</param>
      <param name="selector">시퀀스로부터 계산할 변량을 선택하는 선택자</param>
      <param name="average">평균</param>
      <param name="stdev">표준편차</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeStDev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            시퀀스의 표준편차을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">변량 선택자</param>
      <returns>누적 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.StDev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
        <paramref name="blockSize" /> 단위로 표준편차을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">표준편차 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 표준편차</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap``1(``0@,``0@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <typeparam name="T">변수의 수형</typeparam>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Double@,System.Double@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Single@,System.Single@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Decimal@,System.Decimal@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Byte@,System.Byte@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Char@,System.Char@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Int16@,System.Int16@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Int32@,System.Int32@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Swap(System.Int64@,System.Int64@)">
      <summary>
            지정된 두 변수의 값을 바꾼다.
            </summary>
      <param name="a">첫번째 변수</param>
      <param name="b">두번째 변수</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Ceiling(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            시퀀스 항목 값을 올림합니다.
            </summary>
      <param name="source">시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Ceiling(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            시퀀스 항목 값을 올림합니다.
            </summary>
      <param name="source">시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Ceiling(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            시퀀스 항목 값을 올림합니다.
            </summary>
      <param name="source">시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Floor(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            시퀀스 항목 값을 버림을 수행합니다.
            </summary>
      <param name="source">시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Floor(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            시퀀스 항목 값을 버림을 수행합니다.
            </summary>
      <param name="source">시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Floor(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            시퀀스 항목 값을 버림을 수행합니다.
            </summary>
      <param name="source">시퀀스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Round(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
            시퀀스 항목 값을 지정된 소수 자릿수로 반올림합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="digits">소수 자릿 수</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Round(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
            시퀀스 항목 값을 지정된 소수 자릿수로 반올림합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="digits">소수 자릿 수</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Round(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
            시퀀스 항목 값을 지정된 소수 자릿수로 반올림합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="digits">소수 자릿 수</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ToRadian(System.Double)">
      <summary>
            각도의 Degree 단위를 Radian 단위로 변경 ( 180 degree =&gt; PI )
            </summary>
      <param name="degree">degree 단위의 각도</param>
      <returns>radian 단위의 각도</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ToRadian(System.Single)">
      <summary>
            각도의 Degree 단위를 Radian 단위로 변경 ( 180 degree =&gt; PI )
            </summary>
      <param name="degree">degree 단위의 각도</param>
      <returns>radian 단위의 각도</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ToRadian(System.Decimal)">
      <summary>
            각도의 Degree 단위를 Radian 단위로 변경 ( 180 degree =&gt; PI )
            </summary>
      <param name="degree">degree 단위의 각도</param>
      <returns>radian 단위의 각도</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ToDegree(System.Double)">
      <summary>
            각도의 Radian 단위를 Degree 단위로 변경 ( PI =&gt; 180 )
            </summary>
      <param name="radian">radian 단위의 각도</param>
      <returns>degree 단위의 각도</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ToDegree(System.Single)">
      <summary>
            각도의 Radian 단위를 Degree 단위로 변경 ( PI =&gt; 180 )
            </summary>
      <param name="radian">radian 단위의 각도</param>
      <returns>degree 단위의 각도</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.ToDegree(System.Decimal)">
      <summary>
            각도의 Radian 단위를 Degree 단위로 변경 ( PI =&gt; 180 )
            </summary>
      <param name="radian">radian 단위의 각도</param>
      <returns>degree 단위의 각도</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            시퀀스의 분산값을 구한다 (요소중 null 값은 제외합니다)
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            시퀀스의 분산값을 구한다 (요소중 null 값은 제외합니다)
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            시퀀스의 분산값을 구한다 (요소중 null 값은 제외합니다)
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            시퀀스의 분산값을 구한다 (요소중 null 값은 제외합니다)
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            시퀀스의 분산값을 구한다 (요소중 null 값은 제외합니다)
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            시퀀스의 분산값을 구한다
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            시퀀스의 분산을 누적해서 열거합니다.
            </summary>
      <param name="source">시퀀스</param>
      <param name="selector">시퀀스 항목으로부터 요소를 선택하는 선택자</param>
      <returns>누적 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.MathTool.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
        <paramref name="blockSize" /> 단위로 분산을 계산하여, 열거합니다.
            </summary>
      <param name="source">변량 시퀀스</param>
      <param name="blockSize">분산 계산을 위한 변량 갯수</param>
      <param name="selector">항목중 변량 선택 함수</param>
      <returns>블럭별 분산</returns>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Precision">
      <summary>
            정밀도에 대한 여러가지 기본 값을 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.Magnitude(System.Double)">
      <summary>
            Returns the magnitude of the number.
            </summary>
      <param name="value">The value.</param>
      <returns>The magnitude of the number.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.Magnitude(System.Single)">
      <summary>
            Returns the magnitude of the number.
            </summary>
      <param name="value">The value.</param>
      <returns>The magnitude of the number.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.GetMagnitudeScaledValue(System.Double)">
      <summary>
            Returns the number divided by it's magnitude, effectively returning a number between -10 and 10.
            </summary>
      <param name="value">The value.</param>
      <returns>The value of the number.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.Increment(System.Double)">
      <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
      <param name="value">The value which needs to be incremented.</param>
      <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
      <returns>The next larger floating point value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.Increment(System.Double,System.Int32)">
      <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
      <param name="value">The value which needs to be incremented.</param>
      <param name="count">How many times the number should be incremented.</param>
      <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
      <returns>The next larger floating point value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.Decrement(System.Double)">
      <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
      <param name="value">The value which should be decremented.</param>
      <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
      <returns>The next smaller floating point value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.Decrement(System.Double,System.Int32)">
      <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
      <param name="value">The value which should be decremented.</param>
      <param name="count">How many times the number should be decremented.</param>
      <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
      <returns>The next smaller floating point value.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.CoerceZero(System.Double,System.Int32)">
      <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
      <param name="a">The real number to coerce to zero, if it is almost zero.</param>
      <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a" />.</param>
      <returns>
                Zero if |<paramref name="a" />| is fewer than <paramref name="maxNumbersBetween" /> numbers from zero, <paramref name="a" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.CoerceZero(System.Double,System.Int64)">
      <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
      <param name="a">The real number to coerce to zero, if it is almost zero.</param>
      <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a" />.</param>
      <returns>
                Zero if |<paramref name="a" />| is fewer than <paramref name="maxNumbersBetween" /> numbers from zero, <paramref name="a" /> otherwise.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween" /> is smaller than zero.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.CoerceZero(System.Double,System.Double)">
      <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
      <param name="a">The real number to coerce to zero, if it is almost zero.</param>
      <param name="maximumAbsoluteError">The absolute threshold for <paramref name="a" /> to consider it as zero.</param>
      <returns>Zero if |<paramref name="a" />| is smaller than <paramref name="maximumAbsoluteError" />, <paramref name="a" /> otherwise.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maximumAbsoluteError" /> is smaller than zero.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.CoerceZero(System.Double)">
      <summary>
            Forces small numbers near zero to zero.
            </summary>
      <param name="a">The real number to coerce to zero, if it is almost zero.</param>
      <returns>Zero if |<paramref name="a" />| is smaller than 2^(-53) = 1.11e-16, <paramref name="a" /> otherwise.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.RangeOfMatchingFloatingPointNumbers(System.Double,System.Int64,System.Double@,System.Double@)">
      <summary>
            Determines the range of floating point numbers that will match the specified value with the given tolerance.
            </summary>
      <param name="value">The value.</param>
      <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
      <param name="bottomRangeEnd">The bottom range end.</param>
      <param name="topRangeEnd">The top range end.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween" /> is smaller than zero.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.MaximumMatchingFloatingPointNumber(System.Double,System.Int64)">
      <summary>
            Returns the floating point number that will match the value with the tolerance on the maximum size (i.e. the result is
            always bigger than the value)
            </summary>
      <param name="value">The value.</param>
      <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
      <returns>The maximum floating point number which is <paramref name="maxNumbersBetween" /> larger than the given <paramref name="value" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.MinimumMatchingFloatingPointNumber(System.Double,System.Int64)">
      <summary>
            Returns the floating point number that will match the value with the tolerance on the minimum size (i.e. the result is
            always smaller than the value)
            </summary>
      <param name="value">The value.</param>
      <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
      <returns>The minimum floating point number which is <paramref name="maxNumbersBetween" /> smaller than the given <paramref name="value" />.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.RangeOfMatchingNumbers(System.Double,System.Double,System.Int64@,System.Int64@)">
      <summary>
            Determines the range of <c>ulps</c> that will match the specified value with the given tolerance.
            </summary>
      <param name="value">The value.</param>
      <param name="relativeDifference">The relative difference.</param>
      <param name="bottomRangeEnd">The number of ULPS between the <c>value</c> and the <c>value - relativeDifference</c>.</param>
      <param name="topRangeEnd">The number of ULPS between the <c>value</c> and the <c>value + relativeDifference</c>.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="relativeDifference" /> is smaller than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> is <c>double.NaN</c>.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.NumbersBetween(System.Double,System.Double)">
      <summary>
            Evaluates the count of numbers between two double numbers
            </summary>
      <param name="a">The first parameter.</param>
      <param name="b">The second parameter.</param>
      <remarks>The second number is included in the number, thus two equal numbers evaluate to zero and two neighbor numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.</remarks>
      <returns>The number of floating point values between <paramref name="a" /> and <paramref name="b" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a" /> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a" /> is <c>double.NaN</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b" /> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b" /> is <c>double.NaN</c>.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqual(System.Double,System.Double)">
      <summary>
            Checks whether two real numbers are almost equal.
            </summary>
      <param name="a">The first number</param>
      <param name="b">The second number</param>
      <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqual(System.Single,System.Single)">
      <summary>
            Checks whether two real numbers are almost equal.
            </summary>
      <param name="a">The first number</param>
      <param name="b">The second number</param>
      <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqual(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex)">
      <summary>
            Checks whether two Compex numbers are almost equal.
            </summary>
      <param name="a">The first number</param>
      <param name="b">The second number</param>
      <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqual``1(``0,``0)">
      <summary>
            Checks whether two structures with precision support are almost equal. 
            </summary>
      <typeparam name="T">The type of the structures. Must implement <see cref="T:NSoft.NFramework.Numerics.IPrecisionSupport`1" />.</typeparam>
      <param name="a">The first structure</param>
      <param name="b">The second structure</param>
      <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithError(NSoft.NFramework.Numerics.Complex,NSoft.NFramework.Numerics.Complex,System.Double)">
      <summary>
            Compares two complex and determines if they are equal within
            the specified maximum error.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maximumError">The accuracy required for being almost equal.</param>
      <returns>
        <see langword="true" /> if both complex are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithError(System.Single,System.Single,System.Double)">
      <summary>
            Compares two complex and determines if they are equal within
            the specified maximum error.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maximumError">The accuracy required for being almost equal.</param>
      <returns>
        <see langword="true" /> if both complex are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithError(System.Double,System.Double,System.Double)">
      <summary>
            Compares two doubles and determines if they are equal within
            the specified maximum error.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maximumError">The accuracy required for being almost equal.</param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualListWithError(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
      <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
      <param name="a">The first value list.</param>
      <param name="b">The second value list.</param>
      <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualListWithError(System.Collections.Generic.IList{NSoft.NFramework.Numerics.Complex},System.Collections.Generic.IList{NSoft.NFramework.Numerics.Complex},System.Double)">
      <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
      <param name="a">The first value list.</param>
      <param name="b">The second value list.</param>
      <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithError``1(``0,``0,System.Double)">
      <summary>
            Compares two structure with precision support and determines if they are equal
            within the specified maximum relative error.
            </summary>
      <typeparam name="T">
            The type of the structures. Must implement <see cref="T:NSoft.NFramework.Numerics.IPrecisionSupport`1" />.
            </typeparam>
      <param name="a">The first structure.</param>
      <param name="b">The second structure.</param>
      <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum relative error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualListWithError``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Double)">
      <summary>
            Compares two lists of structures with precision support and determines if they
            are equal within the specified maximum error.
            </summary>
      <typeparam name="T">
            The type of the structures. Must implement <see cref="T:NSoft.NFramework.Numerics.IPrecisionSupport`1" />.
            </typeparam>
      <param name="a">The first structure list.</param>
      <param name="b">The second structure list.</param>
      <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithError(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum error.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="diff">
            The difference of the two values (according to some norm).
            </param>
      <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithAbsoluteError(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum absolute error.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="diff">
            The difference of the two values (according to some norm).
            </param>
      <param name="maximumAbsoluteError">
            The absolute accuracy required for being almost equal.
            </param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum absolute error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualWithRelativeError(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum relative error.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="diff">The difference of the two values (according to some norm).
            </param>
      <param name="maximumRelativeError">The relative accuracy required for being
            almost equal.</param>
      <returns>
        <see langword="true" /> if both doubles are almost equal up to the specified
            maximum relative error, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualInDecimalPlaces(System.Double,System.Double,System.Int32)">
      <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
      <remarks>
        <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces" /> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
      </remarks>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="decimalPlaces">The number of decimal places.</param>
      <returns>
        <see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="decimalPlaces" /> is smaller than zero.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqualInDecimalPlaces(System.Single,System.Single,System.Int32)">
      <summary>
            Compares two floats and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
      <remarks>
        <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces" /> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
      </remarks>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="decimalPlaces">The number of decimal places.</param>
      <returns>
        <see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="decimalPlaces" /> is smaller than zero.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqual(System.Double,System.Double,System.Int64)">
      <summary>
            Compares two doubles and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
      <remarks>
        <para>
            Determines the 'number' of floating point numbers between two values (i.e. the number of discrete steps 
            between the two numbers) and then checks if that is within the specified tolerance. So if a tolerance 
            of 1 is passed then the result will be true only if the two numbers have the same binary representation 
            OR if they are two adjacent numbers that only differ by one step.
            </para>
        <para>
            The comparison method used is explained in http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm . The article
            at http://www.extremeoptimization.com/resources/Articles/FPDotNetConceptsAndFormats.aspx explains how to transform the C code to 
            .NET enabled code without using pointers and unsafe code.
            </para>
      </remarks>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
      <returns>
        <see langword="true" /> if both doubles are equal to each other within the specified tolerance; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween" /> is smaller than one.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.AlmostEqual(System.Single,System.Single,System.Int32)">
      <summary>
            Compares two floats and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
      <returns>
        <see langword="true" /> if both floats are equal to each other within the specified tolerance; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween" /> is smaller than one.
            </exception>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.IsLarger(System.Double,System.Double,System.Int64)">
      <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
      <returns>
        <c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.IsLargerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
      <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
      <remarks>
        <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces" /> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
      </remarks>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="decimalPlaces">The number of decimal places.</param>
      <returns>
        <c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.IsSmaller(System.Double,System.Double,System.Int64)">
      <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
      <returns>
        <c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.IsSmaller(System.Single,System.Single,System.Int64)">
      <summary>
            Compares two floats and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
      <returns>
        <c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.IsSmallerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
      <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
      <remarks>
        <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of th<paramref name="decimalPlaces" />g. if <paramref name="decimalPlaces" /> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
      </remarks>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="decimalPlaces">The number of decimal places.</param>
      <returns>
        <c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.IsSmallerWithDecimalPlaces(System.Single,System.Single,System.Int32)">
      <summary>
             Compares two floats and determines if the <c>first</c> value is smaller than the <c>second</c>
             value to within the specified number of decimal places or not.
             </summary>
      <remarks>
        <para>
             The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
             two so that we have half the range on each side of th<paramref name="decimalPlaces" />g. if <paramref name="decimalPlaces" /> == 2, then 0.01 will equal between 
             0.005 and 0.015, but not 0.02 and not 0.00
             </para>
      </remarks>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="decimalPlaces">The number of decimal places.</param>
      <returns>
        <c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.CompareTo(System.Double,System.Double,System.Int64)">
      <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="maxNumbersBetween">The maximum error in terms of Units in Last Place (<c>ulps</c>), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Return value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term>-1</term>
            <description>
              <paramref name="a" /> is smaller than <paramref name="b" /> by more than the <paramref name="maxNumbersBetween" /> tolerance.</description>
          </item>
          <item>
            <term>0</term>
            <description>
              <paramref name="a" /> is equal to <paramref name="b" /> within the <paramref name="maxNumbersBetween" /> tolerance.</description>
          </item>
          <item>
            <term>1</term>
            <description>
              <paramref name="a" /> is bigger than <paramref name="b" /> by more than the <paramref name="maxNumbersBetween" /> tolerance.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.CompareToInDecimalPlaces(System.Double,System.Double,System.Int32)">
      <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
      <param name="a">The first value.</param>
      <param name="b">The second value.</param>
      <param name="decimalPlaces">The number of decimal places on which the values must be compared. Must be 1 or larger.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Return value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term>-1</term>
            <description>
              <paramref name="a" /> is smaller than <paramref name="b" /> by more than a magnitude equal to <paramref name="decimalPlaces" />.</description>
          </item>
          <item>
            <term>0</term>
            <description>
              <paramref name="a" /> is equal to <paramref name="b" /> within a magnitude equal to <paramref name="decimalPlaces" />.</description>
          </item>
          <item>
            <term>1</term>
            <description>
              <paramref name="a" /> is bigger than <paramref name="b" /> by more than a magnitude equal to <paramref name="decimalPlaces" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.EpsilonOf(System.Double)">
      <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
      <param name="value">The value used to determine the minimum distance.</param>
      <returns>
            Relative Epsilon (positive double or NaN).
            </returns>
      <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
      <seealso cref="M:NSoft.NFramework.Numerics.Precision.PositiveEpsilonOf(System.Double)" />
    </member>
    <member name="M:NSoft.NFramework.Numerics.Precision.PositiveEpsilonOf(System.Double)">
      <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
      <param name="value">The value used to determine the minimum distance.</param>
      <returns>Relative Epsilon (positive double or NaN)</returns>
      <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:NSoft.NFramework.Numerics.Precision.EpsilonOf(System.Double)" /></remarks>
      <seealso cref="M:NSoft.NFramework.Numerics.Precision.EpsilonOf(System.Double)" />
    </member>
    <member name="P:NSoft.NFramework.Numerics.Precision.DoubleMachinePrecision">
      <summary>
            Gets the maximum relative precision of a double.
            </summary>
      <value>The maximum relative precision of a double.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Precision.SingleMachinePrecision">
      <summary>
            Gets the maximum relative precision of a single.
            </summary>
      <value>The maximum relative precision of a single.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Precision.NumberOfDecimalPlacesForFloats">
      <summary>
            Gets the number of decimal places for floats.
            </summary>
      <value>The number of decimal places for floats.</value>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Precision.NumberOfDecimalPlacesForDoubles">
      <summary>
            Gets the number of decimal places for doubles.
            </summary>
      <value>The number of decimal places for doubles.</value>
    </member>
    <member name="T:NSoft.NFramework.Numerics.Histogram_Old">
      <summary>
            변량(Data)의 Histogram을 만든다.
            </summary>
      <remarks>
            주어진 변량(Data) 를 N-1 개의 bins로 나누어 빈도를 막대그래프로 나타내기 위하여, 
            [b0, b1) [b1, b2) ... [bn-2, bn-1] 의 막대로 구간(boundary)을 나누고, 빈도를 넣는다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.#ctor(System.Int32,System.Double,System.Double)">
      <summary>
            생성자
            </summary>
      <param name="numBins">히스토그램의 막대 수</param>
      <param name="minValue">최소 값</param>
      <param name="maxValue">최대 값</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.#ctor(System.Double[])">
      <summary>
            생성자
            </summary>
      <param name="BinBoundaries">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.#ctor(System.Int32,System.Double[])">
      <summary>
            생성자
            </summary>
      <param name="numBins">히스토그램의 막대 수</param>
      <param name="data">변량</param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.ToString">
      <summary>
            Formats the contents of the Histogram into a string.
            </summary>
      <remarks>If the bin boundaries are b0, b1, b2,...,bn-1, and the 
            counts for these bins are c1, c2,...,cn, respectively,
            then the this method returns a string with the following 
            format:
            Number Smaller:   number SmallerCount
            [b0,b1)  :   c1
            [b1,b2)  :   c2
            [b2,b3)  :   c3
            .
            .
            .
            [bn-2,bn-1]: cn
            Number LargerCount : number LargerCount</remarks>
      <returns>Fomatted string.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.StemLeaf(System.Int32)">
      <summary>
            Formats the contents of the Histogram into a simple acsii stem-leaf
            diagram.
            </summary>
      <remarks>If the bin boundaries are b0, b1, b2,...,bn-1, and the 
            counts for these bins are c1, c2,...,cn, respectively,
            then the this method returns a string with the following 
            format:
            Number SmallerCount:   ***number SmallerCount
            [b0,b1):     *****c1
            [b1,b2):     **********c2
            [b2,b3):     ***************c3
            .
            .
            .
            [bn-2,bn-1]: *****cn
            Number LargerCount : *****number LargerCount.
            Where the number of '*'s is for a particular bin is equal to
            the count for that bin minus one.</remarks>
      <returns>Fomatted string.</returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.Count(System.Int32)">
      <summary>
            지정된 구간의 갯수
            </summary>
      <param name="binNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.AddData(System.Double)">
      <summary>
            Data 추가
            </summary>
      <param name="d">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.AddData(System.Double[])">
      <summary>
            Data 추가
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Numerics.Histogram_Old.Reset">
      <summary>
            히스토그램 결과를 모두 삭제한다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Histogram_Old.FloatFormat">
      <summary>
            float 수형의 문자열 포맷
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Histogram_Old.BinBoundaries">
      <summary>
            히스토그램의 빈도를 나타내는 X축 위치 값들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Histogram_Old.Counts">
      <summary>
            각 히스토그램별 갯수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Histogram_Old.BinsCount">
      <summary>
            막대 갯수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Histogram_Old.SmallerCount">
      <summary>
            최소 구간을 벗어난 변량의 수
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Numerics.Histogram_Old.LargerCount">
      <summary>
            최대 구간을 벗어난 변량의 수
            </summary>
    </member>
  </members>
</doc>