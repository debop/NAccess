<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NSoft.NFramework.Data.NHibernateEx</name>
  </assembly>
  <members>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch">
      <summary>
            Batch processing for collection of Criteria using NHibernate 2.0
            </summary>
      <remarks>
            IMultiCriteria를 이용하여, Batch 작업을 수행한다. 수행시간을 절약할 수 있고, Transaction 경계를 삼을 수 있어서 좋다.
            </remarks>
      <example>
        <code>
            // simple use CriteriaBatch
            ICollection&lt;SMS&gt; loadedMsgs = null;
            
            new CriteriaBatch(_session)
            	.Add(DetachedCriteria.For&lt;SMS&gt;, Order.Asc("Id"))
            	.OnRead(delegate(ICollection&lt;SMS&gt; msgs) { loadedMsgs = msgs; })
            	.Execute();
            
            Assert.IsNotNull(loadedMsgs);
            
            foreach (SMS msg in loadedMsgs)
            	Console.WriteLine(msg.ObjectToString());
            </code>
        <code>
            
            // 1. 모든 엔티티 목록을 가져오면서, 갯수도 계산한다.
            // 2. 페이지 기능을 이용하여 하나의 엔티티만 가져온다.
            ICollection&lt;SMS&gt; loadedMsgs = null;
            int msgCount = 0;
            SMS loadedMsg = null;
            
            new CriteriaBatch(_session)
            	.Add(DetachedCriteria.For&lt;SMS&gt;(), Order.Asc("Id"))
            	.OnRead(delegate(ICollection&lt;SMS&gt; msgs, int count)
            	        	{
            	        		loadedMsgs = msgs;
            	        		msgCount = count;
            	        	})
            	.Add(DetachedCriteria.For&lt;SMS&gt;())
            	.Paging(0, 1)
            	.OnRead(delegate(SMS msg) { loadedMsg = msg; })
            	.Execute();
            
            Assert.IsNotNull(loadedMsgs);
            Assert.AreEqual(1, msgCount);
            Assert.IsNotNull(loadedMsg);
            
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.#ctor(NHibernate.ISession)">
      <summary>
            Initialize a new instance of CriteriaBatch with NHibernate session.
            </summary>
      <param name="session">Instance of ISession to execute criteria</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.Add(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            지정된 Criteria를 Criteria Batch에 추가한다.
            </summary>
      <param name="criteria">criteria to look for</param>
      <param name="orders">order by</param>
      <returns>Current object</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.Add(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            지정된 Criteria를 Criteri Batch 정보에 추가한다.
            </summary>
      <param name="criteria">criteria to add.</param>
      <returns>Current instance of CriteriaBatch</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.OnRead``1(System.Action{``0})">
      <summary>
            하나의 Entity 정보를 읽을 때 지정된 readAction을 수행하도록 설정한다.
            </summary>
      <typeparam name="T">Entity 수형</typeparam>
      <param name="readAction">Entity Loading시 실행할 Action</param>
      <returns>Current instance of CriteriaBatch</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.OnRead``1(System.Action{System.Collections.Generic.ICollection{``0},System.Int32})">
      <summary>
            복수의 Entity 정보를 읽을 때 지정된 readAction을 수행하도록 설정한다.
            </summary>
      <typeparam name="T">Entity 수형</typeparam>
      <param name="readAction">Entity Loading시 실행할 Action</param>
      <returns>Current instance of CriteriaBatch</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.OnRead``1(System.Action{System.Collections.Generic.ICollection{``0}})">
      <summary>
            복수의 Entity 정보를 읽을 때 지정된 readAction을 수행하도록 설정한다.
            </summary>
      <typeparam name="T">Entity 수형</typeparam>
      <param name="readAction">Entity Loading시 실행할 Action</param>
      <returns>Current instance of CriteriaBatch</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.Execute">
      <summary>
            등록된 Batch 작업을 실행한다. (Session이 정의되어 있지 않다면, <see cref="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.CurrentSession" />을 사용한다.)
            </summary>
      <returns>실행 결과</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.Execute(NHibernate.ISession)">
      <summary>
            지정된 Session에 대해 등록된 Criteria를 Batch 방식으로 수행한다.
            </summary>
      <param name="theSession">Criteria를 수행한 Session</param>
      <returns>실행 결과</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.Paging(System.Int32,System.Int32)">
      <summary>
            Current Criteria의 Paging 설정을 수행한다.
            </summary>
      <param name="firstResult">결과 Set의 첫번째 인덱스</param>
      <param name="maxResults">결과 Set의 최대 레코드 수 (0 이하이면 설정하지 않는다.)</param>
      <returns>Current instance of CriteriaBatch</returns>
    </member>
    <member name="E:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch.ProcessCriteria">
      <summary>
            Criteria 실행시에 발생하는 이벤트
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression">
      <summary>
            속성이 같은 값을 가지거나 NULL 인 경우를 나타내는 Criterion을 생성합니다.<br />
            예 : ( Product = 'RealAdmin' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression.#ctor(System.String,System.Object)">
      <summary>
            생성자
            </summary>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression.#ctor(NHibernate.Criterion.IProjection,System.Object)">
      <summary>
            생성자
            </summary>
      <param name="projection">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression.ToString">
      <summary>
            현재 인스턴스를 나타내는 문자열을 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
      <summary>
             Render a SqlString for the expression.
            </summary>
      <returns>
            A SqlString that contains a valid Sql fragment.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
      <summary>
             Return typed values for all parameters in the rendered SQL fragment
            </summary>
      <returns>
            An array of TypedValues for the Expression.
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqIncludeNullExpression.GetProjections">
      <summary>
            Return all projections used in this criterion
            </summary>
      <returns>
            An array of IProjection used by the Expression.
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression">
      <summary>
            비교할 값이 NULL일 경우에는 IsNull을, 값이 있을 경우에는 Eq 을 수행한다. ( VALUE가 NULL이면 IS NULL, VALUE에 값이 있으면 = 을 쓴다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.#ctor(System.String,System.Object)">
      <summary>
            생성자
            </summary>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.#ctor(System.String,System.Object,System.Boolean)">
      <summary>
            생성자
            </summary>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
      <param name="ignoreCase">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.#ctor(NHibernate.Criterion.IProjection,System.Object)">
      <summary>
            생성자
            </summary>
      <param name="projection">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.ToString">
      <summary>
            Return string that represent current Expression
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
      <summary>
            Return sql string that build with the specified criteria
            </summary>
      <seealso cref="M:NHibernate.Criterion.ICriterion.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
      <summary>
            Return Typed Value 
            </summary>
      <seealso cref="M:NHibernate.Criterion.ICriterion.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.EqOrNullExpression.GetProjections">
      <summary>
            Return all projections used in this criterion
            </summary>
      <returns>
            An array of IProjection used by the Expression.
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureBase">
      <summary>
            Future Value (Lazy Loading Entity)를 구현하기 위한 기본 클래스입니다.
            Current Thread 하에서 여러 Entity들을 Future Value형식으로 Loading하기로 예약하고, 
            실제 사용할 때 하나의 Batch Query 형식으로, 한꺼번에 가져온다.
            이렇게 하면 Network Round trip이 줄어들고, 실제 성능이 향상된다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureBase.CacheKey">
      <summary>
            캐시를 위한 Local 저장소 키
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureBase.ExecuteBatchQuery">
      <summary>
            Execute all the queries in the batch.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureBase.IsLoaded">
      <summary>
            indicateing this instance was loaded
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureBase.Batcher">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch" /> instance in current thread context.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1">
      <summary>
            Future Value를 로딩하기위한 Query들을 예약 보관하고 있다가 한번의 배치작업으로 실행해서, 
            실제로 값을 
            Hold the future of a query, when you try to iterate over
            a instance of <see cref="T:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1" /> or access the Results
            or TotalCount properties, all the future queries in the current context
            (current thread / current request) are executed as a single batch and all
            their results are loaded in a single round trip.
            </summary>
      <typeparam name="TEntity">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.#ctor(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Constructor
            </summary>
      <param name="detachedCriteria">criteria to look for</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.#ctor(NHibernate.Criterion.DetachedCriteria,System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="detachedCriteria">criteria to look for</param>
      <param name="firstResult">first result index (start by 0)</param>
      <param name="maxResults">maximum result count (if maxResults is 0, retrieve all records from firstResult.)</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.#ctor(NHibernate.Criterion.DetachedCriteria,NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOptions)">
      <summary>
            Constructor
            </summary>
      <param name="detachedCriteria">criteria to look for</param>
      <param name="options">future query option</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.GetEnumerator">
      <summary>
            Return enumerator for TEntity
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.TotalCount">
      <summary>
            조회한 Entity의 전체 갯수
            </summary>
      <seealso cref="F:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOptions.WithTotalCount" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.Results">
      <summary>
            조회한 Entity의 collection
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOf`1.SingleResult">
      <summary>
            결과 Entity. (유일하지 않거나, 결과 Entity가 null이면 예외가 발생한다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOptions">
      <summary>
            Future Query를 수행시에 부가적인 작업에 대한 옵션
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOptions.None">
      <summary>
            부가적인 수행을 하지 않는다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureQueryOptions.WithTotalCount">
      <summary>
            결과 값에 Total Count 값도 계산한다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValue`1">
      <summary>
            지정된 형식의 Entity에 대한 Loading을 예약한 정보. 
            이 클래스로 예약된 값들은 Current Thread하에서 <see cref="T:NSoft.NFramework.Data.NHibernateEx.Criterion.CriteriaBatch" />를 이용하여 
            한번의 Batch 작업으로 Loading을 수행한다.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValue`1.#ctor(System.Object,NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValueOptions)">
      <summary>
            Initialize a new instance of FutureValue with identity value to look for.
            </summary>
      <param name="id">
      </param>
      <param name="options">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValue`1.GetValueOrDefault">
      <summary>
            실제 Loading을 수행해보고, 실제 값이 없다면 기본값을 반환한다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValue`1.Value">
      <summary>
            실제 Loading 할 값 (아직 Loading이 안되었다면 현재까지 예약된 Loading 작업을 배치작업으로 수행한다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValueOptions">
      <summary>
            FutureValue의 실제값 조회시의 Entity 존재 여부에 따른 행동방식
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValueOptions.NullIfNotFound">
      <summary>
        <see cref="M:NHibernate.ISession.Get``1(System.Object)" />과 같이 조회한 값이 없다면 Null을 반환.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Criterion.FutureValueOptions.ThrowIfNotFound">
      <summary>
        <see cref="M:NHibernate.ISession.Load``1(System.Object)" />와 같이 조회한 값이 없다면 예외를 발생시킨다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.InsensitiveLikeIncludeNullExpression">
      <summary>
            값이 NULL인 경우를 포함해서,  매칭되는 검색, ((A LIKE P0) OR (A IS NULL)) <br />
            예: 예 : ( Product = 'Real%' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.InsensitiveLikeIncludeNullExpression.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
      <summary>
             Return typed values for all parameters in the rendered SQL fragment
            </summary>
      <returns>
            An array of TypedValues for the Expression.
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression">
      <summary>
            Entity의 속성이 특정 형식인지를 판단하는 Restriction
            </summary>
      <remarks>
            실제 HQL문으로 생성시 "Customer isa (Northwind.DataObjects.Customer)" 와 같이 사용된다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.#ctor(System.Type)">
      <summary>
            Initialize a new instance of IsAExpression with the specified type for verifying
            </summary>
      <param name="entityClass">type for verifying</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.#ctor(System.String,System.Type)">
      <summary>
            Initialize a new instance of IsAExpression with the specified type for verifing, and property name alias
            </summary>
      <param name="propertyNameOrAlias">alias of property name</param>
      <param name="entityClass">type for verifying</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
      <summary>
             HQL 문을 생성한다.
            </summary>
      <exception cref="T:NHibernate.QueryException">
      </exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
      <summary>
      </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.ToString">
      <summary>
            HQL 문장을 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.Create(System.Type)">
      <summary>
            새로운 IsAExpression 인스턴스를 생성합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.Create``1">
      <summary>
            새로운 IsAExpression 인스턴스를 생성합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.Create(System.String,System.Type)">
      <summary>
            새로운 IsAExpression 인스턴스를 생성합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.Create``1(System.String)">
      <summary>
            새로운 IsAExpression 인스턴스를 생성합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.IsAExpression.GetProjections">
      <summary>
            Return all projections used in this criterion
            </summary>
      <returns>
            An array of IProjection used by the Expression.
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.ProcessCriteriaDelegate">
      <summary>
            지정된 <see cref="T:NHibernate.ICriteria" />에 어떤 부가적인 처리를 위한 Delegate입니다.
            </summary>
      <param name="criteria">부가 처리해야 할 대상</param>
      <returns>부가 처리가 된 <see cref="T:NHibernate.ICriteria" /></returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn">
      <summary>
            XmlIn
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.#ctor(System.String,System.Collections.IEnumerable)">
      <summary>
            Constructor
            </summary>
      <param name="propertyName">
      </param>
      <param name="values">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.#ctor(System.String,System.Collections.IEnumerable,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="propertyName">
      </param>
      <param name="values">
      </param>
      <param name="maxParametersToNotUseXml">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.Create(System.String,System.Collections.IEnumerable)">
      <summary>
            Create criterion
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.Create(System.String,System.Collections.IEnumerable,System.Int32)">
      <summary>
            Create criterion
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.GetTypedValues(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
      <summary>
            Return array of TypedValue 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery,System.Collections.Generic.IDictionary{System.String,NHibernate.IFilter})">
      <summary>
            Return sql string
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Criterion.XmlIn.ToString">
      <summary>
             Return sql string with current values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NHibernate.Dialect.CubridDialect">
      <summary>
            Cubrid Database 용 Dialect 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Dialect.MsSqlCeDialect">
      <summary>
            SQL Server CE 를 사용할 때 사용하는 Dialect입니다. NHibernate에서 제공하는 것은 AnsiString을 지원하지 못하는데, 그 문제를 해결했습니다.
            
            참고 : http://netfrustrations.blogspot.com/2009/10/nhibernate-mapping-typeansistring.html
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType">
      <summary>
            이진 데이타를 가지는 속성 값을 압축하여 저장하는 UserType의 추상 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType">
      <summary>
            속성 값을 압축하여 저장할 수 있도록 하는 UserType입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistent "equality" ie. equality of persistent state
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns>
            a copy
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.Replace(System.Object,System.Object,System.Object)">
      <summary>
            During merge, replace the existing (<paramref name="target" />) value in the entity
            we are merging to with a new (<paramref name="original" />) value from the detached
            entity we are merging. For immutable objects, or null values, it is safe to simply
            return the first parameter. For mutable objects, it is safe to return a copy of the
            first parameter. For objects with component values, it might make sense to
            recursively replace component values.
            </summary>
      <param name="original">the value from the detached entity being merged</param>
      <param name="target">the value in the managed entity</param>
      <param name="owner">the managed entity</param>
      <returns>
            the value to be merged
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.Assemble(System.Object,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="owner">the owner of the cached object</param>
      <returns>
            a reconstructed object from the cachable representation
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.Disassemble(System.Object)">
      <summary>
            Transform the object into its cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. That may not be enough
            for some implementations, however; for example, associations must be cached as
            identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <returns>
            a cacheable representation of the object
            </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.SqlTypes">
      <summary>
            The SQL types for the columns mapped by this type. 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.ReturnedType">
      <summary>
            The type returned by <c>NullSafeGet()</c></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType.CompressValue(System.Byte[])">
      <summary>
            문자열을 압축합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType.DecompressValue(System.Byte[])">
      <summary>
            압축된 정보를 복원하여 문자열로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType.ReturnedType">
      <summary>
            The type returned by <c>NullSafeGet()</c></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressBlobUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType">
      <summary>
            문자열을 압축하여 저장하는 User Type의 기본 형식입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.CompressValue(System.String)">
      <summary>
            문자열을 압축합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.DecompressValue(System.Byte[])">
      <summary>
            압축된 정보를 복원하여 문자열로 반환합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.TextEncoder">
      <summary>
            Text 인코딩 방식
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.ReturnedType">
      <summary>
            The type returned by <c>NullSafeGet()</c></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractCompressStringUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.DeflateBlobUserType">
      <summary>
            Blob 데이타를 <see cref="T:NSoft.NFramework.Compressions.Compressors.DeflateCompressor" />를 통해 압축하여 저장할 수 있도록 하는 UserType입니다.
            </summary>
      <seealso cref="T:NSoft.NFramework.Compressions.Compressors.DeflateCompressor" />
      <seealso cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.GZipBlobUserType" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.DeflateBlobUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.DeflateStringUserType">
      <summary>
            Deflate 압축 알고리즘을 이용하여, 문자열을 압축하여 DB에 저장하는 UserType 입니다.
            </summary>
      <seealso cref="T:NSoft.NFramework.Compressions.Compressors.DeflateCompressor" />
      <seealso cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.GZipStringUserType" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.DeflateStringUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.GZipBlobUserType">
      <summary>
            이진 데이타를 Gzip으로 압축하여 저장하는 UserType입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.GZipBlobUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.GZipStringUserType">
      <summary>
            GZip Compressor를 이용하여, 문자열을 압축하여 DB에 저장합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.GZipStringUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.IoCCompressBlobUserType">
      <summary>
            IoC 환경설정에 지정된 <see cref="T:NSoft.NFramework.Compressions.ICompressor" />를 사용하도록 합니다. 환경설정에 설정된 값이 없다면, <see cref="T:NSoft.NFramework.Compressions.Compressors.SharpGZipCompressor" />를 사용합니다.
            </summary>
      <example>
        <code>
            	// Hbm
            
            	<class name="className">
            		...
            
            	    <property name="CompressedData" type="NSoft.NFramework.Data.Domain.UserTypes.IoCCompressBlobUserType, NSoft.NFramework.Data.NHibernateEx"><column nmae="CompressedData" length="9999" /></property></class>
            
            
            	// Fluent
            	Map(x=&gt;x.CompressedData)
            		.CustomType{IoCCompressBlobUserType}()
            		.Columns.Clear()
            		.Columns.Add(new ColumnMapping {Name = "CompressedData", Length = 9999});
            
            
            
            
            </code>
      </example>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.IoCCompressBlobUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.IoCCompressStringUserType">
      <summary>
            IoC 환경설정에 지정된 <see cref="T:NSoft.NFramework.Compressions.ICompressor" />를 사용하도록 합니다. 환경설정에 설정된 값이 없다면, <see cref="T:NSoft.NFramework.Compressions.Compressors.SharpGZipCompressor" />를 사용합니다.
            </summary>
      <example>
        <code>
            	// Hbm
            
            	<class name="className">
            		...
            
            	    <property name="JsonData" type="NSoft.NFramework.Data.Domain.IoCCompressStringUserType, NSoft.NFramework.Data"><column nmae="CompressedData" length="9999" /></property></class></code>
      </example>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.IoCCompressStringUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SevenZipBlobUserType">
      <summary>
            7-Zip 압축 알고리즘으로 이진 데이타를 압축하여 DB에 저장할 수 있도록 하는 UserType입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SevenZipBlobUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SevenZipStringUserType">
      <summary>
            7-Zip 압축 알고리즘을 이용하여, 문자열을 압축하여 저장할 수 있도록 하는 UserType 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SevenZipStringUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpBZip2BlobUserType">
      <summary>
            이진 데이타를 Sharp BZip2 으로 압축하여 저장하는 UserType입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpBZip2BlobUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpBZip2StringUserType">
      <summary>
            SharpBZip2 Compressor를 이용하여, 문자열을 압축하여 DB에 저장합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpZipBlobUserType">
      <summary>
            이진 데이타를 SharpGZip 으로 압축하여 저장하는 UserType입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpZipBlobUserType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpZipStringType">
      <summary>
            SharpGZip Compressor를 이용하여, 문자열을 압축하여 DB에 저장합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SharpZipStringType.Compressor">
      <summary>
            압축기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType">
      <summary>
            문자열을 암호화하여 저장하는 UserType입니다. 보안에 사용하면 좋습니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Encrypt(System.String)">
      <summary>
            문자열을 암호화하여 Hex Format의 문자열로 반환한다.
            </summary>
      <param name="plainText">암호화할 문자열</param>
      <returns>암호화된 문자열</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Decrypt(System.String)">
      <summary>
            Hex Format으로 암호화된 문자열을 복호화하여 원래 문자열로 반환한다.
            </summary>
      <param name="cipherText">Hex Format으로 암호화된 문자열</param>
      <returns>Plain Text</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistent "equality" ie. equality of persistent state
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns>
            a copy
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Replace(System.Object,System.Object,System.Object)">
      <summary>
            During merge, replace the existing (<paramref name="target" />) value in the entity
            we are merging to with a new (<paramref name="original" />) value from the detached
            entity we are merging. For immutable objects, or null values, it is safe to simply
            return the first parameter. For mutable objects, it is safe to return a copy of the
            first parameter. For objects with component values, it might make sense to
            recursively replace component values.
            </summary>
      <param name="original">the value from the detached entity being merged</param>
      <param name="target">the value in the managed entity</param>
      <param name="owner">the managed entity</param>
      <returns>
            the value to be merged
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Assemble(System.Object,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="owner">the owner of the cached object</param>
      <returns>
            a reconstructed object from the cachable representation
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Disassemble(System.Object)">
      <summary>
            Transform the object into its cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. That may not be enough
            for some implementations, however; for example, associations must be cached as
            identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <returns>
            a cacheable representation of the object
            </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.Encryptor">
      <summary>
            대칭형 암호기
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.SqlTypes">
      <summary>
            The SQL types for the columns mapped by this type. 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.ReturnedType">
      <summary>
            The type returned by <c>NullSafeGet()</c></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AbstractSymmetricEncryptStringUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.AriaEncryptStringUserType">
      <summary>
            ARIA 대칭형 암호화 알고리즘을 이용하여 값을 암호화하는 수형입니다.
            </summary>
      <seealso cref="T:NSoft.NFramework.Cryptography.Encryptors.AriaSymmetricEncryptor" />
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.DESEncryptStringUserType">
      <summary>
            DES 대칭형 알고리즘을 이용하여, 문자열을 암호화합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.DESEncryptStringUserType.Encryptor">
      <summary>
            대칭형 암호기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.IoCEncryptStringUserType">
      <summary>
            Castle.Windsor 환경설정에서 지정한 ISymmetricEncrytor Component 를 암호화 컴포넌트로 사용합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.IoCEncryptStringUserType.Encryptor">
      <summary>
            대칭형 암호기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.RC2EncryptStringUserType">
      <summary>
            RC2 대칭형 알고리즘을 사용하여 문자열을 암호화하여 저장하는 UserType 입니다.
            </summary>
      <seealso cref="T:System.Security.Cryptography.RC2CryptoServiceProvider" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.RC2EncryptStringUserType.Encryptor">
      <summary>
            대칭형 암호기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.RijndaelEncryptStringUserType">
      <summary>
            Rijndael 대칭형 알고리즘을 사용하여 문자열을 암호화하여 저장하는 UserType 입니다.
            </summary>
      <seealso cref="T:System.Security.Cryptography.RijndaelManaged" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.RijndaelEncryptStringUserType.Encryptor">
      <summary>
            대칭형 암호기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TripleDESEncryptStringUserType">
      <summary>
            TripleDES 대칭형 알고리즘을 사용하여 문자열을 암호화하여 저장하는 UserType 입니다.
            </summary>
      <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TripleDESEncryptStringUserType.Encryptor">
      <summary>
            대칭형 암호기
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonCompressedSerializableUserType">
      <summary>
            특정 객체를 JSON 직렬화를 통해 DB에 저장하고, 읽어올 때에는 역직렬화를 통해 객체로 반환합니다.
            겍체의 수형 정보와 직렬화 정보가 저장됩니다.
            </summary>
      <example>
        <code>
            	// Hbm
            
            	<class name="className">
            		...
            
            	    <property name="JsonData" type="NSoft.NFramework.Data.Domain.JsonCompressedSerializableUserType, NSoft.NFramework.Data"><column nmae="Json_Compressed_Serialized_Data" length="9999" /></property></class>
            
            	// Fluent
            	Map(x=&gt;x.JsonData)
            		.CustomType{JsonCompressedSerializableUserType}()
            		.Columns.Clear()
            		.Columns.Add(new ColumnMapping {Name = "Json_Compressed_Serialized_Data", Length = 9999});
            
            </code>
      </example>
      <seealso cref="T:NSoft.NFramework.Json.JsonTool" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonCompressedSerializableUserType.Serialize(System.Object)">
      <summary>
            객체를 직렬화합니다.
            </summary>
      <param name="graph">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonCompressedSerializableUserType.Deserialize(System.Byte[])">
      <summary>
            저장된 문자열을 역직렬화하여 객체로 반환한다.
            </summary>
      <param name="compressedBytes">압축 저장된 Data</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonCompressedSerializableUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonCompressedSerializableUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType">
      <summary>
            특정 객체를 JSON 직렬화를 통해 DB에 저장하고, 읽어올 때에는 역직렬화를 통해 객체로 반환합니다.
            겍체의 수형 정보와 직렬화 정보가 저장됩니다.
            </summary>
      <example>
        <code>
            	// Hbm
            
            	<class name="className">
            		...
            
            	    <property name="JsonData" type="NSoft.NFramework.Data.Domain.JsonSerializableUserType, NSoft.NFramework.Data"><column nmae="Json_Serialized_Data" /></property></class>
            
            	// Fluent
            	Map(x=&gt;x.JsonData)
            		.CustomType{JsonSerializableUserType}()
            		.Columns.Clear()
            		.Columns.Add(new ColumnMapping {Name = "Json_Serialized_Data", Length = 9999});
            
            </code>
      </example>
      <seealso cref="!:JsonUtil" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.Serialize(System.Object)">
      <summary>
            객체를 직렬화합니다.
            </summary>
      <param name="graph">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.Deserialize(System.String)">
      <summary>
            저장된 문자열을 역직렬화하여 객체로 반환한다.
            </summary>
      <param name="savedText">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistent "equality" ie. equality of persistent state
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
            Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns>
            a copy
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.Replace(System.Object,System.Object,System.Object)">
      <summary>
            During merge, replace the existing (<paramref name="target" />) value in the entity
            we are merging to with a new (<paramref name="original" />) value from the detached
            entity we are merging. For immutable objects, or null values, it is safe to simply
            return the first parameter. For mutable objects, it is safe to return a copy of the
            first parameter. For objects with component values, it might make sense to
            recursively replace component values.
            </summary>
      <param name="original">the value from the detached entity being merged</param>
      <param name="target">the value in the managed entity</param>
      <param name="owner">the managed entity</param>
      <returns>
            the value to be merged
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.Assemble(System.Object,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="owner">the owner of the cached object</param>
      <returns>
            a reconstructed object from the cachable representation
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.Disassemble(System.Object)">
      <summary>
            Transform the object into its cacheable representation. At the very least this
            method should perform a deep copy if the type is mutable. That may not be enough
            for some implementations, however; for example, associations must be cached as
            identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <returns>
            a cacheable representation of the object
            </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.SqlTypes">
      <summary>
            The SQL types for the columns mapped by this type. 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.ReturnedType">
      <summary>
            The type returned by <c>NullSafeGet()</c></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.JsonSerializableUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType">
      <summary>
            객체를 직렬화하여 저장할 때, 직렬화 방법, 원본 객체 수형, 직렬화 결과를 하나의 수형으로 제공하도록 합니다.<br /><see cref="T:NSoft.NFramework.Serializations.ISerializedObject" />를 구현한 Binary, Json, Bson, Xml, Soap 등의 직렬화 방법을 제공합니다.\
            직렬화 방법을 같이 저장하기 때문에, 역직렬화를 그 방법으로 수행하면 됩니다.
            
            실제 원본 객체를 얻으로고 한다면, <seealso cref="M:NSoft.NFramework.Serializations.ISerializedObject.GetDeserializedObject" />를 수행하면 됩니다.
            </summary>
      <example>
        <code>
            	// Hbm
            
            	<class name="className">
            		...
            
            	    <property name="SerializedObject" type="NSoft.NFramework.Data.Domain.SerializedObjectUserType, NSoft.NFramework.Data"><column name="SERIALIZATION_METHOD" /><column nmae="OBJECT_TYPE_NAME" /><column name="SERIALIZED_VALUE" length="9999" /></property></class>
            
            	// Fluent 
            	Map(x =&gt; x.SerializedObject)
            		.CustomType{SerializedObjectUserType}()
            		.Columns.Clear()
            		.Columns.Add("SERIALIZATION_METHOD")
            		.Columns.Add("OBJECT_TYPE_NAME")
            		.Columns.Add(new ColumnMapping {Name = "SERIALIZED_VALUE", Length = 9999});
            
            </code>
      </example>
      <seealso cref="T:NSoft.NFramework.Serializations.SerializationMethod" />
      <seealso cref="T:NSoft.NFramework.Serializations.SerializedObjects.BinarySerializedObject" />
      <seealso cref="T:NSoft.NFramework.Serializations.SerializedObjects.BsonSerializedObject" />
      <seealso cref="T:NSoft.NFramework.Serializations.SerializedObjects.JsonSerializedObject" />
      <seealso cref="T:NSoft.NFramework.Serializations.SerializedObjects.XmlSerializedObject" />
      <seealso cref="T:NSoft.NFramework.Serializations.SerializedObjects.SoapSerializedObject" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.GetPropertyValue(System.Object,System.Int32)">
      <summary>
            Get the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <returns>
            the property value
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.SetPropertyValue(System.Object,System.Int32,System.Object)">
      <summary>
            Set the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <param name="value">the value to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistence
                        "equality", ie. equality of persistent state.
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.NullSafeGet(System.Data.IDataReader,System.String[],NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a IDataReader. Implementors
                        should handle possibility of null values.
            </summary>
      <param name="dr">IDataReader</param>
      <param name="names">the column names</param>
      <param name="session" />
      <param name="owner">the containing entity</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,System.Boolean[],NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
                        Implementors should handle possibility of null values.
                        A multi-column type should be written to parameters starting from index.
                        If a property is not settable, skip it and don't increment the index.
            </summary>
      <param name="cmd" />
      <param name="value" />
      <param name="index" />
      <param name="settable" />
      <param name="session" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.Disassemble(System.Object,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Transform the object into its cacheable representation.
            At the very least this method should perform a deep copy.
            That may not be enough for some implementations, method should perform a deep copy. That may not be enough for some implementations, however; for example, associations must be cached as identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <param name="session" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.Assemble(System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation.
            At the very least this method should perform a deep copy. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="session" />
      <param name="owner" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.Replace(System.Object,System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            During merge, replace the existing (target) value in the entity we are merging to
            with a new (original) value from the detached entity we are merging. For immutable
            objects, or null values, it is safe to simply return the first parameter. For
            mutable objects, it is safe to return a copy of the first parameter. However, since
            composite user types often define component values, it might make sense to recursively
            replace component values in the target object.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.PropertyNames">
      <summary>
            Get the "property names" that may be used in a query.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.PropertyTypes">
      <summary>
            Get the corresponding "property types"
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.ReturnedClass">
      <summary>
            The class returned by NullSafeGet().
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.SerializedObjectUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType">
      <summary>
            NHibernate가 지원하는 <see cref="T:System.Globalization.CultureInfo" />에 대한 저장 공간의 기본 크기가 5로 제한되어 있다. 
            중화권의 경우 5자가 넘는 경우가 있어서 128자 이상으로 저장공간을 늘렸습니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistent "equality"
                        ie. equality of persistent state
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a JDBC resultset.
                        Implementors should handle possibility of null values.
            </summary>
      <param name="rs">a IDataReader</param>
      <param name="names">column names</param>
      <param name="owner">the containing entity</param>
      <returns />
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
                        Implementors should handle possibility of null values.
                        A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd">a IDbCommand</param>
      <param name="value">the object to write</param>
      <param name="index">command parameter index</param>
      <exception cref="T:NHibernate.HibernateException">HibernateException</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns>
            a copy
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.Replace(System.Object,System.Object,System.Object)">
      <summary>
            During merge, replace the existing (<paramref name="target" />) value in the entity
                        we are merging to with a new (<paramref name="original" />) value from the detached
                        entity we are merging. For immutable objects, or null values, it is safe to simply
                        return the first parameter. For mutable objects, it is safe to return a copy of the
                        first parameter. For objects with component values, it might make sense to
                        recursively replace component values.
            </summary>
      <param name="original">the value from the detached entity being merged</param>
      <param name="target">the value in the managed entity</param>
      <param name="owner">the managed entity</param>
      <returns>
            the value to be merged
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.Assemble(System.Object,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation. At the very least this
                        method should perform a deep copy if the type is mutable. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="owner">the owner of the cached object</param>
      <returns>
            a reconstructed object from the cachable representation
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.Disassemble(System.Object)">
      <summary>
            Transform the object into its cacheable representation. At the very least this
                        method should perform a deep copy if the type is mutable. That may not be enough
                        for some implementations, however; for example, associations must be cached as
                        identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <returns>
            a cacheable representation of the object
            </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.SqlTypes">
      <summary>
            The SQL types for the columns mapped by this type. 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.ReturnedType">
      <summary>
            The type returned by <c>NullSafeGet()</c></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.CultureUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType">
      <summary>
        <see cref="T:NSoft.NFramework.TimePeriods.TimeBlock" />에 대한 NHibernate용 UserType입니다. 기간을 나타냅니다.
            </summary>
      <example>
        <code>
            	// Hbm
            
            	<class name="className">
            		...
            
            	    <property name="ActiveBlock" type="NSoft.NFramework.Data.Domain.TimeBlockUserType, NSoft.NFramework.Data"><column name="ACTIVE_START_TIME" /><column nmae="ACTIVE_DURATION" /></property></class>
            
            	// Fluent 방식
            	Map(x =&gt; x.ActivePeriod)
            		.CustomType{TimeBlockUserType}()
            		.Columns.Clear()
            		.Columns.Add("ACTIVE_FROM_DATE")
            		.Columns.Add("ACTIVE_TO_DATE");
            </code>
      </example>
      <seealso cref="T:NSoft.NFramework.TimePeriods.TimeBlock" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.AsTimeBlock(System.Object)">
      <summary>
            지정한 객체를 <see cref="T:NSoft.NFramework.TimePeriods.TimeRange" />로 캐스팅합니다.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.GetPropertyValue(System.Object,System.Int32)">
      <summary>
            Get the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <returns>
            the property value
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.SetPropertyValue(System.Object,System.Int32,System.Object)">
      <summary>
            Set the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <param name="value">the value to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistence
                        "equality", ie. equality of persistent state.
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.NullSafeGet(System.Data.IDataReader,System.String[],NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a IDataReader. Implementors should handle possibility of null values.
            </summary>
      <param name="dr">IDataReader</param>
      <param name="names">the column names</param>
      <param name="session" />
      <param name="owner">the containing entity</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,System.Boolean[],NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.Disassemble(System.Object,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Transform the object into its cacheable representation.
            At the very least this method should perform a deep copy.
            That may not be enough for some implementations, method should perform a deep copy. That may not be enough for some implementations, however; for example, associations must be cached as identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <param name="session" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.Assemble(System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation.
            At the very least this method should perform a deep copy. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="session" />
      <param name="owner" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.Replace(System.Object,System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            During merge, replace the existing (target) value in the entity we are merging to
            with a new (original) value from the detached entity we are merging. For immutable
            objects, or null values, it is safe to simply return the first parameter. For
            mutable objects, it is safe to return a copy of the first parameter. However, since
            composite user types often define component values, it might make sense to recursively
            replace component values in the target object.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.PropertyNames">
      <summary>
            Get the "property names" that may be used in a query.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.PropertyTypes">
      <summary>
            Get the corresponding "property types"
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.ReturnedClass">
      <summary>
            The class returned by NullSafeGet().
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeBlockUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType">
      <summary>
        <see cref="T:NSoft.NFramework.TimePeriods.TimeRange" />에 대한 NHibernate용 UserType입니다. 기간을 나타냅니다.
            </summary>
      <example>
        <code>
            	// Hbm
            	<class name="className">
            		...
            
            	    <property name="ActivePeriod" type="NSoft.NFramework.Data.Domain.TimeRangeUserType, NSoft.NFramework.Data"><column name="ACTIVE_START_TIME" /><column nmae="ACTIVE_END_TIME" /></property></class>
            
            	// Fluent 방식
            	Map(x =&gt; x.ActivePeriod)
            		.CustomType{TimeRangeUserType}()
            		.Columns.Clear()
            		.Columns.Add("ACTIVE_FROM_DATE")
            		.Columns.Add("ACTIVE_TO_DATE");
            </code>
      </example>
      <seealso cref="T:NSoft.NFramework.TimePeriods.TimeRange" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.AsTimeRange(System.Object)">
      <summary>
            지정한 객체를 <see cref="T:NSoft.NFramework.TimePeriods.TimeRange" />로 캐스팅합니다.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.GetPropertyValue(System.Object,System.Int32)">
      <summary>
            Get the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <returns>
            the property value
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.SetPropertyValue(System.Object,System.Int32,System.Object)">
      <summary>
            Set the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <param name="value">the value to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistence "equality", ie. equality of persistent state.
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.NullSafeGet(System.Data.IDataReader,System.String[],NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a IDataReader. Implementors
                        should handle possibility of null values.
            </summary>
      <param name="dr">IDataReader</param>
      <param name="names">the column names</param>
      <param name="session" />
      <param name="owner">the containing entity</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,System.Boolean[],NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.Disassemble(System.Object,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Transform the object into its cacheable representation.
            At the very least this method should perform a deep copy.
            That may not be enough for some implementations, method should perform a deep copy. That may not be enough for some implementations, however; for example, associations must be cached as identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <param name="session" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.Assemble(System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation.
            At the very least this method should perform a deep copy. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="session" />
      <param name="owner" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.Replace(System.Object,System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            During merge, replace the existing (target) value in the entity we are merging to
            with a new (original) value from the detached entity we are merging. For immutable
            objects, or null values, it is safe to simply return the first parameter. For
            mutable objects, it is safe to return a copy of the first parameter. However, since
            composite user types often define component values, it might make sense to recursively
            replace component values in the target object.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.PropertyNames">
      <summary>
            Get the "property names" that may be used in a query.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.PropertyTypes">
      <summary>
            Get the corresponding "property types"
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.ReturnedClass">
      <summary>
            The class returned by NullSafeGet().
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.TimeRangeUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType">
      <summary>
            NHibernate용 <see cref="T:NSoft.NFramework.TimePeriods.YearAndWeek" />의 User Type입니다.
            </summary>
      <example>
        <code>
            	// Hbm
            	<class name="xxx">
            		...
            
            		<property name="YearAndWeek" type="NSoft.NFramework.Data.Domain.YearAndWeekUserType, NSoft.NFramework.Data"><column name="YEAR_NO" /><column name="WEEK_NO" /></property>
            
                    ...
            	</class>
            
            	// Fluent 방식
            	Map(x =&gt; x.YearAndWeek)
            		.CustomType{YearAndWeekUserType}()
            		.Columns.Clear()
            		.Columns.Add("YEAR_NO")
            		.Columns.Add("WEEK_NO");
            
            
            
            
            </code>
      </example>
      <seealso cref="T:NSoft.NFramework.TimePeriods.YearAndWeek" />
      <seealso cref="T:NSoft.NFramework.TimePeriods.TimeRanges.WeekRange" />
      <seealso cref="T:NSoft.NFramework.TimePeriods.WeekTool" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.GetPropertyValue(System.Object,System.Int32)">
      <summary>
            Get the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <returns>
            the property value
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.SetPropertyValue(System.Object,System.Int32,System.Object)">
      <summary>
            Set the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <param name="value">the value to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistence
                        "equality", ie. equality of persistent state.
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.NullSafeGet(System.Data.IDataReader,System.String[],NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a IDataReader. Implementors
                        should handle possibility of null values.
            </summary>
      <param name="dr">IDataReader</param>
      <param name="names">the column names</param>
      <param name="session" />
      <param name="owner">the containing entity</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,System.Boolean[],NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
      <param name="cmd" />
      <param name="value" />
      <param name="index" />
      <param name="settable" />
      <param name="session" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd" />
      <param name="value" />
      <param name="index" />
      <param name="session" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.Disassemble(System.Object,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Transform the object into its cacheable representation.
            At the very least this method should perform a deep copy.
            That may not be enough for some implementations, method should perform a deep copy. That may not be enough for some implementations, however; for example, associations must be cached as identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <param name="session" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.Assemble(System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation.
            At the very least this method should perform a deep copy. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="session" />
      <param name="owner" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.Replace(System.Object,System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            During merge, replace the existing (target) value in the entity we are merging to
            with a new (original) value from the detached entity we are merging. For immutable
            objects, or null values, it is safe to simply return the first parameter. For
            mutable objects, it is safe to return a copy of the first parameter. However, since
            composite user types often define component values, it might make sense to recursively
            replace component values in the target object.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.PropertyNames">
      <summary>
            Get the "property names" that may be used in a query.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.PropertyTypes">
      <summary>
            Get the corresponding "property types"
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.ReturnedClass">
      <summary>
            The class returned by NullSafeGet().
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearAndWeekUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType">
      <summary>
            NHibernate용 <see cref="T:NSoft.NFramework.YearWeek" />의 User Type입니다.
            </summary>
      <example>
        <code>
            	// Hbm
            	<class name="xxx">
            		...
            
            		<property name="YearWeek" type="NSoft.NFramework.Data.Domain.UserTypes.YearWeekUserType, NSoft.NFramework.Data.NHibernateEx"><column name="YEAR_NO" /><column name="WEEK_NO" /></property>
            
                    ...
            	</class></code>
      </example>
      <seealso cref="T:NSoft.NFramework.YearWeek" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.GetPropertyValue(System.Object,System.Int32)">
      <summary>
            Get the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <returns>
            the property value
            </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.SetPropertyValue(System.Object,System.Int32,System.Object)">
      <summary>
            Set the value of a property
            </summary>
      <param name="component">an instance of class mapped by this "type"</param>
      <param name="property" />
      <param name="value">the value to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.Equals(System.Object,System.Object)">
      <summary>
            Compare two instances of the class mapped by this type for persistence
                        "equality", ie. equality of persistent state.
            </summary>
      <param name="x" />
      <param name="y" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.GetHashCode(System.Object)">
      <summary>
            Get a hashcode for the instance, consistent with persistence "equality"
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.NullSafeGet(System.Data.IDataReader,System.String[],NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Retrieve an instance of the mapped class from a IDataReader. Implementors should handle possibility of null values.
            </summary>
      <param name="dr">IDataReader</param>
      <param name="names">the column names</param>
      <param name="session" />
      <param name="owner">the containing entity</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,System.Boolean[],NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            If a property is not settable, skip it and don't increment the index.
            </summary>
      <param name="cmd" />
      <param name="value" />
      <param name="index" />
      <param name="settable" />
      <param name="session" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Write an instance of the mapped class to a prepared statement.
            Implementors should handle possibility of null values.
            A multi-column type should be written to parameters starting from index.
            </summary>
      <param name="cmd" />
      <param name="value" />
      <param name="index" />
      <param name="session" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.DeepCopy(System.Object)">
      <summary>
            Return a deep copy of the persistent state, stopping at entities and at collections.
            </summary>
      <param name="value">generally a collection element or entity field</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.Disassemble(System.Object,NHibernate.Engine.ISessionImplementor)">
      <summary>
            Transform the object into its cacheable representation.
                        At the very least this method should perform a deep copy.
                        That may not be enough for some implementations, method should perform a deep copy. That may not be enough for some implementations, however; for example, associations must be cached as identifier values. (optional operation)
            </summary>
      <param name="value">the object to be cached</param>
      <param name="session" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.Assemble(System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            Reconstruct an object from the cacheable representation.
                        At the very least this method should perform a deep copy. (optional operation)
            </summary>
      <param name="cached">the object to be cached</param>
      <param name="session" />
      <param name="owner" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.Replace(System.Object,System.Object,NHibernate.Engine.ISessionImplementor,System.Object)">
      <summary>
            During merge, replace the existing (target) value in the entity we are merging to
                        with a new (original) value from the detached entity we are merging. For immutable
                        objects, or null values, it is safe to simply return the first parameter. For
                        mutable objects, it is safe to return a copy of the first parameter. However, since
                        composite user types often define component values, it might make sense to recursively 
                        replace component values in the target object.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.PropertyNames">
      <summary>
            Get the "property names" that may be used in a query. 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.PropertyTypes">
      <summary>
            Get the corresponding "property types"
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.ReturnedClass">
      <summary>
            The class returned by NullSafeGet().
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.UserTypes.YearWeekUserType.IsMutable">
      <summary>
            Are objects of this type mutable?
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.AssignedIdEntityBase`1">
      <summary>
            Entity의 Identity값이 Database System에 의해서 설정되는 것이 아니라, 사용자가 설정하는 Entity의 기본 Class입니다.
            (id의 generator class="assigned" 인 entity)
            </summary>
      <typeparam name="TId">
      </typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1">
      <summary>
            NHibernate 용 Entity 의 Base class
            </summary>
      <typeparam name="TId">Entity의 Identity 값의 수형</typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase">
      <summary>
            상태 정보 (Persistent인지, Transient인지)를 가진 Entity Class
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity">
      <summary>
            상태를 가지는 Entity를 표현하는 Interface
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity.OnSave">
      <summary>
            영구 저장소 (DB)에 저장할 때 호출되는 함수
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity.OnLoad">
      <summary>
            영구 저장소 (DB)에서 정보를 읽어올 때 호출되는 함수
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity.ToTransient">
      <summary>
            Persistent Object를 Transient Object로 만든다. (Persistent Object를 복제해서 새로운 Transient Object를 만들 때 사용한다.)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity.IsSaved">
      <summary>
            영구 저장소 (DB) 에 저장된 Entity인지 구분
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity.IsTransient">
      <summary>
            Transient Entity인지 구분 (영구저장소에 저장된 Entity가 아니라, 메모리에서 생성한 임시 Entity라는 뜻)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.InitializeProperties">
      <summary>
            Entity 속성을 초기화 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.OnSave">
      <summary>
            영구 저장소 (DB)에 저장할 때 호출되는 함수. IsSaved를 True로 설정한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.OnLoad">
      <summary>
            영구 저장소 (DB)에서 정보를 읽어올 때 호출되는 함수. IsSaved를 true로 설정한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.ToTransient">
      <summary>
            Persistent Object를 Transient Object로 만든다. (Persistent Object를 복제해서 새로운 Transient Object를 만들 때 사용한다.)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.IsSaved">
      <summary>
            영구 저장소 (DB) 에 저장된 Entity인지 구분
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase.IsTransient">
      <summary>
            Transient Entity인지 구분 (영구저장소에 저장된 Entity가 아니라, 메모리에서 생성한 임시 Entity라는 뜻)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IDataEntity`1">
      <summary>
            NHibernate 용 Data Entity의 기본 Interface 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IDataEntity`1.Id">
      <summary>
            Identity value for Entity
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.ToTransient">
      <summary>
            Persistent Object를 Transient Object로 만든다. (Persistent Object를 복제해서 새로운 Transient Object를 만들 때 사용한다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.ToString">
      <summary>
            현재 인스턴스를 문자열로 나타냅니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.GetHashCode">
      <summary>
            해시 코드를 구합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.Equals(System.Object)">
      <summary>
            Entity가 지정된 객체와 같은 Entity인지 판단한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.Equals(NSoft.NFramework.Data.NHibernateEx.Domain.IDataEntity{`0})">
      <summary>
            Entity가 같은지 검사한다.
            </summary>
      <param name="other">대상 Enitity</param>
      <returns>
      </returns>
      <remarks>
            두 Business Entity가 같으려면
            1. 둘다 Persistent object이며, Id 값이 같다. (DB에 저장되어 있고, Id값이 같다) <br />
            2. 둘다 Transient일 경우 Entity의 HashCode 값이 같다면
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.op_Equality(NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase{`0},NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase{`0})">
      <summary>
            Equal operator
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.op_Inequality(NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase{`0},NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase{`0})">
      <summary>
            Not equal operator
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1.Id">
      <summary>
            Identity Value of Entity
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IAssignedIdEntity`1">
      <summary>
            Identity 값을 Business Layer에서 Assign해주어야 하는 Entity를 표현한 Interface
            </summary>
      <typeparam name="TId">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IAssignedIdEntity`1.SetIdentity(`0)">
      <summary>
            Set new identity value.
            </summary>
      <param name="newId">new identity value</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.AssignedIdEntityBase`1.SetIdentity(`0)">
      <summary>
            Entity의 Identity값을 설정합니다.
            </summary>
      <param name="newId">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.CodeEntityBase`1">
      <summary>
            Code를 기본 속성으로 가지는 엔티티입니다.
            </summary>
      <typeparam name="TId">
      </typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.ICodeEntity">
      <summary>
            Code 속성을 가지는 엔티티
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ICodeEntity.Code">
      <summary>
            엔티티의 Business Identity를 위한 Code 정보 (예: UserCode, OrderCode 등)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.CodeEntityBase`1.Equals(NSoft.NFramework.Data.NHibernateEx.Domain.ICodeEntity)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.CodeEntityBase`1.Code">
      <summary>
            엔티티의 Business Identity를 위한 Code 정보 (예: UserCode, OrderCode 등)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.Services.DomainServiceBase">
      <summary>
            Domain Service의 기본 Class입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.Services.DomainServiceBase.SessionFactoryImplementor">
      <summary>
            Current UnitOfWork의 <see cref="T:NHibernate.Engine.ISessionFactoryImplementor" /> 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.Services.DomainServiceBase.SessionFactory">
      <summary>
            Current UnitOfWork의 <see cref="T:NHibernate.ISessionFactory" /> 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.Services.DomainServiceBase.Session">
      <summary>
            UnitOfWork에서 활성화된 NHibernate Session 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.Services.DomainServiceBase.SessionImpl">
      <summary>
            UnitOfWork에서 활성화된 NHibernate SessionImplementor
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.GuidEntityBase">
      <summary>
            Identity 수형이 <see cref="T:System.Guid" />인 엔티티입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.GuidEntityBase.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.HierarchyEntityBase`2">
      <summary>
            계층구조를 가지고, 조상, 자손 정보를 가지는 엔티티의 추상 클래스입니다.
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <typeparam name="TId">엔티티 Identity의 수형</typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodeEntityBase`2">
      <summary>
            TreeView의 TreeNode 형식의 엔티티의 추상 클래스입니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1">
      <summary>
            Tree 형식의 부모와 자식들을 가지는 엔티티에 대한 Interface
            </summary>
      <typeparam name="T">TreeNodeEntity 수형</typeparam>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1.Parent">
      <summary>
            부모 노드
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1.Children">
      <summary>
            자식 노드들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1.NodePosition">
      <summary>
            TreeNode의 위치
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodeEntityBase`2.Parent">
      <summary>
            부모 노드
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodeEntityBase`2.Children">
      <summary>
            자식 노드들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodeEntityBase`2.NodePosition">
      <summary>
            TreeNode의 위치
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IHierarchyEntity`1">
      <summary>
            조상, 자손 정보를 가지는 엔티티의 인터페이스입니다.
            </summary>
      <remarks>
            계층구조를 가지는 엔티티의 경우, 부모, 자식 만으로 재귀호출로 조상, 자손을 구할 수 있습니다만, 속도때문에 따로 조상, 자손을 기록할 수 있습니다.
            다만 이렇게되면 부모, 자식에 대한 정보의 추가, 갱신 시 부하가 발생합니다.
            </remarks>
      <typeparam name="T">엔티티의 수형</typeparam>
      <seealso cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IHierarchyEntity`1.Ancestors">
      <summary>
            조상 엔티티의 집합
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IHierarchyEntity`1.Descendents">
      <summary>
            자손 엔티티의 집합
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.HierarchyEntityBase`2.Ancestors">
      <summary>
            조상 엔티티의 집합
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.HierarchyEntityBase`2.Descendents">
      <summary>
            자손 엔티티의 집합
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1">
      <summary>
            Locale Text를 가지는 Data Object를 표현한다.
            </summary>
      <typeparam name="TLocale">엔티티의 Locale정보를 나타내는 class</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1.AddLocale(System.Globalization.CultureInfo,`0)">
      <summary>
            지정된 Culture의 Localization 정보를 추가한다.
            </summary>
      <param name="culture">
      </param>
      <param name="localeEntity">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1.RemoveLocale(System.Globalization.CultureInfo)">
      <summary>
            지정된 Culture의 Localization 정보를 제거한다.
            </summary>
      <param name="culture">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1.GetLocaleOrDefault(System.Globalization.CultureInfo)">
      <summary>
            지정된 Culture의 Localization 정보를 반환한다. 없다면 기본 Entity의 정보를 반환한다.
            </summary>
      <param name="culture">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1.Locales">
      <summary>
            지역화 정보를 제공하는 기본 속성<br /><see cref="T:NSoft.NFramework.NamedIndexer`2" />를 이용하여, Concrete class의 기본 indexer를 사용할 수 있도록 한다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1.LocaleKeys">
      <summary>
            Localization 을 지원하는 <see cref="T:System.Globalization.CultureInfo" />의 종류
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity`1.CurrentLocale">
      <summary>
            Current UI Thread에 해당하는 {TLocale} 정보
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.ILocaleValue">
      <summary>
            지역화 정보를 나타내는 ValueObject의 인터페이스
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity">
      <summary>
            Metadata를 가지는 Entity를 나타냅니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity.AddMetadata(System.String,NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue)">
      <summary>
            Add metadata
            </summary>
      <param name="key">
      </param>
      <param name="metadataValue">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity.AddMetadata(System.String,System.Object)">
      <summary>
            Add metadata
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity.RemoveMetadata(System.String)">
      <summary>
            Remove metadata with key.
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity.Metadatas">
      <summary>
            Entity마다 많은 Indexer들이 있으므로 이를 방지하기 위해 Named Indexer를 이용한다.<br />
            예 : Employee.Metadata["NickName"] 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity.MetadataKeys">
      <summary>
            Metadata Key collection
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue">
      <summary>
            Metadata를 표현하는 인터페이스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue.Value">
      <summary>
            메타데이타 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue.ValueType">
      <summary>
            메타데이타 값의 형식
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue.Label">
      <summary>
            메타데이타 화면 표시명
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue.Description">
      <summary>
            메타데이타 설명
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue.ExAttr">
      <summary>
            메타데이타 추가 속성값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.INamedEntity">
      <summary>
            Name 속성을 가진 Entity입니다
            </summary>
      <remarks>
            Name 속성을 가진 Entity들이 많기 때문에, Name으로 찾기 기능 등을 Generics로 일반화시킬 수 있습니다. 
            </remarks>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.INamedEntity.Name">
      <summary>
            Name
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />의 TreeView상에서의 위치를 나타냅니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition.Level">
      <summary>
            TreeView 상에서 Node의 레벨 (root node가 level 0이다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition.Order">
      <summary>
            형제 Node 간의 순서를 나타낸다
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.IUpdateTimestampedEntity">
      <summary>
            엔티티의 변화 시간을 추적할 수 있도록 UpdateTimeStamp 속성을 가지는 엔티티를 나타냅니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.IUpdateTimestampedEntity.UpdateTimestamp">
      <summary>
            엔티티가 변경된 최종 시각
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2">
      <summary>
            지역화 정보를 가지는 엔티티입니다.
            </summary>
      <typeparam name="TId">엔티티 Id의 수형</typeparam>
      <typeparam name="TLocale">엔티티의 Locale class의 수형</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.CreateDefaultLocale">
      <summary>
            기본 Localization Object를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.AddLocale(System.Globalization.CultureInfo,`1)">
      <summary>
            지정된 Culture의 Localization 정보를 추가한다.
            </summary>
      <param name="culture">
      </param>
      <param name="locale">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.RemoveLocale(System.Globalization.CultureInfo)">
      <summary>
            지정된 Culture의 Localization 정보를 제거한다.
            </summary>
      <param name="culture">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.GetLocaleOrDefault(System.Globalization.CultureInfo)">
      <summary>
            지정된 Culture의 Localization 정보를 반환한다. 없다면 기본 Entity의 정보를 반환한다.
            </summary>
      <param name="culture">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.LocaleMap">
      <summary>
            LocaledEntity의 HBM과 연결되는 속성입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.DefaultLocale">
      <summary>
            Localization 정보가 없을 때, 기본 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.Locales">
      <summary>
            Localization 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.LocaleKeys">
      <summary>
            Localization 을 지원하는 <see cref="T:System.Globalization.CultureInfo" />의 종류
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledEntityBase`2.CurrentLocale">
      <summary>
            Current UI Thread에 해당하는 {TLocale} 정보
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2">
      <summary>
            Locale 정보와 Metadata를 가지는 Entity
            </summary>
      <typeparam name="TId">
      </typeparam>
      <typeparam name="TLocale">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.#ctor(System.Collections.Generic.IDictionary{System.String,NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue})">
      <summary>
            생성자
            </summary>
      <param name="metadataMap">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.GetMetadataOrDefault(System.String)">
      <summary>
            해당 키의 메타데이타를 구합니다. 없다면, 기본값을 반환합니다.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.AddMetadata(System.String,NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue)">
      <summary>
            Add IMetadataValue
            </summary>
      <param name="key">
      </param>
      <param name="metadataValue">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.AddMetadata(System.String,System.Object)">
      <summary>
            Add IMetadataValue
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.RemoveMetadata(System.String)">
      <summary>
            Remove IMetadataValue with key.
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.MetadataMap">
      <summary>
            Metadata Map
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.Metadatas">
      <summary>
            Entity마다 많은 Indexer들이 있으므로 이를 방지하기 위해 Named Indexer를 이용한다.<br />
            예 : Employee.IMetadataValue["NickName"] 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataEntityBase`2.MetadataKeys">
      <summary>
            IMetadataValue Key collection
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataTreeNodeEntityBase`3">
      <summary>
            다국어, 메타데이타를 포함하는 TreeNode 엔티티의 기본 클래스입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataTreeNodeEntityBase`3.Parent">
      <summary>
            부모 노드
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataTreeNodeEntityBase`3.Children">
      <summary>
            자식 노드들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledMetadataTreeNodeEntityBase`3.NodePosition">
      <summary>
            TreeNode의 위치
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledTreeNodeEntityBase`3">
      <summary>
            다국어 정보를 가지는 TreeNode 엔티티의 기본 클래스입니다.
            </summary>
      <typeparam name="T">엔티티의 수형</typeparam>
      <typeparam name="TId">엔티티 Identifier의 수형</typeparam>
      <typeparam name="TLocale">엔티티의 지역화 정보 수형</typeparam>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledTreeNodeEntityBase`3.Parent">
      <summary>
            부모 노드
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledTreeNodeEntityBase`3.Children">
      <summary>
            자식 노드들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.LocaledTreeNodeEntityBase`3.NodePosition">
      <summary>
            TreeNode의 위치
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.LocaleValueBase`1">
      <summary>
            지역화정보를 나타내는 NHibernate Component를 표현하는 추상클래스입니다.
            </summary>
      <typeparam name="T">Locale 정보를 나타내는 Component의 형식</typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1">
      <summary>
            IMetadataValue 정보 (<see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue" />) 를 가지는 Entity의 기본 Class
            </summary>
      <typeparam name="TId">Id의 수형</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.GetMetadataOrDefault(System.String)">
      <summary>
            해당 키의 메타데이타 정보를 조회합니다. 없으면, 기본 메타데이타 값을 반환합니다.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.AddMetadata(System.String,NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue)">
      <summary>
            Add IMetadataValue
            </summary>
      <param name="key">
      </param>
      <param name="metadataValue">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.AddMetadata(System.String,System.Object)">
      <summary>
            Add IMetadataValue
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.RemoveMetadata(System.String)">
      <summary>
            Remove IMetadataValue with key.
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.MetadataMap">
      <summary>
            Metadata Map
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.Metadatas">
      <summary>
            Entity마다 많은 Indexer들이 있으므로 이를 방지하기 위해 Named Indexer를 이용한다.<br />
            예 : Employee.IMetadataValue["NickName"] 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataEntityBase`1.MetadataKeys">
      <summary>
            IMetadataValue Key collection
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataTreeNodeEntityBase`2">
      <summary>
            Tree 형태의 자료 구조를 가지면서, Metadata를 가지는 엔티티
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataTreeNodeEntityBase`2.Parent">
      <summary>
            부모 노드
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataTreeNodeEntityBase`2.Children">
      <summary>
            자식 노드들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataTreeNodeEntityBase`2.NodePosition">
      <summary>
            TreeNode의 위치
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue">
      <summary>
            메타데이터 값을 표현하는 ValueObject입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.Empty">
      <summary>
            빈 MetadataValue
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.#ctor(System.Object)">
      <summary>
            생성자
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.#ctor(NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue)">
      <summary>
            생성자 (<see cref="M:NSoft.NFramework.Reflections.ObjectMapper.MapProperty``1(System.Object,System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])" /> 을 사용하세요)
            </summary>
      <param name="src">원본 메타데이타</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.GetHashCode">
      <summary>
            HashCode 값을 계산합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.Equals(NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataValue)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.ToString">
      <summary>
            현재 인스턴스를 문자열로 표현합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.Value">
      <summary>
            메타데이타 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.ValueType">
      <summary>
            메타데이타 값의 형식
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.Label">
      <summary>
            메타데이타 화면 표시명
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.Description">
      <summary>
            메타데이타 설명
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.MetadataValue.ExAttr">
      <summary>
            메타데이타 추가 속성값
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.NamedEntityBase`1">
      <summary>
            Name 속성을 가진 엔티티
            </summary>
      <typeparam name="TId">Type of Entity Identity</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.NamedEntityBase`1.GetHashCode">
      <summary>
            HashCode를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.NamedEntityBase`1.Name">
      <summary>
            Name
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.NamedLocaledEntityBase`2">
      <summary>
            Name 속성과 Locale 속성을 가진 엔티티
            </summary>
      <typeparam name="TId">
      </typeparam>
      <typeparam name="TLocale">
      </typeparam>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.NamedLocaledEntityBase`2.Name">
      <summary>
            Entity name
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition">
      <summary>
            TreeNode의 TreeView 상에서의 위치를 나타내는 레벨, 정렬 순서를 나타냅니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.#ctor">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.#ctor(NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition)">
      <summary>
            Copy 생성자
            </summary>
      <param name="src">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.GetHashCode">
      <summary>
            HashCode를 반환합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.Equals(NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition)">
      <summary>
            현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.
            </summary>
      <returns>
            현재 개체가 <paramref name="other" /> 매개 변수와 같으면 true이고, 그렇지 않으면 false입니다.
            </returns>
      <param name="other">이 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.ToString">
      <summary>
            현재 TreeNodePosition 인스턴스를 문자열로 표현합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.Level">
      <summary>
            TreeView 상에서 Node의 레벨 (root node가 level 0이다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Domain.TreeNodePosition.Order">
      <summary>
            형제 Node 간의 순서를 나타낸다
            </summary>
    </member>
    <member name="T:NHibernate.Driver.CubridDataDriver">
      <summary>
            NHibernate에서 사용할 Cubrid RDBMS용 Driver입니다.
            </summary>
      <remarks>
            NHibernate configuration 속성 중에 connection.driver_class 값을 "NHibernate.Driver.CubridDataDriver, RCL.Data" 로 해주면 Cubrid Driver를 Cubrid.Data.dll을 사용합니다.
            </remarks>
      <example>
        <code>
            // hibernate.cfg.xml 에서 다음과 같이 설정하시면 됩니다.
            <property name="connection.driver_class">NHibernate.Driver.CubridDataDriver, RCL.Data</property></code>
      </example>
    </member>
    <member name="T:FluentNHibernate.Cfg.Db.DevartOracleConnectionStringBuilder">
      <summary>
            DevartOracle 을 위한 ConnectionStringBuilder입니다. FluentNHibernate로 설정 시에 사용됩니다.
            </summary>
    </member>
    <member name="T:FluentNHibernate.Cfg.Db.DevartOracleDataClientConfiguration">
      <summary>
            FluentNHibernate 으로 DevartOracle Driver를 사용하여 Database를 제작합니다.
            </summary>
    </member>
    <member name="T:NHibernate.Driver.DevartOracleDriver">
      <summary>
            NHibernate에서 사용할 Oracle용 Driver입니다. Devart dotConnector for Oracle 라이브러리를 사용합니다.
            참고 : http://www.devart.com/blogs/dotconnect/?p=1857 (Old Version)
            참고 : http://www.devart.com/forums/viewtopic.php?t=15685 (New Version)
            </summary>
      <remarks>
            NHibernate configuration 속성 중에 connection.driver_class 값을 
            "NHibernate.Driver.DevartOracleDriver, NSoft.NFramework.Data.NHibernateEx" 로 해주면 Oracle Driver를 Devart.Data.Oracle.dll을 사용합니다.
            NOTE: NHIbernate configuration 에 qualifyAssembly 를 정의하여, Devart.Data.Oracle.dll의 QualifiedAssemblyName을 등록해주어야 합니다.
            NOTE: http://www.devart.com/blogs/dotconnect/?p=1857 의 4번, 5번 항을 주의하세요.
            </remarks>
      <example>
        <code>
            // hibernate.cfg.xml 에서 다음과 같이 설정하시면 됩니다.
            <property name="connection.driver_class">NHibernate.Driver.DevartOracleDriver, NSoft.NFramework.Data.NHibernateEx</property></code>
      </example>
    </member>
    <member name="M:NHibernate.Driver.DevartOracleDriver.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.SqlServerCeDriver">
      <summary>
            SQL Server CE가 Unicode만 지원하여, AnsiString을 지원하지 않는다. 이 때문에, SQL Server와 혼용하는 HBM 작성이 힘들다.
            그래서 SQL Server CE에서 AnsiString을 NVarChar로 매핑하도록 해주는 Driver를 작성하였습니다.
            
            참고 : http://netfrustrations.blogspot.com/2009/10/nhibernate-mapping-typeansistring.html
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.SqlServerCeDriver.GenerateCommand(System.Data.CommandType,NHibernate.SqlCommand.SqlString,NHibernate.SqlTypes.SqlType[])">
      <summary>
            Generates an IDbCommand from the SqlString according to the requirements of the DataProvider.
            </summary>
      <param name="type">The <see cref="T:System.Data.CommandType" /> of the command to generate.</param>
      <param name="sqlString">The SqlString that contains the SQL.</param>
      <param name="parameterTypes">The types of the parameters to generate for the command.</param>
      <returns>
            An IDbCommand with the CommandText and Parameters fully set.
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.SqlServerClientDriver">
      <summary>
            NHibernate에서는 BinaryBlob를 varbinary(8000)으로 설정한다. 이를 Image 로 변경한다. 
            Command Parameter의 형식만 변경한다고 되는게 아니다. : DB Column 자체를 변경해야 한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.SqlServerClientDriver.InitializeParameter(System.Data.IDbDataParameter,System.String,NHibernate.SqlTypes.SqlType)">
      <summary>
            NHibernate는 BinaryBlobSqlType을 기본적으로 varbinary(8000)으로 변경한다. 이를 Image 형식으로 변경히기 위해 재정의하였다.
            </summary>
      <param name="dbParam">
      </param>
      <param name="name">
      </param>
      <param name="sqlType">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.EventListeners.UpdateTimestampEventListener">
      <summary>
            엔티티가 추가되거나 갱신 될 때에, <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IUpdateTimestampedEntity" /> 엔티티라면, UpdateTime 을 갱신합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EventListeners.UpdateTimestampEventListener.GetCurrentTime">
      <summary>
            현재 시각을 반환한다. UTC 를 원한다면 상속받아, 재정의를 하십시요.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EventListeners.UpdateTimestampEventListener.OnPreInsert(NHibernate.Event.PreInsertEvent)">
      <summary>
            엔티티를 처음 등록할 때, 엔티티의 UpdateTimestamp 속성 값이 없을 때, 현재 시각으로 설정합니다.
            </summary>
      <param name="event">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EventListeners.UpdateTimestampEventListener.OnPreUpdate(NHibernate.Event.PreUpdateEvent)">
      <summary>
            엔티티를 Update 하기 전에, 엔티티의 UpdateTimestamp 속성 값을 현재 시각으로 설정합니다.
            </summary>
      <param name="event">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Facilities.NHIoCInitializationAware">
      <summary>
            NHibernate용 Mapped Class (Entity) 에 대해 IoC를 통해 자동으로 Repository{TEntity}에 매핑되게끔 하는 초기화 모듈
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.INHInitializationAware">
      <summary>
            used to handle extra initialization for configuration and session factory.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHInitializationAware.BeforeInitialzation">
      <summary>
            초기화 전에 수행해야 할 작업
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHInitializationAware.Configured(NHibernate.Cfg.Configuration)">
      <summary>
            NHibernate Configuration 작업에 추가할 내용들을 정의한다.
            </summary>
      <param name="cfg">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHInitializationAware.Initialized(NHibernate.Cfg.Configuration,NHibernate.ISessionFactory)">
      <summary>
            NHibernate Session Factory 초기화 작업에 추가할 내용들을 정의한다.
            </summary>
      <param name="cfg">
      </param>
      <param name="sessionFactory">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHIoCInitializationAware.#ctor(System.Predicate{System.Type})">
      <summary>
            Constructor
            </summary>
      <param name="isCandidateRepository">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHIoCInitializationAware.BeforeInitialzation">
      <summary>
            초기화 전에 수행해야 할 작업
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHIoCInitializationAware.Configured(NHibernate.Cfg.Configuration)">
      <summary>
            NHibernate Configuration 작업에 추가할 내용들을 정의한다.
            </summary>
      <param name="cfg">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHIoCInitializationAware.Initialized(NHibernate.Cfg.Configuration,NHibernate.ISessionFactory)">
      <summary>
            NHibernate Session Factory 초기화 작업에 추가할 내용들을 정의한다.
            </summary>
      <param name="cfg">
      </param>
      <param name="sessionFactory">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Facilities.NHMultipleUnitOfWorkFacility">
      <summary>
            Multiple UnitOfWork를 지원하기 위한 Castle의 Facility
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Facilities.NHMultipleUnitOfWorkFacility.FACILITY_DEFAULT_FACTORY">
      <summary>
            UnitOfWork Facility의 환경설정에서 기본 Factory를 지정하는 attribute name
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Facilities.NHMultipleUnitOfWorkFacility.FACTORY">
      <summary>
            UnitOfWork Facility의 환경설정에서 Factory를 지정하는 attribute name
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHMultipleUnitOfWorkFacility.#ctor">
      <summary>
            default constructor
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHMultipleUnitOfWorkFacility.#ctor(NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig[])">
      <summary>
            Initialize a new instance of NHMultipleUnitOfWorkFacility with the specified NHUnitOfWorkFacilityConfig array.
            </summary>
      <param name="configs">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHMultipleUnitOfWorkFacility.Init">
      <summary>
            Initialize current facility
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacility">
      <summary>
            Castle Facility class for NHibernate Unit-Of-Work Pattern
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacility.#ctor(NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig)">
      <summary>
            Constructor
            </summary>
      <param name="config">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacility.Init">
      <summary>
              The custom initialization for the Facility.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacility.Assemblies">
      <summary>
            환경설정에 정의된 Assembly 들
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig">
      <summary>
            Unit Of Work Facitility에 대한 환경설정 정보
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.FACTORY_ID">
      <summary>
            Unit Of Work Factory Id
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.FACTORY_ALIAS">
      <summary>
            Factory Alias
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.FACTORY_NEED_SCHEMA_EXPORT">
      <summary>
            Factory need schema export ?
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.FACTORY_CONFIG_FILE">
      <summary>
            Factory configuration file
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.#ctor(System.String)">
      <summary>
            Initialize NHUnitOfWorkFacilityConfig with the specified assemblyName.
            </summary>
      <param name="assemblyName">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.#ctor(System.Reflection.Assembly)">
      <summary>
            Initialize NHUnitOfWorkFacilityConfig with the specified assembly.
            </summary>
      <param name="assembly">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.#ctor(Castle.Core.Configuration.IConfiguration)">
      <summary>
            Castle Windsor 환경설정 정보로 부터 NHUnitOfWorkFacilityConfig를 생성한다.
            </summary>
      <param name="factoryConfig">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.NHibernateConfiguration(System.String)">
      <summary>
            NHibernate용 Configuration 파일 명을 지정한다.
            </summary>
      <param name="nhibernateConfigFilename">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.RegisterEntitiesWhere(System.Predicate{System.Type})">
      <summary>
            특정 Entity를 다루는 Repository가 정의되었는지 파악하는 Predicator를 지정한다.
            </summary>
      <param name="typeIsSpecifiedBy">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.AddAssembly(System.String)">
      <summary>
            지정된 Assembly 명에 해당하는 Assembly를 로드하여 NHibernate용 Mapping Assembly로 추가한다.
            </summary>
      <param name="assemblyName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.AddAssembly(System.Reflection.Assembly)">
      <summary>
            지정된 Assembly를 NHibernate용 Mapping Assembly로 추가한다.
            </summary>
      <param name="assembly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.AddEntity(System.Type)">
      <summary>
            NHibernate용 Entity로 추가한다.
            </summary>
      <param name="entity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.IsCandidateForRepository">
      <summary>
            특정 Entity를 처리하는 Repository가 정의되어 있는지 파악하는 Predicator
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.Assemblies">
      <summary>
            매핑된 NHibernate용 Entity가 속한 Assembly들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.Entities">
      <summary>
            Types of Mapped class
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.NHibernateConfigurationFilename">
      <summary>
            NHibernate용 Configuration Filename
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.FactoryId">
      <summary>
            Facility 환경설정의 Factory Id
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.FactoryAlias">
      <summary>
            Facility 환경설정의 Factory에 대한 Alias (Session Factory Name 대용)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Facilities.NHUnitOfWorkFacilityConfig.NeedSchemaExport">
      <summary>
            Session Factory를 
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions">
      <summary>
            Fluent NHibernate Convention 과련 옵션입니다.
            참고: http://wiki.fluentnhibernate.org/Convention_shortcut
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.Default">
      <summary>
            Pascal Naming 규칙에 따른 기본 Convention입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.Pascal">
      <summary>
            Pascal Naming 규칙에 따른 기본 Convention입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.Oracle">
      <summary>
            Pascal Naming 규칙에 따른 기본 Convention입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.ToConventions(NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions)">
      <summary>
            Fluent NHibernate 에서 제공하는 Convention 설정에 따른 <see cref="T:FluentNHibernate.Conventions.IConvention" /> 인스턴스를 빌드하여 제공합니다.
            </summary>
      <param name="options">ConventionOptions 인스턴스</param>
      <returns>Convention 설정 정보를 기초로 만든 <see cref="T:FluentNHibernate.Conventions.IConvention" />의 인스턴스 배열</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.DefaultLazy">
      <summary>
            LazyLoad를 기본으로 할 것인가?
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.DynamicInsert">
      <summary>
            Entity 등록 시, 값이 있는 속성만으로 Query를 생성할 것인가를 설정하는 값의 기본 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.DynamicUpdate">
      <summary>
            Entity 갱신 시, 값이 있는 속성만으로 Query를 생성할 것인가를 설정하는 값의 기본 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.TableNamePrefix">
      <summary>
            테이블 명의 접두사 (예: "TBL_", "RAT_" 등)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.TableNameSurfix">
      <summary>
            테이블 명의 접미사 (예: "_TABLE" 등)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.PrimaryKeyName">
      <summary>
            Primary Key의 기본 값 (예: "Id"), 보통 <see cref="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.PrimaryKeySurfix" />를 많이 사용한다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.PrimaryKeySurfix">
      <summary>
            Primary Key 의 명칭을 EntityName + PrimaryKeySurfix 로 설정하게 합니다. 
            (예: Surfix가 "Id" 일 경우, User의 Primary Key 는 "UserId" 가 되고, Company의 Primary Key 는 "CompanyId" 가 됩니다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.ConventionOptions.ForeignKeySurfix">
      <summary>
            Foreign Key의 접미사를 지정합니다. (예: "_ID", "Id")
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase">
      <summary>
            FluentNHibernate 의 Convention 기능을 활용하기 위한 기본 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Fluents.IFluentConvention">
      <summary>
            FluentNHibernate의 Convention 기능을 기본적으로 활용하는 Convention 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.IFluentConvention.GetAbbrName(System.String)">
      <summary>
        <paramref name="text" />에 <see cref="P:NSoft.NFramework.Data.NHibernateEx.Fluents.IFluentConvention.AbbrNameMap" />에 등록된 약어 변환 단어가 있더면 약어로 변환하여 반환합니다.
            </summary>
      <param name="text">원본 문자열</param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.IFluentConvention.Options">
      <summary>
            Convention Option
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.IFluentConvention.PropertyWithClassNames">
      <summary>
            컬럼명을 클래스명 + 속성명으로 표현되도록 하는 속성명의 컬렉션입니다.
            예: Code 는 EntityName + Code (예: Company.Code 는 컬럼명이 CompanyCode | COMPANY_CODE 로 변환된다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.IFluentConvention.AbbrNameMap">
      <summary>
            컬럼명으로 매핑시에 약어로 매핑해야 할 이름(단어) 매핑이다. (예: Department-Dept, Locale-Loc, Configuration-Conf 등)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase.Apply(FluentNHibernate.Conventions.Instances.IClassInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase.GetAbbrName(System.String)">
      <summary>
        <paramref name="text" />에 <see cref="P:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase.AbbrNameMap" />에 등록된 약어 변환 단어가 있더면 약어로 변환하여 반환합니다.
            </summary>
      <param name="text">원본 문자열</param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase.Options">
      <summary>
            Convention Option
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase.PropertyWithClassNames">
      <summary>
            속성명과 컬럼명을 같은 값으로 유지하고자 하는 속성명 (Description, ExAttr 같은 것)
            그 외의 것은 컬럼명이 EntityName + '_' + PropertyName 으로 매핑됩니다. (예: Company.Name 은 COMPANY_NAME)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Fluents.FluentConventionBase.AbbrNameMap">
      <summary>
            컬럼명으로 매핑시에 약어로 매핑해야 할 이름(단어) 매핑이다. (예: Department-Dept, Locale-Loc, Configuration-Conf 등)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention">
      <summary>
            Oracle DB에서 사용되는 명명규칙을 기준으로 FluentNHibernate Convention 을 구현합니다.
            참고: http://wiki.fluentnhibernate.org/Conventions#Writing_Your_Own_Conventions
            참고: http://www.oracle-base.com/articles/misc/NamingConventions.php
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IClassInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IIdentityInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.ICompositeIdentityInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IOneToManyCollectionInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToManyCollectionInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IPropertyInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToOneInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IComponentInstance)">
      <summary>
            Apply changes to the target
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.OracleNamingConvention.Accept(FluentNHibernate.Conventions.AcceptanceCriteria.IAcceptanceCriteria{FluentNHibernate.Conventions.Inspections.IClassInspector})">
      <summary>
            Whether this convention will be applied to the target.
            </summary>
      <param name="criteria">Instace that could be supplied</param>
      <returns>
            Apply on this target?
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention">
      <summary>
            Pascal Naming 규칙에 따른 RDBMS 명명규칙을 정의한 FluentNHibernate Convention 클래스입니다.
            참고: http://wiki.fluentnhibernate.org/Conventions#Writing_Your_Own_Conventions
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.#ctor">
      <summary>
            기본 생성자
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            생성자
            </summary>
      <param name="propertyWithClassNames">컬럼명을 클래스명 + 속성명 으로 표현할 속성명 컬렉션</param>
      <param name="abbrNameMap">약어 맵</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IClassInstance)">
      <summary>
            클래스 인스턴스에 대한 Convention 적용
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IIdentityInstance)">
      <summary>
            클래스 Identifier에 대한 Convention 적용
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.ICompositeIdentityInstance)">
      <summary>
            Composite Identifier에 대한 Convention 적용
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IOneToManyCollectionInstance)">
      <summary>
            one-to-many 관계에 해당하는 부분의 Convention 적용
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToManyCollectionInstance)">
      <summary>
            many-to-many 관계에 해당하는 매핑 부분에 Convention을 적용합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IPropertyInstance)">
      <summary>
            속성에 대해 Convention을 적용합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IManyToOneInstance)">
      <summary>
            many-to-one 관계에 대한 Convention을 적용합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Apply(FluentNHibernate.Conventions.Instances.IComponentInstance)">
      <summary>
            component에 대해 convention 을 적용합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Fluents.PascalNamingConvention.Accept(FluentNHibernate.Conventions.AcceptanceCriteria.IAcceptanceCriteria{FluentNHibernate.Conventions.Inspections.IClassInspector})">
      <summary>
            Whether this convention will be applied to the target.
            </summary>
      <param name="criteria">Instace that could be supplied</param>
      <returns>
            Apply on this target?
            </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase">
      <summary>
            여러 Database에 대해, NHibernate 작업 Test를 위한 기본 클래스입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.Contexts">
      <summary>
            Test Contexts of UnitOfWork
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.CurrentContext">
      <summary>
            Current Test Context
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="databaseName">Database name</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="configAction">configuration 부가 작업</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="databaseName">Database name</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="properties">NHibernate configuration 정보</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="databaseName">Database name</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="properties">NHibernate configuration 정보</param>
      <param name="configAction">NHIbernate configuration 을 추가해야 할 경우 (Listner 등)</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="configAction">부가적인 Configuration 관련 작업 (Listener 추가 등)</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="configAction">부가적인 Configuration 관련 작업 (Listener 추가 등)</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernate(NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            NHibernate 를 초기화 한다. 
            </summary>
      <param name="mappingInfo">엔티티 매핑 정보</param>
      <param name="configAction">환경설정 추가 작업용 델리게이트</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.DisposeAndRemoveAllUoWTestContexts">
      <summary>
            Throw away all <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" /> objects within <see cref="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.Contexts" />
            and referenced by <see cref="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.CurrentContext" />. 
            WARNING: Subsequent calls to  <see cref="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})" />
            and all its overloads will now take considerably longer as the persistent framework will
            be initialised a fresh.
            </summary>
      <remarks>
            This method should be used vary sparingly. It is highly unlikely that you will need to
            call this method between every test.
            <para>
            Calling this method will dispose of <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" /> objects within
            <see cref="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.Contexts" />. Each context maintains a reference to a <see cref="T:Castle.Windsor.WindsorContainer" />. 
            If this container object is referenced by <see cref="T:NSoft.NFramework.InversionOfControl.IoC" />.
            <see cref="P:NSoft.NFramework.InversionOfControl.IoC.Container" /> then any subsequent calls to <see cref="T:NSoft.NFramework.InversionOfControl.IoC" />.
            <see cref="M:NSoft.NFramework.InversionOfControl.IoC.Resolve(System.Type)" /> and any of the overloads will throw.
            </para></remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.Initialize(NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            NHibernate 초기화를 수행하는 Initializer 를 제공합니다.
            </summary>
      <param name="mappingInfo">매핑 정보</param>
      <param name="configAction">환경 설정 추가 작업용 델리게이트</param>
      <returns>NHibernateInitializer 인스턴스</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.IsRunningInTestMode">
      <summary>
            테스트모드에서 실행중인지 검사
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.DatabaseTestFixtureBase.NHibernateInitializer">
      <summary>
            NHibernate 초기화를 수행합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase">
      <summary>
            FluentNHibernate를 사용하여, NHibernate Database 단위 테스트를 수행하는 기본 클래스입니다. 
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.EntityEqualityComparer">
      <summary>
        <see cref="T:FluentNHibernate.Testing.PersistenceSpecification`1" /> 수행 시 값 비교에 쓰기 위해 사용합니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.Contexts">
      <summary>
            Test Contexts of UnitOfWork
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.CurrentContext">
      <summary>
            Current Test Context
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="databaseName">Database name</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="configAction">configuration 부가 작업</param>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Collections.Generic.IDictionary{System.String,System.String},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="databaseName">Database name</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="properties">NHibernate configuration 정보</param>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="databaseName">Database name</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="properties">NHibernate configuration 정보</param>
      <param name="configAction">NHIbernate configuration 을 추가해야 할 경우 (Listner 등)</param>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="configAction">부가적인 Configuration 관련 작업 (Listener 추가 등)</param>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.InitializeNHibernateAndIoC(System.String,NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 용 Domain을 테스트하기 위해, 환경을 초기화합니다.
            </summary>
      <param name="containerConfigPath">Castle Windsor configuration file path</param>
      <param name="databaseEngine">Database 종류</param>
      <param name="mappingInfo">Domain Model의 Mapping information</param>
      <param name="configAction">부가적인 Configuration 관련 작업 (Listener 추가 등)</param>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.InitializeNHibernate(NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 를 초기화 한다. 
            </summary>
      <param name="mappingInfo">엔티티 매핑 정보</param>
      <param name="configAction">환경설정 추가 작업용 델리게이트</param>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.DisposeAndRemoveAllUoWTestContexts">
      <summary>
            Throw away all <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" /> objects within <see cref="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.Contexts" />
            and referenced by <see cref="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.CurrentContext" />. WARNING: Subsequent calls to  <see cref="!:InitializeNHibernateAndIoC(string,DatabaseEngine,string,NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action&lt;NHibernate.Cfg.Configuration&gt;)" />
            and all its overloads will now take considerably longer as the persistent framework will
            be initialised a fresh.
            </summary>
      <remarks>
            This method should be used vary sparingly. It is highly unlikely that you will need to
            call this method between every test.
            <para>
            Calling this method will dispose of <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" /> objects within
            <see cref="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.Contexts" />. Each context maintains a reference to a <see cref="T:Castle.Windsor.WindsorContainer" />. 
            If this container object is referenced by <see cref="T:NSoft.NFramework.InversionOfControl.IoC" />.
            <see cref="P:NSoft.NFramework.InversionOfControl.IoC.Container" /> then any subsequent calls to <see cref="T:NSoft.NFramework.InversionOfControl.IoC" />.
            <see cref="M:NSoft.NFramework.InversionOfControl.IoC.Resolve(System.Type)" /> and any of the overloads will throw.
            </para></remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.Initialize(NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            NHibernate 초기화를 수행하는 Initializer 를 제공합니다.
            </summary>
      <param name="mappingInfo">매핑 정보</param>
      <param name="configAction">환경 설정 추가 작업용 델리게이트</param>
      <returns>NHibernateInitializer 인스턴스</returns>
      <param name="conventions">Fluent NHibernate의 명명규칙</param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.IsRunningInTestMode">
      <summary>
            테스트모드에서 실행중인지 검사
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentDatabaseTestFixtureBase.NHibernateInitializer">
      <summary>
            NHibernate 초기화를 수행합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.FluentNHUnitOfWorkTestContext">
      <summary>
            NHibernate, FluentNHibernate를 사용한 Data Layer를 테스트를 위한 UnitOfWork Context
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.NHUnitOfWorkTestContext">
      <summary>
            NHibernate용 테스트를 위한 UnitOfWork Context
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext">
      <summary>
            여러 Database에 대한 UnitOfWork Testing 을 위한 UnitOfWork 의 context이다.
            Runtime시에 이 클래스를 대체하여 여러가지 Database 에 대한 Testing를 수행할 수 있다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.CurrentNHibernateSessionKey">
      <summary>
            현재 활성화된 NHibernate.ISession을 <see cref="T:NSoft.NFramework.Local" />저장소에 저장하기 위한 키
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.For(System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            인자에 맞는 <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" />의 인스턴스를 빌드한다.
            </summary>
      <param name="containerConfigPath">IoC 환경설정 파일경로</param>
      <param name="dbStrategy">테스트용 DB 생성 전략</param>
      <param name="mappingInfo">NHibernate용 Entity 정보</param>
      <returns>테스트용 UnitOfWork</returns>
      <param name="configAction">추가 환경설정 작업용 델리게이트</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.For(Castle.Windsor.IWindsorContainer,NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            인자에 맞는 <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" />의 인스턴스를 빌드한다.
            </summary>
      <param name="container">Container</param>
      <param name="dbStrategy">테스트용 DB 생성 전략</param>
      <param name="mappingInfo">NHibernate용 Entity 정보</param>
      <param name="configAction">추가 환경설정 작업용 델리게이트</param>
      <returns>테스트용 UnitOfWork</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.FluentFor(System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            인자에 맞는 <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" />의 인스턴스를 빌드한다.
            </summary>
      <param name="containerConfigPath">IoC 환경설정 파일경로</param>
      <param name="dbStrategy">테스트용 DB 생성 전략</param>
      <param name="mappingInfo">NHibernate용 Entity 정보</param>
      <returns>테스트용 UnitOfWork</returns>
      <param name="configAction">추가 환경설정 작업용 델리게이트</param>
      <param name="conventions">명명규칙</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.FluentFor(Castle.Windsor.IWindsorContainer,NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration},FluentNHibernate.Conventions.IConvention[])">
      <summary>
            인자에 맞는 <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" />의 인스턴스를 빌드한다.
            </summary>
      <param name="container">Container</param>
      <param name="dbStrategy">테스트용 DB 생성 전략</param>
      <param name="mappingInfo">NHibernate용 Entity 정보</param>
      <param name="configAction">추가 환경설정 작업용 델리게이트</param>
      <param name="conventions">명명규칙</param>
      <returns>테스트용 UnitOfWork</returns>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext._container">
      <summary>
            IoC Container
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext._containerConfigPath">
      <summary>
            Castle Windsor 환경설정 파일 경로
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.#ctor(NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            인자에 맞는 <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" />의 인스턴스를 빌드한다.
            </summary>
      <param name="dbStrategy">테스트용 DB 생성 전략</param>
      <param name="containerConfigPath">IoC 환경설정 파일경로</param>
      <param name="mappingInfo">NHibernate 매핑 정보</param>
      <param name="configAction">Configuration 빌드 시 추가할 사항을 정의한 Action</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.CreateUnitOfWork">
      <summary>
            Starts a <see cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWork" /> and creates the db schema.
            </summary>
      <seealso cref="T:NSoft.NFramework.InversionOfControl.IoC" />
      <seealso cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWork" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.CreateNestedUnitOfWork">
      <summary>
             Starts a nested <see cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWork" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.CreateSession">
      <summary>
            Opens an NHibernate session and creates the db schema.
            </summary>
      <returns>The open NHibernate session.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.DisposeSession(NHibernate.ISession)">
      <summary>
            Close the specified session
            </summary>
      <param name="sessionToClose">session to close</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.DisposeUnitOfWork">
      <summary>
            Dispose current UnitOfWork
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.InitializeContainerAndUnitOfWorkFactory">
      <summary>
            IoC Container와 UnitOfWorkFactory를 초기화한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.SetupDatabase(NHibernate.ISession)">
      <summary>
            Creates the in db schema using the session.
            </summary>
      <param name="session">An open NHibernate session.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.ToString">
      <summary>
            인스턴스의 정보를 문자열로 반환한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.Dispose">
      <summary>
            Release unmanaged resources. 내부 Container를 메모리에서 해제한다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.NHConfiguration">
      <summary>
            NHibernate 환경설정 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.DatabaseName">
      <summary>
            Database name for testing
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.DatabaseEngine">
      <summary>
            Database Engine
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.Container">
      <summary>
            IoC Container
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.ContainerConfigPath">
      <summary>
            Configuration file path of IoC Configuration
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.UnitOfWorkNestingLevel">
      <summary>
            Nesting level of Unit Of Work
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext.SessionFactory">
      <summary>
            NHibernate ISessionFactory for Testing
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.NHUnitOfWorkTestContext.#ctor(NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy,System.String,NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo,System.Action{NHibernate.Cfg.Configuration})">
      <summary>
            생성자
            </summary>
      <param name="dbStrategy">테스트용 DB 생성 전략</param>
      <param name="windsorConfigPath">IoC 환경설정 파일경로</param>
      <param name="mappingInfo">NHibernate 매핑 정보</param>
      <param name="configAction">Configuration 빌드 시 추가할 사항을 정의한 Action</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.NHUnitOfWorkTestContext.InitializeContainerAndUnitOfWorkFactory">
      <summary>
            IoC Container와 UnitOfWorkFactory를 초기화한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.NHUnitOfWorkTestContext.ResetWindsorContainer">
      <summary>
            Reset Castle.Winsor Container
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.NHUnitOfWorkTestContext.NHConfiguration">
      <summary>
            NHibernate 환경설정 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.NHUnitOfWorkTestContext.SessionFactory">
      <summary>
            NHibernate ISessionFactory for Testing
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo">
      <summary>
            NHibernate 용 Mapping 파일에 대한 정보
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.From(System.Reflection.Assembly[])">
      <summary>
            지정된 Assembly 들로 부터 매핑할 형식들을 찾아낸다.
            </summary>
      <param name="assemblies">매핑할 어셈블리들</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.FromAssemblyContaining``1">
      <summary>
            지정된 Assembly 들로 부터 매핑할 형식들을 찾아낸다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.AddQueryLanguageImport(System.Type[])">
      <summary>
            Tell NHibernate about the specified types that are referenced in HQL Queries.
            </summary>
      <param name="types">추가할 Entity의 타입들</param>
      <remarks>
            This method makes a simple assumption: the name of a type referenced in HQL is the same as the 
            unqalified name of the actual class/struct. If alias names are used, then
            register these using <see cref="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.AddQueryLanguageImport(System.String,System.Type)" /></remarks>
      <returns>Current instance</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.AddQueryLanguageImport(System.String,System.Type)">
      <summary>
            Tell NHibernate about the specified types that are referenced in HQL Queries.
            </summary>
      <param name="alias">Alias</param>
      <param name="type">추가할 Entity 수형</param>
      <remarks>
            This method makes a simple assumption: the name of a type referenced in HQL is the same as the 
            unqalified name of the actual class/struct. 
            </remarks>
      <returns>Current instance</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.SetNHInitializationAware(NSoft.NFramework.Data.NHibernateEx.INHInitializationAware)">
      <summary>
            NHibernate 초기화 수행자를 지정한다.
            </summary>
      <param name="aware">초기화 수행자</param>
      <returns>Current instance</returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.NHInitializationAware">
      <summary>
            NHibernate 초기 설정자
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.MappingAssemblies">
      <summary>
            매핑한 Assebly 들
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.MappingInfo.QueryLanguageImports">
      <summary>
             (Key: Full name of Entity Type, Value = Assembly Name")
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.PersistenceSpecificationTool">
      <summary>
            FluentNHibernate 의 <see cref="T:FluentNHibernate.Testing.PersistenceSpecification`1" />를 사용하기 쉽게 해주는 Utility Class 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.PersistenceSpecificationTool.Specification``1(NHibernate.ISession)">
      <summary>
            지정된 Session을 이용하여, 엔티티의 매핑을 테스트할 수 있는 <see cref="T:FluentNHibernate.Testing.PersistenceSpecification`1" />를 생성해 반환한다.
            </summary>
      <typeparam name="T">테스트할 엔티티의 수형</typeparam>
      <param name="session">NHibernate Session</param>
      <returns>
        <see cref="T:FluentNHibernate.Testing.PersistenceSpecification`1" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.PersistenceSpecificationTool.Specification``1(NHibernate.ISession,System.Collections.IEqualityComparer)">
      <summary>
            지정된 Session을 이용하여, 엔티티의 매핑을 테스트할 수 있는 <see cref="T:FluentNHibernate.Testing.PersistenceSpecification`1" />를 생성해 반환한다.
            </summary>
      <typeparam name="T">테스트할 엔티티의 수형</typeparam>
      <param name="session">NHibernate Session</param>
      <param name="entityEqualityComparer">엔티티의 속성들의 비교자</param>
      <returns>
        <see cref="T:FluentNHibernate.Testing.PersistenceSpecification`1" /> 인스턴스</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy">
      <summary>
            A strategy class that parameterizes a <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" /> with database specific implementations
            </summary>
      <remarks>
            This class is a companion to <see cref="T:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContext" />. Its
            purpose is to encapsulate behind a common interface the database
            specific implementations of behaviour required to construct and manage
            the test context
            </remarks>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.ProxyFactoryCastle">
      <summary>
            Castle ProxyFactory의 Type FullName
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.SQLiteDbName">
      <summary>
            테스트시에는 기본적으로 SQLite 메모리 DB를 사용한다. SQLite 메모리 DB 명
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.CreatePhysicalDatabaseMediaFor(NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String)">
      <summary>
            Creates the physical database named <paramref name="databaseName" />.
            </summary>
      <remarks>
            Use this method to create the physical database file. 
            <para>
            For MsSqlCe this will create a database file in the file system
            named <paramref name="databaseName" />.sdf
            </para><para>
            For MsSql2005 this will create a database named <paramref name="databaseName" /> in the (local) instance of Sql Server 2005 on
            this machine
            </para></remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.For(NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            특정 Database System 종류에 대한 테스트용 DB 생성 및 UnitOfWork의 환경설정 정보를 제공하는 
            UnitOfWorkTestContextDbStrategy의 인스턴스를 빌드한다.
            </summary>
      <param name="databaseEngine">Database system 종류</param>
      <param name="databaseName">테스트용 Database name</param>
      <param name="properties">NHibernate configuration properties</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.For(NSoft.NFramework.Data.NHibernateEx.DatabaseEngine,System.String)">
      <summary>
            특정 Database System 종류에 대한 테스트용 DB 생성 및 UnitOfWork의 환경설정 정보를 제공하는 
            UnitOfWorkTestContextDbStrategy의 인스턴스를 빌드한다.
            </summary>
      <param name="databaseEngine">Database system 종류</param>
      <param name="databaseName">테스트용 Database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.IsSqlServer2005OrAboveInstalled">
      <summary>
            로컬 컴퓨터에 Microsoft SQL Server 2005 Or Higher version이 설치되어 있는지 검사한다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.#ctor(System.String)">
      <summary>
            생성자
            </summary>
      <param name="databaseName">ConnectionString에서 Initial Catalog에 해당되는 Database명</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.CreateSession">
      <summary>
            Create new session in testing context
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.SetUpDatabase(NHibernate.ISession)">
      <summary>
            Setup database ( create database file, create database schema )
            </summary>
      <param name="currentSession">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.CreateDatabaseSchema(NHibernate.ISession)">
      <summary>
            create database schema for current session
            </summary>
      <param name="currentSession">
      </param>
      <seealso cref="T:NHibernate.Tool.hbm2ddl.SchemaExport" />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.DatabaseEngine">
      <summary>
            Database Engine
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.DatabaseName">
      <summary>
            테스트용 Database 명
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.NHibernateProperties">
      <summary>
            NHibernate 설정 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.ForTesting.UnitOfWorkTestContextDbStrategy.TestContext">
      <summary>
            UnitOfWork Context for Testing
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication" -->
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication.OnBeginRequest(System.Object,System.EventArgs)">
      <summary>
            ASP.NET에서 페이지 또는 XML Web services 같은 이벤트 처리기의 실행을 시작하기 바로 전에 발생하는 Event에 대한 Handler<br />
            1. Application 생성 시 한번만 IoC 관련 정보를 초기화 합니다.<br />
            2. UnitOfWork를 Start 시킵니다.
            </summary>
      <remarks>
            기본 설정 파일이 아닌 다른 파일에 대해 초기화를 하려면 재정의를 해야 한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication.OnEndRequest(System.Object,System.EventArgs)">
      <summary>
            Web Application의 요청 처리 후 사후 처리를 한다.
            UnitOfWork 를 Stop 시키고, 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication.ApplicationStartAfter(System.Web.HttpContext)">
      <summary>
            Application_Start 시에 실행할 비동기 작업의 본체입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpModule">
      <summary>
            Web Application에서 NHibernate용 Unit-Of-Work 을 편리하게 사용하기 위해 구현하였다.<br />
            모든 요청에 대해 UnitOfWork를 시작/완료를 자동으로 수행하게 하므로서, 
            실제 page/web service 개발자가 UnitOfWork의 초기화 및 종료 처리를 수행하지 않아도 된다.<br /><br />
            UnitOfWorkHttpModule을 사용하면, <see cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication" />와 같이 상속을 받을 필요 없이, 
            UnitOfWork를 초기화를 담당해주므로, 확장성이 있으므로, DNN 처럼 CustomHttpApplication이 있는 경우에 PlugIn 방식으로 끼워 넣을 수도 있다.
            </summary>
      <remarks>
            이 모듈을 사용하려면 환경설정에 기본적으로 Castle.Windsor 환경 설정 정보가 있어야 합니다.
            <see cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWork" />를 사용할 때, Web Application 개발자가 명시적으로 <see cref="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Start" />를 호출 할 필요 없다.<br /><br />
            Session 사용이 가능한 Web Application에서는 여러 페이지에 걸쳐 UnitOfWork를 유지할 수 있다. 
            이를 Long Conversation이라 하는데, Web Application에서의 다중 작업에 대해 Transaction을 유지 할 수 있다. 
            </remarks>
      <example>
            IIS 7.0 클래식 모드와 IIS 7.0 이전 버전에 적용할 때
            <code>
            &lt;configuration&gt;
              &lt;system.web&gt;
            	&lt;httpModule&gt;
            		&lt;add name="UnitOfWorkHttpModule" type="NSoft.NFramework.Data.NH.UnitOfWorkHttpModule, NSoft.NFramework.Data"/&gt;
            	&lt;/httpModule&gt;
              &lt;/system.web&gt;
            &lt;/configuration&gt;
            </code>
            IIS 7.0 통합모드에 적용할 때
            <code>
            &lt;configuration&gt;
              &lt;system.webServer&gt;
            	&lt;module&gt;
            		&lt;add name="UnitOfWorkHttpModule" type="NSoft.NFramework.Data.NH.UnitOfWorkHttpModule, NSoft.NFramework.Data"/&gt;
            	&lt;/module&gt;
              &lt;/system.webServer&gt;
            &lt;/configuration&gt;
            </code></example>
      <seealso cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication" />
      <seealso cref="!:WindsorHttpApplication" />
      <seealso cref="!:IoCHttpModule" />
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpModule.CurrentLongConversationKey">
      <summary>
            Current Long Conversation Key
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpModule.Init(System.Web.HttpApplication)">
      <summary>
            모듈을 초기화하고 요청을 처리할 수 있도록 준비합니다.
            </summary>
      <param name="context">
            ASP.NET 응용 프로그램 내의 모든 응용 프로그램 개체에 공통되는 메서드, 속성 및 이벤트에 액세스할 수 있도록 하는 <see cref="T:System.Web.HttpApplication" />입니다. 
            </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpModule.Dispose">
      <summary>
        <see cref="T:System.Web.IHttpModule" />을 구현하는 모듈에서 사용하는 리소스(메모리 제외)를 삭제합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpModule.OnBeginRequest(System.Object,System.EventArgs)">
      <summary>
            ASP.NET에서 페이지 또는 XML Web services 같은 이벤트 처리기의 실행을 시작하기 바로 전에 발생하는 Event에 대한 Handler<br />
            1. IoC 관련 정보를 초기화 합니다.<br />
            2. UnitOfWork를 Start 시킵니다.
            </summary>
      <remarks>
            기본 설정 파일이 아닌 다른 파일에 대해 초기화를 하려면 재정의를 해야 한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpModule.OnEndRequest(System.Object,System.EventArgs)">
      <summary>
            Web Application의 요청 처리 후 사후 처리를 한다. (실제 처리하는 것은 없고, 재정의가 가능하도록 남겨두었다.)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.EditableObjectInterceptor">
      <summary>
            엔티티에 <see cref="T:System.ComponentModel.IEditableObject" />를 제공하는 Proxy로 만들어주는 Interceptor입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.ProxyInterceptorBase">
      <summary>
            엔티티를 원하는 Proxy로 만들기 위한 NHibernate.Interceptor의 기본 Interceptor입니다.
            NOTE: GetEntityName() 과 CreateProxy() 를 재정의하여야 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.ProxyInterceptorBase.CreateProxy(System.Type)">
      <summary>
            NOTE: Proxy 생성 시 꼭 Type을 이용하여 Proxy를 생성해야 제대로 됩니다!!! Target Instance 으로 Proxy를 생성하면 예외가 발생합니다.
            </summary>
      <param name="entityType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Interceptors.ProxyInterceptorBase.ProxyInterface">
      <summary>
            Proxy가 제공할 대표 Interface의 형식 (예: typeof(INotifyPropertyChanged), typeof(IEditableObjecgt))
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.EditableObjectInterceptor.CreateProxy(System.Type)">
      <summary>
            NOTE: Proxy 생성 시 꼭 Type을 이용하여 Proxy를 생성해야 제대로 됩니다!!! Target Instance 으로 Proxy를 생성하면 예외가 발생합니다.
            </summary>
      <param name="entityType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Interceptors.EditableObjectInterceptor.ProxyInterface">
      <summary>
            Proxy가 제공할 대표 Interface의 형식 (예: typeof(INotifyPropertyChanged), typeof(IEditableObjecgt))
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.EditablePropertyChangedInterceptor">
      <summary>
            엔티티를 <see cref="T:System.ComponentModel.INotifyPropertyChanged" />, <see cref="T:System.ComponentModel.IEditableObject" /> 인터페이스를 가지는 Proxy로 만들어줍니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.EditablePropertyChangedInterceptor.CreateProxy(System.Type)">
      <summary>
            NOTE: Proxy 생성 시 꼭 Type을 이용하여 Proxy를 생성해야 제대로 됩니다!!! Target Instance 으로 Proxy를 생성하면 예외가 발생합니다.
            </summary>
      <param name="entityType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Interceptors.EditablePropertyChangedInterceptor.ProxyInterface">
      <summary>
            Proxy가 제공할 대표 Interface의 형식 (예: typeof(INotifyPropertyChanged), typeof(IEditableObjecgt))
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor">
      <summary>
            Entity 상태 정보를 유지하는 관리하는 Interceptor이다. 
            </summary>
      <remarks>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.DataEntityBase`1" />나 <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.StateEntityBase" />를 상속받아서 사용할 때,
            Entity의 상태(IsTransient, IsSaved) 값을 제대로 제공받으려면, EntityStateInterceptor를 SessionFactory에 등록해 줘야 합니다.
            </remarks>
      <seealso cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IStateEntity" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor.IsTransient(System.Object)">
      <summary>
            Indicate that the specified object is transient object.
            </summary>
      <param name="entity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor.OnLoad(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
      <summary>
            occurred when the specified entity is loaded.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor.OnSave(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
      <summary>
            Occurred when the specified entity is saved.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.InterceptorDecorator">
      <summary>
            Decorator 패턴을 이용하여 여러개의 Interceptor를 Chain 방식으로 호출할 수 있도록 하였다. <see cref="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.MultipleInterceptor" /> 와는 다른 효과를 볼 수 있다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.InterceptorDecorator.#ctor(NHibernate.IInterceptor)">
      <summary>
            Constructor
            </summary>
      <param name="inner">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.LoggingInterceptor">
      <summary>
            NHibernate Interceptor의 활동을 Trace 레벨로 로그에 기록합니다. (로그 Level이 DEBUG 일때만 가능합니다.)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.MultipleInterceptor">
      <summary>
            다양한 Interceptor를 가지며, IoC를 이용하여 다중의 Interceptor를 등록하여 처리할 수 있다. 
            </summary>
      <remarks>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.InterceptorDecorator" />와는 처리 방식이 약간 다르다.
            </remarks>
      <example>
            IoC 환경설정에서 아래와 같이 여러개의 Interceptor를 MultipleInterceptor에 등록하고, 
            SessionFactory에서 Session을 열때 MultipleInterceptor를 사용하게 되면, 등록된 모든 Interceptor를 이용할 수 있다. 
            (단 항상 MultipleInterceptor를 제일 먼저 정의해 줘야 한다.)
            <code>
            &lt;component id="NHibernate.Interceptor"
            		   service="NHibernate.IInterceptor, NHibernate"
            		   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.MultipleInterceptor, NSoft.NFramework.Data.NHibernateEx"&gt;
            	&lt;parameters&gt;
            		&lt;interceptors&gt;
            			&lt;array type="NHibernate.IInterceptor, NHibernate"&gt;
            				&lt;item&gt;${EntityStateInterceptor}&lt;/item&gt;
            				&lt;item&gt;${LoggingInterceptor}&lt;/item&gt;
            			&lt;/array&gt;
            		&lt;/interceptors&gt;
            	&lt;/parameters&gt;
            &lt;/component&gt;
            
            &lt;component id="EntityStateInterceptor"
            				   service="NHibernate.IInterceptor, NHibernate"
            				   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor, NSoft.NFramework.Data.NHibernateEx"&gt;
            &lt;/component&gt;
            
            &lt;component id="LoggingInterceptor"
            		   service="NHibernate.IInterceptor, NHibernate"
            		   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.LoggingInterceptor, NSoft.NFramework.Data.NHibernateEx"&gt;
            &lt;/component&gt;
            </code></example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.MultipleInterceptor.#ctor(System.Collections.Generic.IEnumerable{NHibernate.IInterceptor})">
      <summary>
            Constructor
            </summary>
      <param name="interceptors">
      </param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.NotifyPropertyChangedInterceptor">
      <summary>
            엔티티에 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 인터페이스를 구현한 Proxy로 제공하도록 하는 NHibernate Interceptor 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Interceptors.NotifyPropertyChangedInterceptor.CreateProxy(System.Type)">
      <summary>
            NOTE: Proxy 생성 시 꼭 Type을 이용하여 Proxy를 생성해야 제대로 됩니다!!! Target Instance 으로 Proxy를 생성하면 예외가 발생합니다.
            </summary>
      <param name="entityType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Interceptors.NotifyPropertyChangedInterceptor.ProxyInterface">
      <summary>
            Proxy가 제공할 대표 Interface의 형식 (예: typeof(INotifyPropertyChanged), typeof(IEditableObjecgt))
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:NSoft.NFramework.Data.NHibernateEx.NLogFactory" -->
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NLogLogger">
      <summary>
            NLog를 이용하는 NHibernate용 Logger
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Mappers.EnumStringMapper`1">
      <summary>
            NHibernate를 이용하여 Enum 타입의 값을 문자열로 직접 DB에 저장하고, Load하기 위해서 사용하는 매퍼입니다.
            참고 : http://orand.blogspot.com/2006/12/generic-nhibernate-enum-string-mapping.html
            </summary>
      <example>
              // 만약 MyNamespace.MyEnum 값을 특정 hbm에 매핑시킬 때에는 다음과 같이 하면 됩니다.
            
              // Enum 정의
              public enum MyEnum {
                Unknown,
                Type1,
            	Type2
              }
            
              // hbm 정의
             &lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"&gt;
            	&lt;class name="MyNamespace.MyClass, MyAssembly" table="TBL_MyClass"&gt;
            		&lt;id name="Id" column="MyId"&gt;
            			&lt;generator class="native"/&gt;
            		&lt;/id&gt;
            
            		&lt;property name="MyEnumType" column="MyEnumTypeID"
                              type="NSoft.NFramework.Data.NH.Mappers.EnumStringMapper`1[[MyNamespace.MyEnum, MyAssembly]], NSoft.NFramework.Data"/&gt;
            	&lt;/class&gt;
            &lt;/hibernate&gt;
            </example>
      <typeparam name="TEnum">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Mappers.EnumStringMapper`1.#ctor">
      <summary>
            default constructor
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache">
      <summary>
            .NET System의 메모리 Cache 시스템을 이용한 Cache 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Get(System.Object)">
      <summary>
            Get the object from the Cache
            </summary>
      <param name="key" />
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Put(System.Object,System.Object)">
      <summary />
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Remove(System.Object)">
      <summary>
            Remove an item from the Cache.
            </summary>
      <param name="key">The Key of the Item in the Cache to remove.</param>
      <exception cref="T:NHibernate.Cache.CacheException" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Clear">
      <summary>
            Clear the Cache
            </summary>
      <exception cref="T:NHibernate.Cache.CacheException" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Destroy">
      <summary>
            Clean up.
            </summary>
      <exception cref="T:NHibernate.Cache.CacheException" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Lock(System.Object)">
      <summary>
            If this is a clustered cache, lock the item
            </summary>
      <param name="key">The Key of the Item in the Cache to lock.</param>
      <exception cref="T:NHibernate.Cache.CacheException" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Unlock(System.Object)">
      <summary>
            If this is a clustered cache, unlock the item
            </summary>
      <param name="key">The Key of the Item in the Cache to unlock.</param>
      <exception cref="T:NHibernate.Cache.CacheException" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.NextTimestamp">
      <summary>
            Generate a timestamp
            </summary>
      <returns />
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.Timeout">
      <summary>
            Get a reasonable "lock timeout" (60 seconds)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCache.RegionName">
      <summary>
            Gets the name of the cache region
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheConfig">
      <summary>
            환경 설정 속성 정보
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheConfig.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            생성자
            </summary>
      <param name="region">캐시 영역명</param>
      <param name="expiration">유효기간 (초단위)</param>
      <param name="priority">중요도 (1~7)</param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheProvider">
      <summary>
            System.Web.Caching 의 캐시 클래스들을 이용한 Cache provider입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Configure the cache
            </summary>
      <param name="regionName">the name of the cache region</param>
      <param name="properties">configuration settings</param>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheProvider.NextTimestamp">
      <summary>
            generate a timestamp
            </summary>
      <returns />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheProvider.Start(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Callback to perform any necessary initialization of the underlying cache implementation
                        during ISessionFactory construction.
            </summary>
      <param name="properties">current configuration settings</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheProvider.Stop">
      <summary>
            Callback to perform any necessary cleanup of the underlying cache implementation
                        during <see cref="M:NHibernate.ISessionFactory.Close" />.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHCaches.SysCache.SysCacheSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
            구성 섹션 처리기를 만듭니다.
            </summary>
      <returns>
            만들어진 섹션 처리기 개체입니다.
            </returns>
      <param name="parent">부모 개체입니다.</param>
      <param name="configContext">구성 컨텍스트 개체입니다.</param>
      <param name="section">섹션 XML 노드입니다.</param>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.IFetchingStrategy">
      <summary>
            Database fetching strategy
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IFetchingStrategy.Apply(NHibernate.ICriteria)">
      <summary>
            지정된 Criteria에 Fetching Strategy를 적용시킵니다.
            </summary>
      <param name="criteria">질의용 criteria</param>
      <returns>Fetching 전략이 적용된 Criteria</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.IFetchingStrategy`1">
      <summary>
             Database fetching strategy for the specified entity type.
            </summary>
      <typeparam name="TEntity">Type of entity</typeparam>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.INHRepository`1">
      <summary>
            NHibernate용 Repository의 기본 Interface
            </summary>
      <typeparam name="T">Type of Entity</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Get(System.Object)">
      <summary>
            Get Entity by specified identity value or return nulll if it doesn't exist
            </summary>
      <param name="id">
      </param>
      <returns>if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Get(System.Object,NHibernate.LockMode)">
      <summary>
            Get Entity by specified identity value or return nulll if it doesn't exist
            </summary>
      <param name="id">identity of entity</param>
      <param name="lockMode">entity lock mode</param>
      <returns>if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Load(System.Object)">
      <summary>
            Load Entity by specified identity value or throw an exception if there isn't an entity that matches the specified id
            </summary>
      <param name="id">identity of entity</param>
      <returns>if not exists, exception occurred</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Load(System.Object,NHibernate.LockMode)">
      <summary>
            Load Entity by specified identity value or throw an exception if there isn't an entity that matches the specified id
            </summary>
      <param name="id">
      </param>
      <param name="lockMode">entity lock mode</param>
      <returns>if not exists, exception occurred</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetIn(System.Collections.ICollection)">
      <summary>
            지정된 Identity 배열에 해당하는 모든 Entity를 로딩한다. (In 을 사용한다)
            </summary>
      <param name="ids">identity values</param>
      <returns>list of entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetInG``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            지정된 Id 컬렉션에 해당하는 모든 Entity를 로딩한다. (SQL 의 IN (xxx,yyy,zzz) 를 사용한다)
            </summary>
      <typeparam name="TId">Entity Id의 수형</typeparam>
      <param name="ids">Id값의 컬렉션</param>
      <returns>list of entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size</param>
      <param name="criterions">criteria</param>
      <returns>paginated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size</param>
      <param name="orders">sort order</param>
      <param name="criterions">criteria</param>
      <returns>paginated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetPage(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="criteria">detached criteria</param>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size</param>
      <param name="criteria">detached criteria</param>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetPage(NSoft.NFramework.Data.NHibernateEx.INHOrder{`0}[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FutureGet(System.Object)">
      <summary>
            Get a future entity from the persistance store, or return null
            if it doesn't exist.
            Note that the null will be there when you resolve the FutureValue.Value property
            </summary>
      <param name="id">identity value of entity</param>
      <returns>instance of future value</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FutureLoad(System.Object)">
      <summary>
            A future of the entity loaded from the persistance store
            Will throw an exception if there isn't an entity that matches
            the id.
            </summary>
      <param name="id">identity value of entity.</param>
      <returns>The entity that matches the id</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FutureValue(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
      <param name="detachedCriteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FutureValue(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Future(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
      <param name="detachedCriteria">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll">
      <summary>
            Get all entities.
            </summary>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get entities matched with criteria
            </summary>
      <param name="criterions">where</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ordered and ranged entities matched with criteria
            </summary>
      <param name="orders">ordering spec</param>
      <param name="criterions">where spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(NHibernate.Criterion.Order[],System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            지정된 criteria를 이용하여 정보를 조회합니다.
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="orders">정렬 순서</param>
      <param name="criterions">조회 조건</param>
      <returns>collection of entity.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ranged entities matched with criteria
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="criterions">where</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            지정된 criteria를 이용하여 정보를 조회합니다.
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="orders">정렬 순서</param>
      <param name="criterions">조회 조건</param>
      <returns>collection of entity.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get ranged entites matched with detached criteria, ordering is optional
            </summary>
      <param name="criteria">where spec</param>
      <param name="orders">ordering spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(NHibernate.Criterion.DetachedCriteria,System.Int32,System.Int32,NHibernate.Criterion.Order[])">
      <summary>
            Get ranged entites matched with detached criteria, ordering is optional
            </summary>
      <param name="criteria">where spec</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1)</param>
      <param name="orders">ordering spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(`0,System.Int32,System.Int32,System.String[])">
      <summary>
            Get entities by examping with exampleInstance
            </summary>
      <param name="exampleInstance">instance for exampling</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="propertyNamesToExclude">excluded property for exampling</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(`0,System.String[])">
      <summary>
            Get entities by examping with exampleInstance
            </summary>
      <param name="exampleInstance">instance for exampling</param>
      <param name="propertyNamesToExclude">excluded property for exampling</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get entities by Named Query which defined in mapping files (*.hbm.xml) ex: &lt;query name="xxxx"&gt;
            </summary>
      <param name="namedQuery">name of NamedQuery which defined in mapping files(*.hbm.xml)</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAll(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get entities by Named Query which defined in mapping files (*.hbm.xml) ex: &lt;query name="xxxx"&gt;
            </summary>
      <param name="namedQuery">name of NamedQuery which defined in mapping files(*.hbm.xml)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAllByHql(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            NHibernate Query Language (HQL) 를 이용한 조회
            </summary>
      <param name="queryString">hql string</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAllByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            NHibernate Query Language (HQL) 를 이용한 조회
            </summary>
      <param name="queryString">hql string</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindAllPropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 엔티티를 모두 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOne(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get unique entity matches with specified criteria
            </summary>
      <param name="criterions">where spec</param>
      <returns>if not unique entity or not exists, raise exception</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOne(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Get unique entity matches with specified detached criteria
            </summary>
      <param name="criteria">where spec</param>
      <returns>if not unique entity or not exists, raise exception</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOne(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Get unique entity matches with specified detached criteria. if one more entity exists, throw exception
            </summary>
      <param name="queryOver">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOne(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get unique entity by named query which defined mapping file
            </summary>
      <param name="namedQuery">name of NamedQuery</param>
      <param name="parameters">parameters</param>
      <returns>if not unique entity or not exists, raise exception</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOne(`0,System.String[])">
      <summary>
            Find unique entity by example instance. if one more entity exists, throw exception
            </summary>
      <param name="exampleInstance">instance of exampling</param>
      <param name="propertyNamesToExclude">prpoerty names to exclude when matching example</param>
      <returns>if not unique entity or not exists, raise exception</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOneByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get unique entity by hql
            </summary>
      <param name="query">hql string</param>
      <param name="parameters">named parameters</param>
      <returns>if not unique entity or not exists, raise exception</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindOnePropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 유일한 엔티티를 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>엔티티, 없으면 null 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirst(NHibernate.Criterion.Order[])">
      <summary>
            Get first entity by ordering
            </summary>
      <param name="orders">order by</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirst(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get first entity matched with specified criteria (criteria is optional).
            </summary>
      <param name="criterions">The collection of ICriterion to look for.</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirst(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get first entity matched with specified detached criteria (criteria is optional) and ordering
            </summary>
      <param name="criteria">where spec</param>
      <param name="orders">order by</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirst(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get first entity from NamedQuery
            </summary>
      <param name="namedQuery">NamedQuery to look for</param>
      <param name="parameters">HQL Parameters</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirst(`0,System.String[])">
      <summary>
            Get first entity matches with exampleInstance by Exampling.
            </summary>
      <param name="exampleInstance">instance for Exampling</param>
      <param name="propertyNamesToExclude">excluded property name for Exampling</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirstByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get the first entity by Hql
            </summary>
      <param name="queryString">hql string</param>
      <param name="parameters">named parameters</param>
      <returns>first entity in retrieved entity collection. if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.FindFirstPropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 첫번째 엔티티를 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>엔티티, 없으면 null 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Count">
      <summary>
            Counts the overall number of entities.
            </summary>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Count(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="criteria">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Count(NHibernate.Criterion.ICriterion[])">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="criterions">The collection of ICriterion to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Count(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the query
            </summary>
      <param name="queryOver">QueryOver to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CountAsLong(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CountAsInt(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Exists">
      <summary>
            Check if any instance of the type exists
            </summary>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Exists(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="criteria">The criteria to looking for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Exists(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="queryOver">The criteria to looking for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Exists(NHibernate.Criterion.ICriterion[])">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="criterions">Collection of ICriterion</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="expressions">The collection of Lambda expression to look for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Exists(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Check if any instance matches with the specified named query
            </summary>
      <param name="namedQuery">named query for looking for</param>
      <param name="parameters">parameters</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ExistsByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Check if any instance matches with the specified simple query string
            </summary>
      <param name="queryString">queryString for looking for</param>
      <param name="parameters">parameters</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ExistsById(System.Object)">
      <summary>
            Is entity exists that's is the specified identity. (별 필요없지 않나?)
            </summary>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,System.Boolean)">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <param name="distinctResult">Indicate projection is distinctly search.</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <param name="orders">The fields the repository should order by</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criterions" /> to the DTO</param>
      <param name="criterions">The collectio of ICriterion to look for</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criterions" /></returns>
      <remarks>
            The intent is for <paramref name="criterions" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criterions" /> to the DTO</param>
      <param name="orders">The fields the repository should order by</param>
      <param name="criterions">The collectio of ICriterion to look for</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criterions" /></returns>
      <remarks>
            The intent is for <paramref name="criterions" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criteria" /> to the DTO</param>
      <param name="criteria">The criteria to look for</param>
      <param name="orders">The fields the repository should order by</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criteria" /></returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportAll``1(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="namedQuery">
      </param>
      <param name="parameters">
      </param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="namedQuery" /></returns>
      <returns>collection of <typeparamref name="TProject" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportOne``1(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="criteria">The criteria to look for</param>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="criteria" /> to the DTO.
            </param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportOne``1(NHibernate.Criterion.QueryOver{`0},NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="queryOver">The criteria to look for</param>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="queryOver" /> to the DTO.
            </param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="queryOver" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ReportOne``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="criterions" /> to the DTO.
            </param>
      <param name="criterions">The collection of ICriterion to look for</param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="criterions" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Persist(`0)">
      <summary>
            Transient Object를 Persistent Object로 만듭니다. 즉 Save합니다!!!
            </summary>
      <param name="entity">저장할 엔티티</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Save(`0)">
      <summary>
            save entity
            </summary>
      <param name="entity">entity to save</param>
      <returns>The generated identifier</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Save(`0,System.Object)">
      <summary>
            Save entity with Identity
            </summary>
      <param name="entity">entity to save or update</param>
      <param name="id">identity value of entity</param>
      <returns>Saved entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.SaveOrUpdate(`0)">
      <summary>
            Save or Update entity
            </summary>
      <param name="entity">entity to save or update</param>
      <returns>saved or updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.SaveOrUpdateCopy(`0)">
      <summary>
            Save or Update and Copy 
            </summary>
      <param name="entity">entity to save or update</param>
      <returns>an saved / updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.SaveOrUpdateCopy(`0,System.Object)">
      <summary>
            Save or Update and Copy 
            </summary>
      <param name="entity">entity</param>
      <param name="id">identity value of entity</param>
      <returns>an saved / updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Update(`0)">
      <summary>
            Update entity
            </summary>
      <param name="entity">entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Update(`0,System.Object)">
      <summary>
            Update entity
            </summary>
      <param name="entity">entity to update</param>
      <param name="id">identity value of entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Merge(`0)">
      <summary>
            SaveOrUpdate와는 달리 First Session에 이미 캐시되어 있는 엔티티라면, 최신 값으로 반영한 후 Save/Update를 수행한다.
            SaveOrUpdate는 Interceptor에서 엔티티 속성 값이 null로 바뀌는 문제가 있는 반면 Merge는 그렇지 않다.
            </summary>
      <param name="entity">저장/갱신할 엔티티</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Replicate(`0,NHibernate.ReplicationMode)">
      <summary>
            다른 SessionFactory에 있는 현재 SessionFactory로 엔티티를 복제한다.
            </summary>
      <param name="entity">복제할 엔티티</param>
      <param name="replicateMode">복제 모드</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Delete(`0)">
      <summary>
            delete specified entity
            </summary>
      <param name="entity">entity to delete</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Delete(System.Object,NHibernate.LockMode)">
      <summary>
            delete entity by identity value
            </summary>
      <param name="id">Identity value of entity to delete</param>
      <param name="lockMode">Lock mode</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll">
      <summary>
            delete all entities
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            delete entities matched with specified detached criteria
            </summary>
      <param name="criteria">The criteria to look for deleting</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            delete entities matched with specified detached criteria
            </summary>
      <param name="queryOver">The criteria to look for deleting</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll(NHibernate.Criterion.ICriterion[])">
      <summary>
            Criterion에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
      <param name="criterions">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
      <summary>
        <paramref name="expressions" />에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll(NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            지정된 Parameter에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
      <param name="parameters">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAll(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Delete entities by Named Query (defined at hbm.xml)
            </summary>
      <param name="namedQuery">named query to look for deleting</param>
      <param name="parameters">parameters</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.DeleteAllByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Delete entities by HQL 
            </summary>
      <param name="hql">HQL string to look for deleting</param>
      <param name="parameters">parameters</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Execute DML-Style hql with parameters with NH 2.1.0 or higher
            </summary>
      <remarks>
            DML-style statements (insert, update, delete) 를 Session Memory 영역을 사용하지 않고, 직접 DB에 적용하여 성능을 향상 시킨다.
            제약사항은 Hibernate Reference 를 참고할 것 (13.4 DML-style operations)<br /><br />
            NHibernate configuration에 다음과 같이 설정을 추가해야 한다.<br />
            &lt;!-- DML-style operations : delete/insert/update/bulk copy 시에 hql을 이용할 수 있다. (예: delete Enitty)--&gt;
            &lt;property name="query.factory_class"&gt;NHibernate.Hql.Ast.ANTLR.ASTQueryTranslatorFactory, NHibernate&lt;/property&gt;
            </remarks>
      <param name="hql">HQL statement. ex: delete Parent p where exists (from p.Children)</param>
      <param name="parameters">named parameters</param>
      <returns>number of entities effected by this operation</returns>
      <seealso cref="M:NHibernate.IQuery.ExecuteUpdate" />
      <example>
        <code>
            // UPDATE or DELETE Statemement sample.
            (UPDATE | DELETE) [VERSIONED] [FROM] EntityName [WHERE where_conditions)
            
            // INSERT Statement
            INSERT INTO EntityName properties_list select_statement.
            // INSERT INTO ... SELECT ... 만 가능하고, 일반적인 SQL문장인 INSERT INTO ... VALUES ... 는 지원하지 않는다.
            
            // update customer
            ExecuteUpdate("update Customer c set c.Name = :NewName where c.Name = :OldName", new NHParameter("OldName", "Debop", TypeFactory.GetStringType(255)), new NHParameter("NewName", "Sunghyouk", TypeFactory.GetStringType(255)));
            
            // update versioned entity ( reset version of Customer )
            ExecuteUpdate("update versioned Customer c set c.Name = :NewName where c.Name = :OldName", new NHParameter("OldName", "Debop", TypeFactory.GetStringType(255)), new NHParameter("NewName", "Sunghyouk", TypeFactory.GetStringType(255));
            
            // delete Customer
            ExecuteUpdate("delete Customer c where c.Name = :Name", new NHParameter("Name", "Debop", TypeFactory.GetStringType(255)));
            
            
            // insert Account
            ExecuteUpdate("insert into Account(Id, Name) select c.Id, c.Name from Customer c where c.Name=:Name", new NHParameter("Name", "Debop", TypeFactory.GetStringType(255)));
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ExecuteUpdateTransactional(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])" />와 같은 일을 하지만, Transaction을 적용하여, 작업한다.
            </summary>
      <param name="hql">HQL statement. ex: delete Parent p where exists (from p.Children)</param>
      <param name="parameters">named parameters</param>
      <returns>number of entities effected by this operation</returns>
      <seealso cref="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Create">
      <summary>
            Create an new instance of <typeparamref name="T" />, mapping it to the concrete class if needed
            </summary>
      <returns>new instance</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.IsTransient(`0)">
      <summary>
            the specified instance is transient object ?
            </summary>
      <returns>if the specified entity is transient object, return true. otherwise return false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.GetClassMetadata">
      <summary>
            Get Entity metadata
            </summary>
      <returns>Metadata of T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateCriteria">
      <summary>
            Create criteria for current entity type in current session.
            </summary>
      <returns>instance of ICriteria for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateDetachedCriteria">
      <summary>
            Create detached criteria for Entity
            </summary>
      <returns>Instance of DetachedCriteria for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateDetachedCriteria(System.String)">
      <summary>
            Create an aliases <see cref="T:NHibernate.Criterion.DetachedCriteria" /> compatible with current Dao instance.
            </summary>
      <param name="alias">alias</param>
      <returns>Instance of <see cref="T:NHibernate.Criterion.DetachedCriteria" /> which has alias for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateQuery(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create <see cref="T:NHibernate.IQuery" /> instance of current session with parameters.
            </summary>
      <param name="hql">HQL statement</param>
      <param name="parameters">named parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateQueryOver">
      <summary>
            IQueryOver 를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateQueryOver(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            IQueryOver 를 생성합니다.
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateQueryOverOf">
      <summary>
             Detached QueryOver 생성 (<see cref="M:NHibernate.Criterion.QueryOver.Of``1" />)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.CreateQueryOverOf(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            Detached QueryOver 생성 (<see cref="M:NHibernate.Criterion.QueryOver.Of``1" />)
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Query">
      <summary>
            엔티티 질의를 위해 LINQ의 <see cref="T:System.Linq.IQueryable`1" />를 반환합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.ConcreteType">
      <summary>
            Type of Entity which handled by this Reposiotry
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.SessionFactory">
      <summary>
            Entity가 매핑된 Session Factory 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.Session">
      <summary>
            UnitOfWork의 현재 Session 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHRepository`1.QueryProvider">
      <summary>
            Ini 파일로부터 NHibernate HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHRepository`1">
      <summary>
            NHibernate 용 기본 Repository (INHRepository{T} 를 구현한 기본 Class이다.)
            </summary>
      <typeparam name="T">Type of entity object</typeparam>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.NullOrderArray">
      <summary>
            Null Order Array.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.EmptyNHOrders">
      <summary>
            Null <see cref="T:NSoft.NFramework.Data.NHibernateEx.INHOrder" /> Array.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Get(System.Object)">
      <summary>
            Get Entity by specified identity value or return nulll if it doesn't exist
            </summary>
      <param name="id">
      </param>
      <returns>if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Get(System.Object,NHibernate.LockMode)">
      <summary>
            Get Entity by specified identity value or return nulll if it doesn't exist
            </summary>
      <param name="id">identity of entity</param>
      <param name="lockMode">entity lock mode</param>
      <returns>if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Load(System.Object)">
      <summary>
            Load Entity by specified identity value or throw an exception if there isn't an entity that matches the specified id
            </summary>
      <param name="id">identity of entity</param>
      <returns>if not exists, exception occurred</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Load(System.Object,NHibernate.LockMode)">
      <summary>
            Load Entity by specified identity value or throw an exception if there isn't an entity that matches the specified id
            </summary>
      <param name="id">
      </param>
      <param name="lockMode">entity lock mode</param>
      <returns>if not exists, exception occurred</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetIn(System.Collections.ICollection)">
      <summary>
            지정된 Identity 배열에 해당하는 모든 Entity를 로딩한다. (In 을 사용한다)
            </summary>
      <param name="ids">identity values</param>
      <returns>list of entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetInG``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            지정된 Id 컬렉션에 해당하는 모든 Entity를 로딩한다. (SQL 의 IN (xxx,yyy,zzz) 를 사용한다)
            </summary>
      <typeparam name="TId">Entity Id의 수형</typeparam>
      <param name="ids">Id값의 컬렉션</param>
      <returns>list of entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size (must greator than 0)</param>
      <param name="criterions">criteria</param>
      <returns>paginated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size (must greator than 0)</param>
      <param name="orders">sort order</param>
      <param name="criterions">criteria</param>
      <returns>paginated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetPage(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="criteria">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size (must greator than 0)</param>
      <param name="criteria">DetachedCriteria (null 이면 모든 레코드를 조회합니다)</param>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetPage(NSoft.NFramework.Data.NHibernateEx.INHOrder{`0}[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FutureGet(System.Object)">
      <summary>
            Get a future entity from the persistence store, or return null
            </summary>
      <param name="id">
      </param>
      <returns>a future for the entity that matches the id. if it doesn't exist, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FutureLoad(System.Object)">
      <summary>
            Load a future entity from the persistence store.
            Will throw an exception if there isn't an entity that matches the specified id.
            </summary>
      <param name="id">
      </param>
      <returns>a future for the entity that matches the id. if it doesn't exist, throw exception.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FutureValue(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
      <param name="detachedCriteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FutureValue(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Future(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll">
      <summary>
            Get all entities.
            </summary>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get entities matched with criteria
            </summary>
      <param name="criterions">where</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ordered and ranged entities matched with criteria
            </summary>
      <param name="orders">ordering spec</param>
      <param name="criterions">where spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(NHibernate.Criterion.Order[],System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ordered and ranged entities matched with criteria
            </summary>
      <param name="orders">ordering spec</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1)</param>
      <param name="criterions">where spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ranged entities matched with criteria
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="criterions">where</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            지정된 criteria를 이용하여 정보를 조회합니다.
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="orders">정렬 순서</param>
      <param name="criterions">조회 조건</param>
      <returns>collection of entity.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get ranged entites matched with detached criteria, ordering is optional
            </summary>
      <param name="criteria">where spec</param>
      <param name="orders">ordering spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(NHibernate.Criterion.DetachedCriteria,System.Int32,System.Int32,NHibernate.Criterion.Order[])">
      <summary>
            Get ranged entites matched with detached criteria, ordering is optional
            </summary>
      <param name="criteria">where spec</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1)</param>
      <param name="orders">ordering spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(`0,System.String[])">
      <summary>
            Get entities by examping with exampleInstance
            </summary>
      <param name="exampleInstance">instance for exampling</param>
      <param name="propertyNamesToExclude">excluded property for exampling</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(`0,System.Int32,System.Int32,System.String[])">
      <summary>
            Get entities by examping with exampleInstance
            </summary>
      <param name="exampleInstance">instance for exampling</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="propertyNamesToExclude">excluded property for exampling</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get entities by Named Query which defined in mapping files (*.hbm.xml) ex: &lt;query name="xxxx"&gt;
            </summary>
      <param name="namedQuery">name of NamedQuery which defined in mapping files(*.hbm.xml)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAll(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get entities by Named Query which defined in mapping files (*.hbm.xml) ex: &lt;query name="xxxx"&gt;
            </summary>
      <param name="namedQuery">name of NamedQuery which defined in mapping files(*.hbm.xml)</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAllByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            NHibernate Query Language (HQL) 를 이용한 조회
            </summary>
      <param name="queryString">hql string</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAllByHql(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            NHibernate Query Language (HQL) 를 이용한 조회
            </summary>
      <param name="queryString">hql string</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindAllPropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 엔티티를 모두 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOne(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get unique entity matches with specified criteria. if one more entity exists, throw exception
            </summary>
      <param name="criterions">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOne(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Get unique entity matches with specified detached criteria. if one more entity exists, throw exception
            </summary>
      <param name="criteria">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOne(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Get unique entity matches with specified detached criteria. if one more entity exists, throw exception
            </summary>
      <param name="queryOver">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOne(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get unique entity by named query which defined mapping file. if one more entity exists, throw exception
            </summary>
      <param name="namedQuery">name of NamedQuery</param>
      <param name="parameters">parameters</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOne(`0,System.String[])">
      <summary>
            Find unique entity by example instance. if one more entity exists, throw exception
            </summary>
      <param name="exampleInstance">instance of exampling</param>
      <param name="propertyNamesToExclude">prpoerty names to exclude when matching example</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOneByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get unique entity by hql
            </summary>
      <param name="query">hql string</param>
      <param name="parameters">named parameters</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindOnePropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 유일한 엔티티를 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>엔티티, 없으면 null 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirst(NHibernate.Criterion.Order[])">
      <summary>
            Get first entity by ordering
            </summary>
      <param name="orders">order by</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirst(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get first entity matched with specified criteria (criteria is optional).
            </summary>
      <param name="criterions">The collection of ICriterion to look for.</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirst(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get first entity matched with specified detached criteria (criteria is optional) and ordering
            </summary>
      <param name="criteria">where spec</param>
      <param name="orders">order by</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirst(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get first entity from NamedQuery
            </summary>
      <param name="namedQuery">NamedQuery to look for</param>
      <param name="parameters">HQL Parameters</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirst(`0,System.String[])">
      <summary>
            Get first entity matches with exampleInstance by Exampling.
            </summary>
      <param name="exampleInstance">instance for Exampling</param>
      <param name="propertyNamesToExclude">excluded property name for Exampling</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirstByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get the first entity by Hql
            </summary>
      <param name="queryString">hql string</param>
      <param name="parameters">named parameters</param>
      <returns>first entity in retrieved entity collection. if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.FindFirstPropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 첫번째 엔티티를 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>엔티티, 없으면 null 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Count">
      <summary>
            Counts the overall number of entities.
            </summary>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Count(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="criteria">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Count(NHibernate.Criterion.ICriterion[])">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="criterions">The collection of ICriterion to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Count(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the query
            </summary>
      <param name="queryOver">QueryOver to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CountAsLong(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CountAsInt(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Exists">
      <summary>
            Check if any instance of the type exists
            </summary>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Exists(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="criteria">The criteria to looking for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Exists(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="queryOver">The criteria to looking for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Exists(NHibernate.Criterion.ICriterion[])">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="criterions">Collection of ICriterion</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="expressions">The collection of Lambda expression to look for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Exists(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Check if any instance matches with the specified named query
            </summary>
      <param name="namedQuery">named query for looking for</param>
      <param name="parameters">parameters</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ExistsByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Check if any instance matches with the specified simple query string
            </summary>
      <param name="queryString">queryString for looking for</param>
      <param name="parameters">parameters</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ExistsById(System.Object)">
      <summary>
            Is entity exists that's is the specified identity. (별 필요없지 않나?)
            </summary>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,System.Boolean)">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <param name="distinctResult">Indicate projection is distinctly search.</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <param name="orders">The fields the repository should order by</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criterions" /> to the DTO</param>
      <param name="criterions">The collectio of ICriterion to look for</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criterions" /></returns>
      <remarks>
            The intent is for <paramref name="criterions" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criterions" /> to the DTO</param>
      <param name="orders">The fields the repository should order by</param>
      <param name="criterions">The collectio of ICriterion to look for</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criterions" /></returns>
      <remarks>
            The intent is for <paramref name="criterions" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criteria" /> to the DTO</param>
      <param name="criteria">The criteria to look for</param>
      <param name="orders">The fields the repository should order by</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criteria" /></returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportAll``1(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="namedQuery">
      </param>
      <param name="parameters">
      </param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="namedQuery" /></returns>
      <returns>collection of <typeparamref name="TProject" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportOne``1(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="criteria">The criteria to look for</param>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="criteria" /> to the DTO.
            </param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportOne``1(NHibernate.Criterion.QueryOver{`0},NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="queryOver">The criteria to look for</param>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="queryOver" /> to the DTO.
            </param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="queryOver" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ReportOne``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="criterions" /> to the DTO.
            </param>
      <param name="criterions">The collection of ICriterion to look for</param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="criterions" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Persist(`0)">
      <summary>
            Transient Object를 Persistent Object로 만듭니다. 즉 Save합니다!!!
            </summary>
      <param name="entity">저장할 엔티티</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Save(`0)">
      <summary>
            save entity
            </summary>
      <param name="entity">
      </param>
      <returns>The generated identifier</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Save(`0,System.Object)">
      <summary>
            Save entity with Identity
            </summary>
      <param name="entity">entity to save or update</param>
      <param name="id">identity value of entity</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.SaveOrUpdate(`0)">
      <summary>
            Save or Update entity
            </summary>
      <param name="entity">entity to save or update</param>
      <returns>saved or updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.SaveOrUpdateCopy(`0)">
      <summary>
            Save or Update and Copy 
            </summary>
      <param name="entity">entity to save or update</param>
      <returns>an saved / updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.SaveOrUpdateCopy(`0,System.Object)">
      <summary>
            Save or Update and Copy 
            </summary>
      <param name="entity">entity</param>
      <param name="id">identity value of entity</param>
      <returns>an saved / updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Update(`0)">
      <summary>
            Update entity
            </summary>
      <param name="entity">entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Update(`0,System.Object)">
      <summary>
            Update entity
            </summary>
      <param name="entity">entity to update</param>
      <param name="id">identity value of entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Merge(`0)">
      <summary>
            SaveOrUpdate와는 달리 First Session에 이미 캐시되어 있는 엔티티라면, 최신 값으로 반영한 후 Save/Update를 수행한다.
            SaveOrUpdate는 Interceptor에서 엔티티 속성 값이 null로 바뀌는 문제가 있는 반면 Merge는 그렇지 않다.
            </summary>
      <param name="entity">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Replicate(`0,NHibernate.ReplicationMode)">
      <summary>
            다른 SessionFactory에 있는 현재 SessionFactory로 엔티티를 복제한다.
            </summary>
      <param name="entity">
      </param>
      <param name="replicateMode">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Delete(`0)">
      <summary>
            delete specified entity
            </summary>
      <param name="entity">entity to delete</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Delete(System.Object,NHibernate.LockMode)">
      <summary>
            delete entity by identity value
            </summary>
      <param name="id">Identity value of entity to delete</param>
      <param name="lockMode">Lock mode</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll">
      <summary>
            delete all entities using session - ExecuteUpdate("delete EntityName"); 을 사용하세요.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            delete entities matched with specified detached criteria
            </summary>
      <param name="criteria">The criteria to look for deleting</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            delete entities matched with specified detached criteria
            </summary>
      <param name="queryOver">The criteria to look for deleting</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll(NHibernate.Criterion.ICriterion[])">
      <summary>
            Criterion에 해당하는 모든 엔티티를 삭제한다.
            </summary>
      <param name="criterions">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
      <summary>
        <paramref name="expressions" />에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll(NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            지정된 Parameter에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
      <param name="parameters">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAll(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Delete entities by Named Query (defined at hbm.xml)
            </summary>
      <param name="namedQuery">named query to look for deleting</param>
      <param name="parameters">parameters</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.DeleteAllByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Delete entities by HQL 
            </summary>
      <param name="hql">HQL string to look for deleting</param>
      <param name="parameters">parameters</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Execute DML-Style hql with parameters with NH 2.1.0 or higher
            </summary>
      <remarks>
            DML-style statements (insert, update, delete) 를 Session Memory 영역을 사용하지 않고, 직접 DB에 적용하여 성능을 향상 시킨다.
            제약사항은 Hibernate Reference 를 참고할 것 (13.4 DML-style operations)<br /><br />
            NHibernate configuration에 다음과 같이 설정을 추가해야 한다.<br />
            &lt;!-- DML-style operations : delete/insert/update/bulk copy 시에 hql을 이용할 수 있다. (예: delete Enitty)--&gt;
            &lt;property name="query.factory_class"&gt;NHibernate.Hql.Ast.ANTLR.ASTQueryTranslatorFactory, NHibernate&lt;/property&gt;
            </remarks>
      <param name="hql">HQL statement. ex: delete Parent p where exists (from p.Children)</param>
      <param name="parameters">named parameters</param>
      <returns>number of entities effected by this operation</returns>
      <seealso cref="M:NHibernate.IQuery.ExecuteUpdate" />
      <example>
        <code>
            // UPDATE or DELETE Statemement sample.
            (UPDATE | DELETE) [VERSIONED] [FROM] EntityName [WHERE where_conditions)
            
            // INSERT Statement
            INSERT INTO EntityName properties_list select_statement.
            // INSERT INTO ... SELECT ... 만 가능하고, 일반적인 SQL문장인 INSERT INTO ... VALUES ... 는 지원하지 않는다.
            
            // update customer
            ExecuteUpdate("update Customer c set c.Name = :NewName where c.Name = :OldName", new NHParameter("OldName", "Debop", TypeFactory.GetStringType(255)), new NHParameter("NewName", "Sunghyouk", TypeFactory.GetStringType(255)));
            
            // update versioned entity ( reset version of Customer )
            ExecuteUpdate("update versioned Customer c set c.Name = :NewName where c.Name = :OldName", new NHParameter("OldName", "Debop", TypeFactory.GetStringType(255)), new NHParameter("NewName", "Sunghyouk", TypeFactory.GetStringType(255));
            
            // delete Customer
            ExecuteUpdate("delete Customer c where c.Name = :Name", new NHParameter("Name", "Debop", TypeFactory.GetStringType(255)));
            
            
            // insert Account
            ExecuteUpdate("insert into Account(Id, Name) select c.Id, c.Name from Customer c where c.Name=:Name", new NHParameter("Name", "Debop", TypeFactory.GetStringType(255)));
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ExecuteUpdateTransactional(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])" />와 같은 일을 하지만, Transaction을 적용하여, 작업한다.
            </summary>
      <param name="hql">HQL statement. ex: delete Parent p where exists (from p.Children)</param>
      <param name="parameters">named parameters</param>
      <returns>number of entities effected by this operation</returns>
      <seealso cref="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Create">
      <summary>
            Create an new instance of <typeparamref name="T" />, mapping it to the concrete class if needed
            </summary>
      <returns>new instance</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.GetClassMetadata">
      <summary>
            Get Entity metadata
            </summary>
      <returns>Metadata of T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.IsTransient(`0)">
      <summary>
            the specified instance is transient object ?
            </summary>
      <returns>if the specified entity is transient object, return true. otherwise return false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateCriteria">
      <summary>
            Create criteria for Entity
            </summary>
      <returns>instance of ICriteria for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateDetachedCriteria">
      <summary>
            Create detached criteria for Entity
            </summary>
      <returns>Instance of DetachedCriteria for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateDetachedCriteria(System.String)">
      <summary>
            Create an aliases <see cref="T:NHibernate.Criterion.DetachedCriteria" /> compatible with current Dao instance.
            </summary>
      <param name="alias">alias</param>
      <returns>Instance of <see cref="T:NHibernate.Criterion.DetachedCriteria" /> which has alias for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateQuery(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create <see cref="T:NHibernate.IQuery" /> instance of current session with parameters.
            </summary>
      <param name="hql">HQL statement</param>
      <param name="parameters">named parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateQueryOver">
      <summary>
            IQueryOver 를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateQueryOver(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            IQueryOver 를 생성합니다.
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateQueryOverOf">
      <summary>
             Detached QueryOver 생성 (<see cref="M:NHibernate.Criterion.QueryOver.Of``1" />)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.CreateQueryOverOf(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            Detached QueryOver 생성 (<see cref="M:NHibernate.Criterion.QueryOver.Of``1" />)
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Query">
      <summary>
            엔티티 질의를 위해 LINQ의 <see cref="T:System.Linq.IQueryable`1" />를 반환합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ConcreteType">
      <summary>
            Type of Entity which handled by this Reposiotry
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.SessionFactory">
      <summary>
            Entity가 매핑된 Session Factory 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.Session">
      <summary>
            UnitOfWork의 현재 Session 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.QueryProvider">
      <summary>
            Ini 파일로부터 NHibernate HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHRepository`1.ActionToBePerformedOnSessionUsedForDbFetches">
      <summary>
        <see cref="T:NHibernate.ISession" /> 작업 후 실행될 Action.<br />
            여기에 Database Fetching 작업 완료 후의 후처리 작업을 정의하면 된다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.Repository`1">
      <summary>
            NHibernate용 Repository의 기능을 제공하는 Helper Class입니다.
            </summary>
      <typeparam name="T">Type of entity</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Get(System.Object)">
      <summary>
            Get Entity by specified identity value or return nulll if it doesn't exist
            </summary>
      <param name="id">
      </param>
      <returns>if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Get(System.Object,NHibernate.LockMode)">
      <summary>
            Get Entity by specified identity value or return nulll if it doesn't exist
            </summary>
      <param name="id">identity of entity</param>
      <param name="lockMode">entity lock mode</param>
      <returns>if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Load(System.Object)">
      <summary>
            Load Entity by specified identity value or throw an exception if there isn't an entity that matches the specified id
            </summary>
      <param name="id">identity of entity</param>
      <returns>if not exists, exception occurred</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Load(System.Object,NHibernate.LockMode)">
      <summary>
            Load Entity by specified identity value or throw an exception if there isn't an entity that matches the specified id
            </summary>
      <param name="id">
      </param>
      <param name="lockMode">entity lock mode</param>
      <returns>if not exists, exception occurred</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetIn(System.Collections.ICollection)">
      <summary>
            지정된 Identity 배열에 해당하는 모든 Entity를 로딩한다. (In 을 사용한다)
            </summary>
      <param name="ids">identity values</param>
      <returns>list of entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetInG``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            지정된 Id 컬렉션에 해당하는 모든 Entity를 로딩한다. (SQL 의 IN (xxx,yyy,zzz) 를 사용한다)
            </summary>
      <typeparam name="TId">Entity Id의 수형</typeparam>
      <param name="ids">Id값의 컬렉션</param>
      <returns>list of entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size (must greator than 0)</param>
      <param name="criteria">criteria</param>
      <returns>paginated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size (must greator than 0)</param>
      <param name="orders">sort order</param>
      <param name="criteria">criteria</param>
      <returns>paginated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetPage(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="criteria">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetPage(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="pageIndex">Page index (start from 0)</param>
      <param name="pageSize">Page size (must greator than 0)</param>
      <param name="criteria">DetachedCriteria (null 이면 모든 레코드를 조회합니다)</param>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetPage(NSoft.NFramework.Data.NHibernateEx.INHOrder{`0}[])">
      <summary>
            Get paginated entity list
            </summary>
      <param name="orders">sort order</param>
      <returns>pagenated list</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FutureGet(System.Object)">
      <summary>
            Get a future entity from the persistence store, or return null
            </summary>
      <param name="id">
      </param>
      <returns>a future for the entity that matches the id. if it doesn't exist, return null.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FutureLoad(System.Object)">
      <summary>
            Load a future entity from the persistence store.
            Will throw an exception if there isn't an entity that matches the specified id.
            </summary>
      <param name="id">
      </param>
      <returns>a future for the entity that matches the id. if it doesn't exist, throw exception.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FutureValue(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
      <param name="detachedCriteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FutureValue(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Future(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get a future entity collection from the persistence store
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll">
      <summary>
            Get all entities.
            </summary>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get entities matched with criteria
            </summary>
      <param name="criteria">where</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ordered and ranged entities matched with criteria
            </summary>
      <param name="orders">ordering spec</param>
      <param name="criteria">where spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(NHibernate.Criterion.Order[],System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ordered and ranged entities matched with criteria
            </summary>
      <param name="orders">ordering spec</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1)</param>
      <param name="criteria">where spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
      <summary>
            Get ranged entities matched with criteria
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="criteria">where</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            지정된 criteria를 이용하여 정보를 조회합니다.
            </summary>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 읽어온다.)</param>
      <param name="orders">정렬 순서</param>
      <param name="criteria">조회 조건</param>
      <returns>collection of entity.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get ranged entites matched with detached criteria, ordering is optional
            </summary>
      <param name="criteria">where spec</param>
      <param name="orders">ordering spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(NHibernate.Criterion.DetachedCriteria,System.Int32,System.Int32,NHibernate.Criterion.Order[])">
      <summary>
            Get ranged entites matched with detached criteria, ordering is optional
            </summary>
      <param name="criteria">where spec</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1)</param>
      <param name="orders">ordering spec</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(`0,System.String[])">
      <summary>
            Get entities by examping with exampleInstance
            </summary>
      <param name="exampleInstance">instance for exampling</param>
      <param name="propertyNamesToExclude">excluded property for exampling</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(`0,System.Int32,System.Int32,System.String[])">
      <summary>
            Get entities by examping with exampleInstance
            </summary>
      <param name="exampleInstance">instance for exampling</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="propertyNamesToExclude">excluded property for exampling</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get entities by Named Query which defined in mapping files (*.hbm.xml) ex: &lt;query name="xxxx"&gt;
            </summary>
      <param name="namedQuery">name of NamedQuery which defined in mapping files(*.hbm.xml)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAll(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get entities by Named Query which defined in mapping files (*.hbm.xml) ex: &lt;query name="xxxx"&gt;
            </summary>
      <param name="namedQuery">name of NamedQuery which defined in mapping files(*.hbm.xml)</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAllByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            NHibernate Query Language (HQL) 를 이용한 조회
            </summary>
      <param name="queryString">hql string</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAllByHql(System.String,System.Int32,System.Int32,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            NHibernate Query Language (HQL) 를 이용한 조회
            </summary>
      <param name="queryString">hql string</param>
      <param name="firstResult">first index (start from 0)</param>
      <param name="maxResults">max resultset count (start from 1) (0이면 마지막 Record까지 가져온다.)</param>
      <param name="parameters">HQL Parameters</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindAllPropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 엔티티를 모두 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>entity collection</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOne(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get unique entity matches with specified criteria. if one more entity exists, throw exception
            </summary>
      <param name="criteria">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOne(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Get unique entity matches with specified detached criteria. if one more entity exists, throw exception
            </summary>
      <param name="criteria">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOne(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Get unique entity matches with specified detached criteria. if one more entity exists, throw exception
            </summary>
      <param name="queryOver">where spec</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOne(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get unique entity by named query which defined mapping file. if one more entity exists, throw exception
            </summary>
      <param name="namedQuery">name of NamedQuery</param>
      <param name="parameters">parameters</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOne(`0,System.String[])">
      <summary>
            Find unique entity by example instance. if one more entity exists, throw exception
            </summary>
      <param name="exampleInstance">instance of exampling</param>
      <param name="propertyNamesToExclude">prpoerty names to exclude when matching example</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOneByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get unique entity by hql
            </summary>
      <param name="query">hql string</param>
      <param name="parameters">named parameters</param>
      <returns>a single instance that matches the query, or null if the query returns no results.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindOnePropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 유일한 엔티티를 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>엔티티, 없으면 null 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirst(NHibernate.Criterion.Order[])">
      <summary>
            Get first entity by ordering
            </summary>
      <param name="orders">order by</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirst(NHibernate.Criterion.ICriterion[])">
      <summary>
            Get first entity matched with specified criteria (criteria is optional).
            </summary>
      <param name="criteria">The collection of ICriterion to look for.</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirst(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get first entity matched with specified detached criteria (criteria is optional) and ordering
            </summary>
      <param name="criteria">where spec</param>
      <param name="orders">order by</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirst(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get first entity from NamedQuery
            </summary>
      <param name="namedQuery">NamedQuery to look for</param>
      <param name="parameters">HQL Parameters</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirst(`0,System.String[])">
      <summary>
            Get first entity matches with exampleInstance by Exampling.
            </summary>
      <param name="exampleInstance">instance for Exampling</param>
      <param name="propertyNamesToExclude">excluded property name for Exampling</param>
      <returns>if not exist, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirstByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Get the first entity by Hql
            </summary>
      <param name="queryString">hql string</param>
      <param name="parameters">named parameters</param>
      <returns>first entity in retrieved entity collection. if not exists, return null</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.FindFirstPropertyEq(System.String,System.Object)">
      <summary>
            Entity의 속성명이 지정된 값과 같은 첫번째 엔티티를 조회한다. (propertyName = value)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="value">비교할 값</param>
      <returns>엔티티, 없으면 null 반환</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Count">
      <summary>
            Counts the overall number of entities.
            </summary>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Count(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="criteria">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Count(NHibernate.Criterion.ICriterion[])">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="criteria">The collection of ICriterion to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Count(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CountAsLong(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CountAsInt(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Counts the number of instances matching the criteria
            </summary>
      <param name="queryOver">The criteria to look for</param>
      <returns>count of entities</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Exists">
      <summary>
            Check if any instance of the type exists
            </summary>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Exists(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="criteria">The criteria to looking for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Exists(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="queryOver">The criteria to looking for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Exists(NHibernate.Criterion.ICriterion[])">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="criteria">Collection of ICriterion</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
      <summary>
            Check if any instance matches with the specified criteria
            </summary>
      <param name="expressions">The collection of Lambda expression to look for</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Exists(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Check if any instance matches with the specified named query
            </summary>
      <param name="namedQuery">named query for looking for</param>
      <param name="parameters">parameters</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ExistsByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Check if any instance matches with the specified simple query string
            </summary>
      <param name="queryString">queryString for looking for</param>
      <param name="parameters">parameters</param>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ExistsById(System.Object)">
      <summary>
            Is entity exists that's is the specified identity. (별 필요없지 않나?)
            </summary>
      <returns>true if an instance is found, otherwise false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,System.Boolean)">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <param name="distinctResult">Indicate projection is distinctly search.</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph to the DTO</param>
      <param name="orders">The fields the repository should order by</param>
      <returns>The projection result (DTO's) built from the object graph</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criteria" /> to the DTO</param>
      <param name="criteria">The collectio of ICriterion to look for</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criteria" /></returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criteria" /> to the DTO</param>
      <param name="orders">The fields the repository should order by</param>
      <param name="criteria">The collectio of ICriterion to look for</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criteria" /></returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList,NHibernate.Criterion.Order[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">Maps the properties from the object graph satisfying <paramref name="criteria" /> to the DTO</param>
      <param name="criteria">The criteria to look for</param>
      <param name="orders">The fields the repository should order by</param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="criteria" /></returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportAll``1(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create the projects of type <typeparamref name="TProject" /> (ie DataTransferObject(s)) that satisfies the criteria supplied.
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="namedQuery">
      </param>
      <param name="parameters">
      </param>
      <returns>The projection result (DTO's) built from the object graph satisfying <paramref name="namedQuery" /></returns>
      <returns>collection of <typeparamref name="TProject" /></returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportOne``1(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="criteria">The criteria to look for</param>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="criteria" /> to the DTO.
            </param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportOne``1(NHibernate.Criterion.QueryOver{`0},NHibernate.Criterion.ProjectionList)">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="queryOver">The criteria to look for</param>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="queryOver" /> to the DTO.
            </param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="queryOver" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ReportOne``1(NHibernate.Criterion.ProjectionList,NHibernate.Criterion.ICriterion[])">
      <summary>
            Create the project of type <typeparamref name="TProject" />(ie a Data Transfer Object) that satisfies the criteria supplied.
            Throws a NHibernate.NonUniqueResultException if there is more than one 
            </summary>
      <typeparam name="TProject">the type returned. (ie DTO)</typeparam>
      <param name="projectionList">
            Maps the properties from the object graph satisfiying <paramref name="criteria" /> to the DTO.
            </param>
      <param name="criteria">The collection of ICriterion to look for</param>
      <returns>return DTO or null. if not unique, raise exception</returns>
      <remarks>
            The intent is for <paramref name="criteria" /> to be based (rooted)
            on <typeparamref name="T" />. This is not enforced but is a
            convention that should be followed
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Persist(`0)">
      <summary>
            Transient Object를 Persistent Object로 만듭니다. 즉 Save합니다!!!
            </summary>
      <param name="entity">저장할 엔티티</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Save(`0)">
      <summary>
            save entity
            </summary>
      <param name="entity">
      </param>
      <returns>The generated identifier</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Save(`0,System.Object)">
      <summary>
            Save entity with Identity
            </summary>
      <param name="entity">entity to save or update</param>
      <param name="id">identity value of entity</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.SaveOrUpdate(`0)">
      <summary>
            Save or Update entity
            </summary>
      <param name="entity">entity to save or update</param>
      <returns>saved or updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.SaveOrUpdateCopy(`0)">
      <summary>
            Save or Update and Copy 
            </summary>
      <param name="entity">entity to save or update</param>
      <returns>an saved / updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.SaveOrUpdateCopy(`0,System.Object)">
      <summary>
            Save or Update and Copy 
            </summary>
      <param name="entity">entity</param>
      <param name="id">identity value of entity</param>
      <returns>an saved / updated entity</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Update(`0)">
      <summary>
            Update entity
            </summary>
      <param name="entity">entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Update(`0,System.Object)">
      <summary>
            Update entity
            </summary>
      <param name="entity">entity to update</param>
      <param name="id">identity value of entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Merge(`0)">
      <summary>
            SaveOrUpdate와는 달리 First Session에 이미 캐시되어 있는 엔티티라면, 최신 값으로 반영한 후 Save/Update를 수행한다.
            SaveOrUpdate는 Interceptor에서 엔티티 속성 값이 null로 바뀌는 문제가 있는 반면 Merge는 그렇지 않다.
            </summary>
      <param name="entity">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Replicate(`0,NHibernate.ReplicationMode)">
      <summary>
            다른 SessionFactory에 있는 엔티티를 현재 SessionFactory로 엔티티를 복제한다.
            </summary>
      <param name="entity">
      </param>
      <param name="replicationMode">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Delete(`0)">
      <summary>
            delete specified entity
            </summary>
      <param name="entity">entity to delete</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Delete(System.Object,NHibernate.LockMode)">
      <summary>
            delete entity by identity value
            </summary>
      <param name="id">Identity value of entity to delete</param>
      <param name="lockMode">Lock mode</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll">
      <summary>
            delete all entities using session - ExecuteUpdate("delete EntityName"); 을 사용하세요.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            delete entities matched with specified detached criteria
            </summary>
      <param name="criteria">The criteria to look for deleting</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll(NHibernate.Criterion.QueryOver{`0})">
      <summary>
            delete entities matched with specified detached criteria
            </summary>
      <param name="queryOver">The criteria to look for deleting</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll(NHibernate.Criterion.ICriterion[])">
      <summary>
            Criterion에 해당하는 모든 엔티티를 삭제한다.
            </summary>
      <param name="criterions">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
      <summary>
        <paramref name="expressions" />에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll(NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            지정된 Parameter에 해당하는 모든 엔티티를 삭제한다. 복수의 조건은 AND 조건이다.
            </summary>
      <param name="parameters">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAll(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Delete entities by Named Query (defined at hbm.xml)
            </summary>
      <param name="namedQuery">named query to look for deleting</param>
      <param name="parameters">parameters</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.DeleteAllByHql(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Delete entities by HQL 
            </summary>
      <param name="queryString">HQL string to look for deleting</param>
      <param name="parameters">parameters</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Execute DML-Style hql with parameters with NH 2.1.0 or higher
            </summary>
      <remarks>
            DML-style statements (insert, update, delete) 를 Session Memory 영역을 사용하지 않고, 직접 DB에 적용하여 성능을 향상 시킨다.
            제약사항은 Hibernate Reference 를 참고할 것 (13.4 DML-style operations)<br /><br />
            NHibernate configuration에 다음과 같이 설정을 추가해야 한다.<br />
            &lt;!-- DML-style operations : delete/insert/update/bulk copy 시에 hql을 이용할 수 있다. (예: delete Enitty)--&gt;
            &lt;property name="query.factory_class"&gt;NHibernate.Hql.Ast.ANTLR.ASTQueryTranslatorFactory, NHibernate&lt;/property&gt;
            </remarks>
      <param name="hql">HQL statement. ex: delete Parent p where exists (from p.Children)</param>
      <param name="parameters">named parameters</param>
      <returns>number of entities effected by this operation</returns>
      <seealso cref="M:NHibernate.IQuery.ExecuteUpdate" />
      <example>
        <code>
            // UPDATE or DELETE Statemement sample.
            (UPDATE | DELETE) [VERSIONED] [FROM] EntityName [WHERE where_conditions)
            
            // INSERT Statement
            INSERT INTO EntityName properties_list select_statement.
            // INSERT INTO ... SELECT ... 만 가능하고, 일반적인 SQL문장인 INSERT INTO ... VALUES ... 는 지원하지 않는다.
            
            // update customer
            ExecuteUpdate("update Customer c set c.Name = :NewName where c.Name = :OldName", new NHParameter("OldName", "Debop", TypeFactory.GetStringType(255)), new NHParameter("NewName", "Sunghyouk", TypeFactory.GetStringType(255)));
            
            // update versioned entity ( reset version of Customer )
            ExecuteUpdate("update versioned Customer c set c.Name = :NewName where c.Name = :OldName", new NHParameter("OldName", "Debop", TypeFactory.GetStringType(255)), new NHParameter("NewName", "Sunghyouk", TypeFactory.GetStringType(255));
            
            // delete Customer
            ExecuteUpdate("delete Customer c where c.Name = :Name", new NHParameter("Name", "Debop", TypeFactory.GetStringType(255)));
            
            
            // insert Account
            ExecuteUpdate("insert into Account(Id, Name) select c.Id, c.Name from Customer c where c.Name=:Name", new NHParameter("Name", "Debop", TypeFactory.GetStringType(255)));
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ExecuteUpdateTransactional(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
        <see cref="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])" />와 같은 일을 하지만, Transaction을 적용하여, 작업한다.
            </summary>
      <param name="hql">HQL statement. ex: delete Parent p where exists (from p.Children)</param>
      <param name="parameters">named parameters</param>
      <returns>number of entities effected by this operation</returns>
      <seealso cref="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.ExecuteUpdate(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Create">
      <summary>
            Create an new instance of <typeparamref name="T" />, mapping it to the concrete class if needed
            </summary>
      <returns>new instance</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.GetClassMetadata">
      <summary>
            Get Entity metadata
            </summary>
      <returns>Metadata of T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.IsTransient(`0)">
      <summary>
            the specified instance is transient object ?
            </summary>
      <returns>if the specified entity is transient object, return true. otherwise return false.</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateCriteria">
      <summary>
            Create criteria for Entity
            </summary>
      <returns>instance of ICriteria for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateDetachedCriteria">
      <summary>
            Create detached criteria for Entity
            </summary>
      <returns>Instance of DetachedCriteria for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateDetachedCriteria(System.String)">
      <summary>
            Create an aliases <see cref="T:NHibernate.Criterion.DetachedCriteria" /> compatible with current Dao instance.
            </summary>
      <param name="alias">alias</param>
      <returns>Instance of <see cref="T:NHibernate.Criterion.DetachedCriteria" /> which has alias for T</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateQuery(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create <see cref="T:NHibernate.IQuery" /> instance of current session with parameters.
            </summary>
      <param name="hql">HQL statement</param>
      <param name="parameters">named parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateQueryOver">
      <summary>
            IQueryOver 를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateQueryOver(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            IQueryOver 를 생성합니다.
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateDetachedQueryOver">
      <summary>
             Detached QueryOver 생성 (<see cref="M:NHibernate.Criterion.QueryOver.Of``1" />)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.CreateDetachedQueryOver(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            Detached QueryOver 생성 (<see cref="M:NHibernate.Criterion.QueryOver.Of``1" />)
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.Repository`1.Query">
      <summary>
            엔티티 질의를 위해 LINQ의 <see cref="T:System.Linq.IQueryable`1" />를 반환합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Repository`1.ConcreteType">
      <summary>
            Type of Entity which handled by this Reposiotry
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Repository`1.SessionFactory">
      <summary>
            Entity가 매핑된 Session Factory 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Repository`1.Session">
      <summary>
            UnitOfWork의 현재 Session 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.Repository`1.QueryProvider">
      <summary>
            Ini 파일로부터 NHibernate HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.CriteriaTool">
      <summary>
            NHibernate Criteria 조작을 위한 Utility Class
            </summary>
      <summary>
            NHibernate Criteria 조작을 위한 Utility Class
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.CodePropertyName">
      <summary>
            코드 속성명 (Code)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.NamePropertyName">
      <summary>
            이름 속성명 (Name)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.TitlePropertyName">
      <summary>
            타이틀 속성명 (Title)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.IsEnabledPropertyName">
      <summary>
            IsEnabled 속성명 (IsEnabled)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.IsActivePropertyName">
      <summary>
            IsActive 속성명 (IsActive)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.ParentPropertyName">
      <summary>
            Parent 속성명 (Parent)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.GetSession(NHibernate.ICriteria)">
      <summary>
        <paramref name="criteria" />가 사용하는 <see cref="T:NHibernate.Engine.ISessionImplementor" />을 반환합니다.
            </summary>
      <param name="criteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.GetRootCriteria(NHibernate.ICriteria)">
      <summary>
            Get Root Criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.GetRootType(NHibernate.ICriteria)">
      <summary>
            Get the entity type in criteria
            </summary>
      <param name="criteria">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.InvalidOperationException">criteria의 session이 null일 경우</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.GetRootType(NHibernate.Criterion.DetachedCriteria,NHibernate.ISession)">
      <summary>
            Get the root entity type in criteria
            </summary>
      <param name="detachedCriteria">
      </param>
      <param name="session">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.IsBetweenCriterion(System.String,System.Object,System.Object)">
      <summary>
            Between	(상하한을 포함하는 구간의 값을 구한다. 상하한에 대한 구간 검증은 하지 않는다!!!)
            </summary>
      <param name="propertyName">속성명</param>
      <param name="lo">하한</param>
      <param name="hi">상한</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.IsInRangeCriterion(System.Object,System.String,System.String)">
      <summary>
            지정한 값이 두 속성의 값 범위 안에 있을 때 ( Between 의 반대 개념 ) 
            </summary>
      <param name="value">
      </param>
      <param name="loPropertyName">
      </param>
      <param name="hiPropertyName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.IsOverlapCriterion(NSoft.NFramework.TimePeriods.ITimePeriod,System.String,System.String)">
      <summary>
            주어진 기간이 오버랩되는지를 파악하는 Criterion
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEq(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            Add Eq (Equal) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNotEq(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            Add NotEq (Not equal) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLe(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            Add Le (Little or Equal) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLt(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            Add Lt (Little than) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddGe(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            Add Ge (Greater or equal) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddGt(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            Add Gt (Greater than) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddAllEq(NHibernate.Criterion.DetachedCriteria,System.Collections.IDictionary)">
      <summary>
            Add AllEq (all equal) expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsEmpty(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            Add IsEmpty expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsNotEmpty(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            Add IsNotEmpty expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsNull(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            Add IsNull expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsNotNull(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            Add IsNotNull expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEqIncludeNull(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            속성이 같은 값을 가지거나 IS NULL 인 경우를 나타내는 Criterion을 생성합니다.<br />
            예 : ( Product = :Product or Product IS NULL) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEqOrNull(NHibernate.Criterion.DetachedCriteria,System.String,System.Object)">
      <summary>
            속성 값이 null이면 is null로, 값이 있으면 '=' 를 사용하는 ICriterion 을 생성한다. (즉 지정한 변수 값에 따라 달라진다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLike(NHibernate.Criterion.DetachedCriteria,System.String,System.String)">
      <summary>
            NOTE : Sensitive Like 이다. 대소문자 구분이 필요없다면 <see cref="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInsensitiveLike(NHibernate.Criterion.DetachedCriteria,System.String,System.String,NHibernate.Criterion.MatchMode)" /></summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLike(NHibernate.Criterion.DetachedCriteria,System.String,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            NOTE : Sensitive Like 이다. 대소문자 구분이 필요없다면 <see cref="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInsensitiveLike(NHibernate.Criterion.DetachedCriteria,System.String,System.String,NHibernate.Criterion.MatchMode)" /></summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInsensitiveLike(NHibernate.Criterion.DetachedCriteria,System.String,System.String)">
      <summary>
            add InsensitiveLike (like search with ignore case) expression to detached criteria
            </summary>
      <param name="dc">Instance of Detached Criteria</param>
      <param name="propertyName">비교할 속성 명</param>
      <param name="value">검색할 속성 값</param>
      <returns>검색 필터를 추가한 Detached Criteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInsensitiveLike(NHibernate.Criterion.DetachedCriteria,System.String,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            add InsensitiveLike (like search with ignore case) expression to detached criteria
            </summary>
      <param name="dc">Instance of Detached Criteria</param>
      <param name="propertyName">비교할 속성 명</param>
      <param name="value">검색할 속성 값</param>
      <param name="matchMode">매칭 모드</param>
      <returns>검색 필터를 추가한 Detached Criteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIdEq(NHibernate.Criterion.DetachedCriteria,System.Object)">
      <summary>
            Add IdEq expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIn(NHibernate.Criterion.DetachedCriteria,System.String,System.Collections.ICollection)">
      <summary>
            Add In expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInG``1(NHibernate.Criterion.DetachedCriteria,System.String,System.Collections.Generic.ICollection{``0})">
      <summary>
            Add InG{T} expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddBetween(NHibernate.Criterion.DetachedCriteria,System.String,System.Object,System.Object)">
      <summary>
            Add between expression to detached criteria
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInRange(NHibernate.Criterion.DetachedCriteria,System.Object,System.String,System.String)">
      <summary>
            지정한 값이 두개의 속성의 사이 값인지 판단하는 expression을 detached criteria에 추가한다. Between과 비숫하지만, 대상이 바뀐 것이다.
            예: StartDate &lt; CurrentDate and CurrentDate &lt; EndDate
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsOverlap(NHibernate.Criterion.DetachedCriteria,NSoft.NFramework.TimePeriods.ITimePeriod,System.String,System.String)">
      <summary>
            지정한 DateRange가 기간을 나타내는 두개의 속성과 overlap이 되는지 검사한다.
            </summary>
      <param name="dc">Detached Criteria 인스턴스</param>
      <param name="period">기간</param>
      <param name="loPropertyName">하한 값을 가지는 속성명</param>
      <param name="hiPropertyName">상한 값을 가지는 속성명</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsElapsed(NHibernate.Criterion.DetachedCriteria,System.DateTime,System.String)">
      <summary>
            지정한 날짜 속성 값이 current 기준으로 과거 인지 판단한다.
            </summary>
      <param name="dc">
      </param>
      <param name="current">
      </param>
      <param name="propertyName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNullAsFalse(NHibernate.Criterion.DetachedCriteria,System.String,System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 False로 간주하는 Where 절을 추가한다.
            Explicit 하게 PropertyName = True 로 되어 있는 것을 제외한 False이거나 NULL 것은 False 로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNullAsTrue(NHibernate.Criterion.DetachedCriteria,System.String,System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 True로 간주하는 Where 절을 추가한다. 
            PropertyName 를 조회할 때, 명확히 PropertyName=False가 아니라 NULL이거나, True라면 True로 간주한다.
            </summary>
      <param name="dc">criteria</param>
      <param name="propertyName">property name</param>
      <param name="value">property value to filter</param>
      <returns>criteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNot(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ICriterion)">
      <summary>
            지정된 Criteria에 대해 NOT을 수행합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddOrders(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            지정된 Criteria에 Ordering 을 추가합니다.
            </summary>
      <param name="dc">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.NullAsFalse(NHibernate.Criterion.DetachedCriteria,System.String,System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 False로 간주하는 Where 절을 추가한다.
            Explicit 하게 IsReleased = True 로 되어 있는 것을 제외한 False이거나 NULL 것은 False 로 간주한다.
            </summary>
      <param name="criteria">
      </param>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.NullAsTrue(NHibernate.Criterion.DetachedCriteria,System.String,System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 True로 간주하는 Where 절을 추가한다. (IsEnabled 를 조회할 때, 명확히 IsEnabled=False가 아니라면 NULL이거나, True라면 True로 간주한다.
            </summary>
      <param name="criteria">
      </param>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddCodeEq(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            지정된 코드로 검색하는 Criteria를 추가한다.
            </summary>
      <param name="criteria">
      </param>
      <param name="code">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNameEq(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            지정된 criteria에 Name 속성 = name
            </summary>
      <param name="criteria">
      </param>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddCodeLike(NHibernate.Criterion.DetachedCriteria,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            엔티티의 Code 속성값이 지정된 Code와 매칭(LIKE 검색) 되는 엔티티를 조회하는 DetachedCriteria를 빌드한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNameLike(NHibernate.Criterion.DetachedCriteria,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            엔티티의 Name 속성값이 지정된 Name과 매칭(LIKE 검색) 되는 엔티티를 조회하는 DetachedCriteria를 빌드한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNameLike(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            엔티티의 Name 속성값이 지정된 Name과 매칭(LIKE 검색) 되는 엔티티를 조회하는 DetachedCriteria를 빌드한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddTitleLike(NHibernate.Criterion.DetachedCriteria,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            엔티티의 Title 속성값이 지정된 값과 매칭(Like 검색) 되는 엔티티를 조회하는 Criteria를 빌드한다.
            </summary>
      <param name="criteria">
      </param>
      <param name="titleToMatch">
      </param>
      <param name="matchMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddActive(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            엔티티의 IsActive 속성이 True이거나 NULL 인 엔티티를 조회하는 Criteria를 빌드한다.
            </summary>
      <param name="criteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEnabled(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            엔티티의 IsEnabled 속성이 True이거나 NULL 인 엔티티를 조회하는 Criteria를 빌드한다.
            </summary>
      <param name="criteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsActive(NHibernate.Criterion.DetachedCriteria,System.Nullable{System.Boolean})">
      <summary>
            IsActive 속성으로 검색하는 Criteria를 빌드한다.
            </summary>
      <param name="criteria">
      </param>
      <param name="isActive">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsEnabled(NHibernate.Criterion.DetachedCriteria,System.Nullable{System.Boolean})">
      <summary>
            IsEnabled 속성으로 검색하는 Criteria를 빌드한다.
            </summary>
      <param name="criteria">
      </param>
      <param name="isEnabled">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddParentIsNull(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Parent 속성이 NULL 인 검색 조건을 추가합니다.
            </summary>
      <param name="criteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddParentIsNotNull(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Parent 속성이 NULL이 아닌 검색 조건을 추가합니다.
            </summary>
      <param name="criteria">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.EqOrNull(System.String,System.Object)">
      <summary>
            속성 값이 null이면 is null로, 값이 있으면 '=' 를 사용하는 ICriterion 을 생성한다. (즉 지정한 변수 값에 따라 달라진다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.EqOrNull(NHibernate.Criterion.IProjection,System.Object)">
      <summary>
            속성 값이 null이면 is null로, 값이 있으면 '=' 를 사용하는 ICriterion 을 생성한다. (즉 지정한 변수 값에 따라 달라진다)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.EqIncludeNull(System.String,System.Object)">
      <summary>
            속성이 같은 값을 가지거나 NULL 인 경우를 나타내는 Criterion을 생성합니다.<br />
            예 : ( Product = 'RealAdmin' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.EqIncludeNull(NHibernate.Criterion.IProjection,System.Object)">
      <summary>
            속성이 같은 값을 가지거나 NULL 인 경우를 나타내는 Criterion을 생성합니다.<br />
            예 : ( Product = 'RealAdmin' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.InsensitiveLikeIncludeNull(System.String,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            값이 NULL인 경우를 포함해서,  매칭되는 검색, ((A LIKE P0) OR (A IS NULL)) <br />
            예: 예 : ( Product = 'Real%' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.InsensitiveLikeIncludeNull(System.String,System.Object)">
      <summary>
            값이 NULL인 경우를 포함해서,  매칭되는 검색, ((A LIKE P0) OR (A IS NULL)) <br />
            예 : ( Product = 'Real%' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.InsensitiveLikeIncludeNull(NHibernate.Criterion.IProjection,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            값이 NULL인 경우를 포함해서,  매칭되는 검색, ((A LIKE P0) OR (A IS NULL)) <br />
            예: 예 : ( Product = 'Real%' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.InsensitiveLikeIncludeNull(NHibernate.Criterion.IProjection,System.Object)">
      <summary>
            값이 NULL인 경우를 포함해서,  매칭되는 검색, ((A LIKE P0) OR (A IS NULL)) <br />
            예: 예 : ( Product = 'Real%' or Product is null) 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.ToMatchString(System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            LIKE 검색 시에 검색 값에 LIKE 검색이 가능하도록 검색 예약어를 붙인다( 예 "abc" + "%" )
            </summary>
      <param name="matchString">
      </param>
      <param name="matchMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEq(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            속성 = value 인 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNotEq(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            속성 != value 인 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLe(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            속성 &lt;= value 인 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLt(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            속성 &lt; value 인 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddGe(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            속성 &gt;= value 인 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddGt(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            속성 &gt; value 인 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddAllEq(NHibernate.ICriteria,System.Collections.IDictionary)">
      <summary>
            지정된 속성-값을 나타내는 사전이 모두 같다는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsEmpty(NHibernate.ICriteria,System.String)">
      <summary>
            속성이 비었음을 나타내는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsNotEmpty(NHibernate.ICriteria,System.String)">
      <summary>
            속성이 비어있지 않음을 나타내는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsNull(NHibernate.ICriteria,System.String)">
      <summary>
            속성 IS NULL 임을 나타내는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsNotNull(NHibernate.ICriteria,System.String)">
      <summary>
            속성 IS NOT NULL 임을 나타내는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEqIncludeNull(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            지정된 속성이 지정된 값과 같거나, 속성 값이 NULL인 경우 (예: Name=:Name OR Name IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddEqOrNull(NHibernate.ICriteria,System.String,System.Object)">
      <summary>
            값이 null 이라면 "속성 IS NULL" 을, 값이 있다면, "속성 = value" 라는 질의를 추가합니다. 
            (예: value가 'RealWeb'인 경우 Company='RealWeb', value가 null인 경우 Company IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLike(NHibernate.ICriteria,System.String,System.String)">
      <summary>
            LIKE 검색 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddLike(NHibernate.ICriteria,System.String,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            LIKE 검색 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInsensitiveLike(NHibernate.ICriteria,System.String,System.String)">
      <summary>
            대소문자 구분없는 LIKE 검색 질의를 추가합니다. (MS SQL에서는 기본적으로 대소문자 구분이 없으므로 AddLike와 같습니다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInsensitiveLike(NHibernate.ICriteria,System.String,System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            대소문자 구분없는 LIKE 검색 질의를 추가합니다. (MS SQL에서는 기본적으로 대소문자 구분이 없으므로 AddLike와 같습니다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIdEq(NHibernate.ICriteria,System.Object)">
      <summary>
            Id == value 인 질의를 추가합니다. 
            </summary>
      <param name="criteria">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIn(NHibernate.ICriteria,System.String,System.Collections.ICollection)">
      <summary>
            속성 IN (v1, v2, v3 ... vN) 처럼 IN Operation이 하는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInG``1(NHibernate.ICriteria,System.String,System.Collections.Generic.ICollection{``0})">
      <summary>
            속성 IN (v1, v2, v3 ... vN) 처럼 IN Operation이 하는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddBetween(NHibernate.ICriteria,System.String,System.Object,System.Object)">
      <summary>
            lo &lt;= 속성 &lt;= hi 인 질어어를 추가합니다. (lo, hi 둘 중 적어도 하나 이상이 null이 아니어야 합니다.)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddInRange(NHibernate.ICriteria,System.Object,System.String,System.String)">
      <summary>
            loProperty &lt;= value &lt;= hiProperty 인 질의를 추가합니다. (Between과 반대의 개념입니다.)
            </summary>
      <param name="criteria">
      </param>
      <param name="value">
      </param>
      <param name="loPropertyName">
      </param>
      <param name="hiPropertyName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsOverlap(NHibernate.ICriteria,NSoft.NFramework.TimePeriods.ITimePeriod,System.String,System.String)">
      <summary>
        <paramref name="period" /> 기간이 
            <paramref name="loPropertyName" /> ~ <paramref name="hiPropertyName" /> 기간과 겹치는지 조사하는 질의를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddIsElapsed(NHibernate.ICriteria,System.DateTime,System.String)">
      <summary>
            속성 &lt; <paramref name="current" /> 인 질의를 추가합니다. (값이  <paramref name="current" />보다 작다면, 이미 지나간 시간이라는 뜻)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNullAsFalse(NHibernate.ICriteria,System.String,System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 False로 간주하는 Where 절을 추가한다.
            Explicit 하게 PropertyName = True 로 되어 있는 것을 제외한 False이거나 NULL 것은 False 로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNullAsTrue(NHibernate.ICriteria,System.String,System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 True로 간주하는 Where 절을 추가한다. 
            PropertyName 를 조회할 때, 명확히 PropertyName=False가 아니라 NULL이거나, True라면 True로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.CriteriaTool.AddNot(NHibernate.ICriteria,NHibernate.Criterion.ICriterion)">
      <summary>
            지정된 Criteria에 대해 NOT을 수행합니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.EntityTool.NULL_STRING">
      <summary>
            NULL 을 표현한 문자열 ("NULL" 이지 뭐...)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.EntityTool.AncestorsPropertyName">
      <summary>
            조상을 나타내는 속성명 (Ancestors)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.EntityTool.DescendentsPropertyName">
      <summary>
            자손을 나타내는 속성명 (Descendents)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.EntityAsString(NSoft.NFramework.Data.IDataObject)">
      <summary>
        <see cref="T:NSoft.NFramework.Data.IDataObject" /> 를 상속받은 인스턴스의 정보를 문자열로 표현합니다. 인스턴스가 null 인 경우는 "NULL"을  반환합니다.
            ObjectDumper와 유사합니다.
            </summary>
      <param name="entity">내부 내용을 문자열로 표현하고자 하는 인스턴스</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.AsJsonText(NSoft.NFramework.Data.IDataObject)">
      <summary>
        <see cref="T:NSoft.NFramework.Data.IDataObject" /> 형식의 인스턴스를 JSON 방식으로 직렬화한 문자열을 반환합니다.
            </summary>
      <param name="entity">NHibernate 엔티티</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.AssertNotCircularHierarchy``1(``0,``0)">
      <summary>
            Circular Hierarchy를 검사한다. = 자식의 자손중에 부모나 부모의 조상이 있으면 안된다.
            </summary>
      <typeparam name="T">계층을 가진 형식 : Group, Role, Organization</typeparam>
      <param name="parent">부모</param>
      <param name="child">자식</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.SetHierarchy``1(``0,``0,``0)">
      <summary>
            자식의 부모를 변경한다. 새로운 부모와 자식간의 Circular Hierarchy가 아님을 검사해야한다. (Use AssertCircularHierarchy)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.SetHierarchy``1(``0,``0)">
      <summary>
            자식과 자식의 자손을 부모 및 부모의 조상에게 자손으로 등록한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.RemoveHierarchy``1(``0,``0)">
      <summary>
            부모-자식 관계 해제 시에, 조상과 자손 정보도 해제시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetAncestorsId``2(``0)">
      <summary>
            Entity의 조상 Entity의 Id 값을 조회한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
      <param name="current">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetDescendentsId``2(``0)">
      <summary>
            지정된 엔티티의 자손들의 Id 값 얻기
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
      <param name="current">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetAncestorsCriteria``2(``0)">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IHierarchyEntity`1" /> 형식의 엔티티의 조상 엔티티들을 구하는 질의 객체를 빌드한다. 자손에 대한 alias는 "des"이다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
      <param name="current">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetDescendentsCriteria``2(``0)">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IHierarchyEntity`1" /> 형식의 엔티티의 자손 엔티티들을 구하는 질의 객체를 빌드한다. 조상에대한 alias는 "ans"이다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
      <param name="current">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetAncestorsIdCriteria``2(``0)">
      <summary>
            Hierarchy 정보를 가진 엔티티의 조상 엔티티의 Id 값을 조회하는  Criteria를 빌드한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
      <param name="current">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetDescendentsIdCriteria``2(``0)">
      <summary>
            Hierarchy 정보를 가진 엔티티의 조상 엔티티의 Id 값을 조회하는  Criteria를 빌드한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TId">
      </typeparam>
      <param name="current">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.CopyLocales``1(NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity{``0},NSoft.NFramework.Data.NHibernateEx.Domain.ILocaledEntity{``0})">
      <summary>
            지역화 정보를 가진 엔티티간에 지역화 정보를 복사한다.
            </summary>
      <typeparam name="TLocale">Locale 정보를 나타내는 class의 형식</typeparam>
      <param name="dest">복사될 지역화 엔티티</param>
      <param name="src">원본 지역화 엔티티</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.FindAllHasLocaleKey``2(System.Globalization.CultureInfo)">
      <summary>
            Locale 정보를 가지는 엔티티 중에 지정된 Culture를 가지는 놈을 찾는다.
            </summary>
      <typeparam name="T">entity type</typeparam>
      <typeparam name="TLocale">type of entity locale</typeparam>
      <param name="culture">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.FindAllHasLocaleValue``2(System.String,System.Object,NHibernate.Type.IType)">
      <summary>
            Locale 정보를 가지는 엔티티 중에 해당 속성에 지정된 값을 가지는 엔티티를 조회한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TLocale">
      </typeparam>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.FindAllHasMetadataKey``1(System.String)">
      <summary>
            지정된 메타데이타 키를 가진 엔티티를 반환한다.
            </summary>
      <typeparam name="T">메타데이타를 가지는 형식(<see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity" />)</typeparam>
      <param name="key">메타데이타 키 값</param>
      <returns>지정된 메타데이타 키 값을 가지는 엔티티들</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.FindAllHasMetadataValue``1(System.String)">
      <summary>
            지정된 메타데이타의 값을 가진 엔티티를 반환한다.
            </summary>
      <typeparam name="T">메타데이타를 가지는 형식(<see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.IMetadataEntity" />)</typeparam>
      <param name="value">메타데이타 값</param>
      <returns>지정된 메타데이타 값을 가지는 엔티티들</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.MapEntity``2(``0,System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
      <summary>
            원본 객체를 대상 객체로 매핑합니다.
            </summary>
      <typeparam name="TSource">원본 객체 형식</typeparam>
      <typeparam name="TTarget">대상 객체 형식</typeparam>
      <param name="source">원본 객체</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 속성 표현식</param>
      <returns>대상 객체</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.MapEntity``2(``0,System.Func{``1},NSoft.NFramework.Reflections.MapPropertyOptions,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
      <summary>
            원본 객체를 대상 객체로 매핑합니다.
            </summary>
      <typeparam name="TSource">원본 객체 형식</typeparam>
      <typeparam name="TTarget">대상 객체 형식</typeparam>
      <param name="source">원본 객체</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="mapOptions">매핑 옵션</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 속성 표현식</param>
      <returns>대상 객체</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.MapEntities``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
      <summary>
            원본 객체를 대상 객체로 매핑합니다.
            </summary>
      <typeparam name="TSource">원본 객체 형식</typeparam>
      <typeparam name="TTarget">대상 객체 형식</typeparam>
      <param name="sources">원본 객체 시퀀스</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 속성 표현식</param>
      <returns>대상 객체 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.MapEntities``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},NSoft.NFramework.Reflections.MapPropertyOptions,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
      <summary>
            원본 객체를 대상 객체로 매핑합니다.
            </summary>
      <typeparam name="TSource">원본 객체 형식</typeparam>
      <typeparam name="TTarget">대상 객체 형식</typeparam>
      <param name="sources">원본 객체 시퀀스</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="mapOptions">매핑 옵션</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 속성 표현식</param>
      <returns>대상 객체 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.MapEntitiesAsParallel``2(System.Collections.Generic.IList{``0},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
      <summary>
            원본 객체를 대상 객체로 매핑합니다.
            </summary>
      <typeparam name="TSource">원본 객체 형식</typeparam>
      <typeparam name="TTarget">대상 객체 형식</typeparam>
      <param name="sources">원본 객체 시퀀스</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 속성 표현식</param>
      <returns>대상 객체 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.MapEntitiesAsParallel``2(System.Collections.Generic.IList{``0},System.Func{``1},NSoft.NFramework.Reflections.MapPropertyOptions,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
      <summary>
            원본 객체를 대상 객체로 매핑합니다.
            </summary>
      <typeparam name="TSource">원본 객체 형식</typeparam>
      <typeparam name="TTarget">대상 객체 형식</typeparam>
      <param name="sources">원본 객체 시퀀스</param>
      <param name="targetFactory">대상 객체 생성 Factory</param>
      <param name="mapOptions">매핑 옵션</param>
      <param name="propertyExprsToExclude">매핑에서 제외할 속성 표현식</param>
      <returns>대상 객체 시퀀스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.UpdateNodePosition``1(``0)">
      <summary>
            Node Position을 갱신합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="node">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetChildCount``1(``0)">
      <summary>
            TreeNode의 자식의 숫자를 구한다. (TreeView 구성 시 Populating을 구현할 때 필요하다)
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.HasChildren``1(``0)">
      <summary>
            TreeNode의 자식이 존재하는지를 알아본다. 자식의 수를 세는 것보다 빠르다. (TreeView 구성 시 Populating을 구현할 때 필요하다)
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.SetNodeOrder``1(``0,System.Int32)">
      <summary>
            노드의 Order를 지정된 값으로 설정한다. 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.AdjustChildOrders``1(``0)">
      <summary>
            노드의 자식 노드들의 순서를 재정렬 합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="parent">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.ChangeParent``1(``0,``0,``0)">
      <summary>
            Node의 부모를 변경합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="node">자식 노드</param>
      <param name="oldParent">기존 부모</param>
      <param name="newParent">새로운 부모</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.SetParent``1(``0,``0)">
      <summary>
            자식노드의 부모를 지정한 부모 노드로 설정한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="node">자식 노드</param>
      <param name="parent">부모가 될 노드</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.InsertChildNode``1(``0,``0,System.Int32)">
      <summary>
            부모 Node에게 자식노드를 추가한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="parent">
      </param>
      <param name="child">
      </param>
      <param name="order">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.CopyFrom(NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition,NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition)">
      <summary>
            지정된 <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodePosition" /> 속성 값을 원본 객체의 속성값으로 설정한다.
            </summary>
      <param name="dest">
      </param>
      <param name="src">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetAncestors``1(``0)">
      <summary>
            지정한 TreeNode Entity와 모든 조상을 가져온다.
            </summary>
      <typeparam name="T">TreeNode 엔티티의 수형</typeparam>
      <param name="current">기준이 되는 ITreeNodeEntity{T}</param>
      <returns>지정한 TreeNode의 모든 조상 노드들 (자신은 제외)</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetDescendents``1(``0)">
      <summary>
            지정된 TreeNode Entity와 모든 자손들을 가져온다.
            </summary>
      <typeparam name="T">TreeNode 엔티티의 수형</typeparam>
      <param name="current">기준이 되는 ITreeNodeEntity{T}</param>
      <returns>지정한 TreeNode의 모든 자손 노드들 (자신은 제외)</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetRoot``1(``0)">
      <summary>
            지정된 TreeNode의 최상위 부모를 반환합니다.
            </summary>
      <typeparam name="T">TreeNode 엔티티의 수형</typeparam>
      <param name="current">기준이 되는 ITreeNodeEntity{T}</param>
      <returns>최상위 Root Node</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetRoots``1">
      <summary>
            트리의 Root Node들을 구합니다. (부모가 null 인 TreeNode가 RootNode가 됩니다)
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetRootCount``1">
      <summary>
            지정된 TreeNode의 최상위 부모들의 갯수를 구합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetLeafs``1">
      <summary>
            트리의 모든 끝 노드(자식이 없는 노드)들 구합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.GetLeafCount``1">
      <summary>
            트리의 모든 끝 노드(자식이 없는 노드)의 갯수를 구합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.ValidateEntity(NSoft.NFramework.Data.IDataObject)">
      <summary>
            지정된 엔티티의 유효성을 검사합니다.
            </summary>
      <param name="entity">유효성 검사를 수행할 엔티티</param>
      <exception cref="T:Castle.Components.Validator.ValidationException">유효성 검사에 실패했을 때</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.AssertExists(NSoft.NFramework.Data.IDataObject)">
      <summary>
            지정된 엔티티가 null이 아님을 검사한다.
            </summary>
      <param name="entity">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.EntityTool.AssertExists(NSoft.NFramework.Data.IDataObject,System.String)">
      <summary>
            지정된 엔티티가 null이 아님을 검사한다.
            </summary>
      <param name="entity">
      </param>
      <param name="entityName">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.EntityTool.Validator">
      <summary>
            유효성 검사기. 기본적으로 <see cref="T:Castle.Components.Validator.ValidatorRunner" />를 사용한다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHTool">
      <summary>
            NHibernate 를 사용하기 위한 Helper class
            </summary>
      <summary>
            NHibernate 3.0 부터 제공하는 LINQ 기능에 대한 Utility Methods 들을 제공합니다.
            참고 : http://www.beansoftware.com/ASP.NET-Tutorials/Dynamic-LINQ.aspx
            http://blogs.msdn.com/b/marcinon/archive/2010/01/14/building-custom-linq-expressions-made-easy-with-dynamicqueryable_2e00_.aspx
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.BuildConfiguration(System.String)">
      <summary>
            지정된 NHibernate용 환경설정파일을 이용하여 <see cref="T:NHibernate.Cfg.Configuration" />을 빌드합니다.
            </summary>
      <param name="configFilePath">NHibernate 환경설정 정보를 가진 파일의 전체 경로</param>
      <returns>환경설정 정보</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetMappingAssemblies(NHibernate.Cfg.Configuration)">
      <summary>
            NHibernate configuration에서 mapping된 Assembly들을 조회한다.
            </summary>
      <param name="configuration">NHibernate Configuration 파일</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetSessionFactoryName(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory)">
      <summary>
            지정된 UnitOfWork Factory의 session factory name을 가져온다.
            </summary>
      <param name="uowFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetSessionFactoryName(NHibernate.ISessionFactory)">
      <summary>
            지정된 SessionFactory의 session factory name을 가져온다.
            </summary>
      <param name="sessionFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetSessionFactorySettings(NHibernate.ISessionFactory)">
      <summary>
        <see cref="T:NHibernate.ISessionFactory" />의 설정 정보들을 가져옵니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsMappedEntity``1(NHibernate.ISessionFactory)">
      <summary>
            지정된 엔티티 형식이 <paramref name="sessionFactory" />에 매핑된 엔티티인지 파악합니다.
            </summary>
      <typeparam name="T">엔티티의 형식</typeparam>
      <param name="sessionFactory">엔티티가 매핑되었을 SessionFactory</param>
      <returns>SessionFactory에 엔티티 형식이 매핑되었으면 True, 아니면 False</returns>
      <seealso cref="M:NHibernate.Proxy.NHibernateProxyHelper.GetClassWithoutInitializingProxy(System.Object)" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsMappedEntity(NHibernate.ISessionFactory,System.Type)">
      <summary>
            지정된 엔티티 형식이 <paramref name="sessionFactory" />에 매핑된 엔티티인지 파악합니다.
            </summary>
      <param name="sessionFactory">엔티티가 매핑되었을 SessionFactory</param>
      <param name="entityType">엔티티의 형식</param>
      <returns>SessionFactory에 엔티티 형식이 매핑되었으면 True, 아니면 False</returns>
      <seealso cref="M:NHibernate.Proxy.NHibernateProxyHelper.GetClassWithoutInitializingProxy(System.Object)" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsMappedEntity(NHibernate.ISessionFactory,NSoft.NFramework.Data.IDataObject)">
      <summary>
            지정된 엔티티가 <paramref name="sessionFactory" />에 매핑된 엔티티인지 파악합니다.
            </summary>
      <param name="sessionFactory">엔티티가 매핑되었을 SessionFactory</param>
      <param name="entity">엔티티</param>
      <returns>SessionFactory에 엔티티 형식이 매핑되었으면 True, 아니면 False</returns>
      <seealso cref="M:NHibernate.Proxy.NHibernateProxyHelper.GetClassWithoutInitializingProxy(System.Object)" />
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetDialect(NHibernate.ISession)">
      <summary>
        <see cref="T:NHibernate.ISessionFactory" />의 설정 정보 중 <see cref="T:NHibernate.Dialect.Dialect" /> 정보를 가져옵니다.
            </summary>
      <param name="session">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetDialect(NHibernate.ISessionFactory)">
      <summary>
        <see cref="T:NHibernate.ISessionFactory" />의 설정 정보 중 <see cref="T:NHibernate.Dialect.Dialect" /> 정보를 가져옵니다.
            </summary>
      <param name="sessionFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetExecutableCriteria``1(NHibernate.ISession,NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
      <summary>
            Get <see cref="T:NHibernate.ICriteria" /> from a given detached criteria
            </summary>
      <param name="session">NHibernate ISession</param>
      <param name="criteria">detached criteria</param>
      <param name="orders">ordering 정보</param>
      <returns>Entity를 조회할 Criteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetExecutableCriteria``1(NHibernate.ISession,NHibernate.Criterion.DetachedCriteria,System.Func{NHibernate.ISession,NHibernate.ICriteria},NHibernate.Criterion.Order[])">
      <summary>
            Get <see cref="T:NHibernate.ICriteria" /> from a given detached criteria. 
            if detached criteria is null, create criteria by CriteriaCreator delegate
            </summary>
      <param name="session">NHibernate ISession</param>
      <param name="criteria">detached criteria</param>
      <param name="criteriaFactory">지정된 Session을 사용하여 ICriteria를 생성할 대리자. 추가작업을 위해 ICriteria 생성작업을 위임한다.</param>
      <param name="orders">ordering 정보</param>
      <returns>Entity를 조회할 Criteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.CreateCriteria``1(NHibernate.ISession,NHibernate.Criterion.ICriterion[],NHibernate.Criterion.Order[])">
      <summary>
            Create a <see cref="T:NHibernate.ICriteria" /> from criterion array
            </summary>
      <param name="session">NHibernate ISession</param>
      <param name="criterions">arary of ICriterion</param>
      <param name="orders">ordering criteria</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.CreateCriteria``1(NHibernate.ISession,NHibernate.Criterion.ICriterion[],System.Func{NHibernate.ISession,NHibernate.ICriteria},NHibernate.Criterion.Order[])">
      <summary>
            Create a <see cref="T:NHibernate.ICriteria" /> from criterion array
            </summary>
      <param name="session">NHibernate ISession</param>
      <param name="criterions">arary of ICriterion</param>
      <param name="criteriaFactory">지정된 Session을 사용하여 ICriteria를 생성할 대리자. 추가작업을 위해 ICriteria 생성작업을 위임한다.</param>
      <param name="orders">ordering criteria</param>
      <returns>Entity를 조회할 Criteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.ApplyFetchingStrategies``1(NHibernate.ICriteria)">
      <summary>
            IoC를 이용하여 FetchingStrategy 가 등록되어 있다면 지정된 Criteria에 적용시킨다.
            </summary>
      <typeparam name="T">Type of entity</typeparam>
      <param name="crit">instance of ICriteria</param>
      <returns>FetchingStrategy가 적용된 ICriteria</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddCaching(NHibernate.ICriteria)">
      <summary>
            Cache the specified criteria
            </summary>
      <param name="crit">criteria instance to be cached.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.Path(NHibernate.Criterion.DetachedCriteria,System.String)">
      <summary>
            Get Detached Criteria for Association Path
            </summary>
      <param name="dc">detached criteria</param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.CreateDetachedQuery(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create a <see cref="T:NHibernate.Impl.DetachedQuery" /> by hql statement with parameters
            </summary>
      <param name="hql">실행할 HQL 문</param>
      <param name="parameters">파리미터</param>
      <returns>쿼리 객체</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.CreateDetachedNamedQuery(System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create a <see cref="T:NHibernate.Impl.DetachedNamedQuery" />  by queryName with parameters.
            </summary>
      <param name="queryName">실행할 쿼리명</param>
      <param name="parameters">파라미터</param>
      <returns>쿼리 객체</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetNamedQuery(NHibernate.ISession,System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create <see cref="T:NHibernate.IQuery" /> by Named Query which defined in mapping file (*.hbm.xml)
            </summary>
      <param name="session">current session</param>
      <param name="namedQuery">name of NamedQuery</param>
      <param name="parameters">collection of <see cref="T:NSoft.NFramework.Data.NHibernateEx.INHParameter" /></param>
      <returns>
        <see cref="T:NHibernate.IQuery" />instance of IQuery</returns>
      <exception cref="T:System.Exception">named query is not defined.</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetNamedQuery``1(NHibernate.ISession,System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            HBM에 정의된 NamedQuery를 로드하여 IQuery를 빌드하고, 결과 셋을 TEntity 수형으로 변환해주는 ResultTransformer를 설정하여 반환합니다.
            Stored Procedure 실행 결과를 Class로 바로 매핑할 때 사용하면 좋습니다.
            </summary>
      <param name="session">current session</param>
      <param name="namedQuery">name of NamedQuery</param>
      <param name="parameters">collection of <see cref="T:NSoft.NFramework.Data.NHibernateEx.INHParameter" /></param>
      <returns>
        <see cref="T:NHibernate.IQuery" />instance of IQuery</returns>
      <exception cref="T:System.Exception">named query is not defined.</exception>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.CreateQuery(NHibernate.ISession,System.String,NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            Create <see cref="T:NHibernate.IQuery" /> by simple query string
            </summary>
      <param name="session">current session</param>
      <param name="queryString">simple query string</param>
      <param name="parameters">collection of <see cref="T:NSoft.NFramework.Data.NHibernateEx.INHParameter" /></param>
      <returns>
        <see cref="T:NHibernate.IQuery" />instance of IQuery</returns>
      <returns>instance of IQuery</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddCaching(NHibernate.IQuery)">
      <summary>
            Query Cahcing 작업을 상세하게 제어합니다.
            </summary>
      <param name="query">instance of IQuery to be cached.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.SelectHql``1">
      <summary>
            Get HQL for <typeparamref name="T" /> (ie. " from SomeNamespce.SomeClass")
            </summary>
      <typeparam name="T">Type of entity</typeparam>
      <returns>HQL string to get all entity which type is the specified Type</returns>
      <example>
        <code>
            	var CustomerHql = NHTool.SelectHql&lt;Northwind.DataObjectBase.Customer&gt;(); 
            	// CustomerHql is [from Northwind.DataObjectBase.Customer]
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.CopyAndToTransient``1(``0)">
      <summary>
            지정된 Entity의 속성 정보만을 복제하고 (Association 정보는 복제하지 않습니다), Transient Object로 변경한다. (Identifier 값이 없다는 애기지요)
            NOTE : 다만 Association은 Transient로 변경하지 못하므로, 따로 해주어야 한다.
            </summary>
      <typeparam name="T">복사할 엔티티의 수형</typeparam>
      <param name="entity">원본 엔티티 인스턴스</param>
      <returns>Trasient object로 상태가 된 복제 엔티티</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.Local``1(NHibernate.ISession)">
      <summary>
            현재 Session (First Cache)에 로드된 관련 Entity들을 열거합니다.
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <param name="session">현재 Session</param>
      <returns>현재 Session에서 엔티티</returns>
      <example>
        <code>
            var localParent = session.Local{Parent}();
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsMsSqlServer(NHibernate.ISessionFactory)">
      <summary>
            지정된 <paramref name="sessionFactory" />가 사용하는 Database가 MS SQL Server 인지 파악합니다.
            </summary>
      <param name="sessionFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsMsSqlServer2005OrHigher(NHibernate.ISessionFactory)">
      <summary>
            지정된 <paramref name="sessionFactory" />가 사용하는 Database가 MS SQL Server 2005 이상 인지 파악합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsOracle(NHibernate.ISessionFactory)">
      <summary>
            지정된 <paramref name="sessionFactory" />가 사용하는 Database가 Oracle 인지 파악합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsSQLite(NHibernate.ISessionFactory)">
      <summary>
            지정된 <paramref name="sessionFactory" />가 사용하는 Database가 SQLite 인지 파악합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.IsMsSqlCe(NHibernate.ISessionFactory)">
      <summary>
            지정된 <paramref name="sessionFactory" />가 사용하는 Database가 MS SQL CE 인지 파악합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InitializeEntities``1(System.Collections.Generic.IList{``0})">
      <summary>
             지정된 컬렉션의 엔티티와 속성들을 <see cref="M:NHibernate.NHibernateUtil.Initialize(System.Object)" />를 이용하여 초기화 합니다. ( proxy 값을 실제 값으로 대체한다는 소리!!!)
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <param name="entities">엔티티 시퀀스</param>
      <returns>초기화된 엔티티 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InitializeEntities``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary>
             지정된 컬렉션의 엔티티와 속성들을 <see cref="M:NHibernate.NHibernateUtil.Initialize(System.Object)" />를 이용하여 초기화 합니다. ( proxy 값을 실제 값으로 대체한다는 소리!!!)
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <param name="entities">엔티티 시퀀스</param>
      <param name="forceInitialize">Initialize가 되었던 안되었던 강제로 초기화를 합니다.</param>
      <returns>초기화된 엔티티 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InitializeEntity``1(``0)">
      <summary>
            지정된 엔티티와 속성들을 <see cref="M:NHibernate.NHibernateUtil.Initialize(System.Object)" />를 이용하여 초기화 합니다. ( proxy 값을 실제 값으로 대체한다는 소리!!!)
            </summary>
      <typeparam name="T">초기화할 엔티티의 수형</typeparam>
      <param name="entity">초기화할 엔티티</param>
      <returns>초기화된 엔티티</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InitializeEntity``1(``0,System.Boolean)">
      <summary>
            지정된 엔티티와 속성들을 <see cref="M:NHibernate.NHibernateUtil.Initialize(System.Object)" />를 이용하여 초기화 합니다. ( proxy 값을 실제 값으로 대체한다는 소리!!!)
            </summary>
      <typeparam name="T">초기화할 엔티티의 수형</typeparam>
      <param name="entity">초기화할 엔티티</param>
      <param name="forceInitialize">강제 초기화</param>
      <returns>초기화된 엔티티</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetQuery``1">
      <summary>
            현재 세션의 IQueryable{T}를 제공합니다. NHibernate.Linq.NHibernateLinqMethods.Query{T} 를 사용하세요.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetQuery``1(NHibernate.ISession)">
      <summary>
            LINQ용 IQueryable{T}를 제공합니다. NHibernate.Linq.NHibernateLinqMethods.Query{T} 를 사용하세요.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="session">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddEqIncludeNull``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
      <summary>
            지정된 속성이 지정된 값과 같거나, 속성 값이 NULL인 경우 (예: Name=:Name OR Name IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddEqOrNull``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
      <summary>
            값이 null 이라면 "속성 IS NULL" 을, 값이 있다면, "속성 = value" 라는 질의를 추가합니다. 
            (예: value가 'RealWeb'인 경우 Company='RealWeb', value가 null인 경우 Company IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddLike``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
      <summary>
            LINQ에 Like 검색을 위한 표현식을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddLike``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            LINQ에 Like 검색을 위한 표현식을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddInsensitiveLike``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
      <summary>
            LINQ에 Insensitive Like 검색을 위한 표현식을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddInsensitiveLike``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            LINQ에 Insensitive Like 검색을 위한 표현식을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddBetween``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
      <summary>
            IQueryable{T}에 Between 조건을 추가합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="query">
      </param>
      <param name="expr">
      </param>
      <param name="lo">
      </param>
      <param name="hi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddInRange``1(System.Linq.IQueryable{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            IQueryable{T}에 InRange 조건을 추가합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="query">
      </param>
      <param name="value">
      </param>
      <param name="loExpr">
      </param>
      <param name="hiExpr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddIsOverlap``1(System.Linq.IQueryable{``0},NSoft.NFramework.TimePeriods.ITimePeriod,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            IQueryable{T}에 IsOverlap 조건을 추가합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="query">
      </param>
      <param name="period">
      </param>
      <param name="loExpr">
      </param>
      <param name="hiExpr">
      </param>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddIsElapsed``1(System.Linq.IQueryable{``0},System.DateTime,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" -->
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddNullAsFalse``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 False로 간주하는 Where 절을 추가한다.
            Explicit 하게 PropertyName = True 로 되어 있는 것을 제외한 False이거나 NULL 것은 False 로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.AddNullAsTrue``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 True로 간주하는 Where 절을 추가한다.
            Explicit 하게 PropertyName = False 로 되어 있는 것을 제외한 True이거나 NULL 것은 True 로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetExecutableQueryOver``1(NHibernate.ISession,NHibernate.Criterion.QueryOver{``0})">
      <summary>
        <paramref name="queryOver" /> 인스턴스를 <paramref name="session" />에서 수행할 수 있는 <see cref="T:NHibernate.IQueryOver`2" /> 를 생성합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="session">
      </param>
      <param name="queryOver">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetExecutableQueryOver``1(NHibernate.IStatelessSession,NHibernate.Criterion.QueryOver{``0})">
      <summary>
        <paramref name="queryOver" />를 <paramref name="statelessSession" />에서 수행할 수 있는 <see cref="T:NHibernate.IQueryOver`2" /> 를 생성합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="statelessSession">
      </param>
      <param name="queryOver">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InsertStateless``1(``0,NHibernate.ISession)">
      <summary>
            지정한 엔티티를 StatelessSession을 이용하여 Insert 합니다.
            </summary>
      <typeparam name="T">type of entity to insert</typeparam>
      <param name="entity">entity to insert</param>
      <param name="session">nhibernate current session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InsertStateless``1(``0)">
      <summary>
            지정한 엔티티를 StatelessSession을 이용하여 Insert 합니다. 
             </summary>
      <typeparam name="T">type of entity</typeparam>
      <param name="entity">entity to insert</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InsertStateless``1(System.Collections.Generic.IEnumerable{``0},NHibernate.ISession)">
      <summary>
            엔티티 컬렉션을 StatelessSession을 이용하여 Insert 합니다.
            </summary>
      <typeparam name="T">type of entity to insert</typeparam>
      <param name="entities">collection of entity to insert</param>
      <param name="session">nhibernate session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.InsertStateless``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            엔티티 컬렉션을 StatelessSession을 이용하여 Insert 합니다.
            </summary>
      <typeparam name="T">type of entity to insert</typeparam>
      <param name="entities">collection of entity to insert</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.UpdateStateless``1(``0,NHibernate.ISession)">
      <summary>
            엔티티를 StatelessSession을 이용하여 Update 합니다.
            </summary>
      <typeparam name="T">type of entity to update</typeparam>
      <param name="entity">entity to update</param>
      <param name="session">nhibernate current session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.UpdateStateless``1(``0)">
      <summary>
            엔티티를 StatelessSession을 이용하여 Update 합니다.
            </summary>
      <typeparam name="T">type of entity to update</typeparam>
      <param name="entity">entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.UpdateStateless``1(System.Collections.Generic.IEnumerable{``0},NHibernate.ISession)">
      <summary>
            엔티티 컬렉션을 StatelessSession을 이용하여 Update 합니다.
            </summary>
      <typeparam name="T">type of entity to update</typeparam>
      <param name="entities">collection of entity to update</param>
      <param name="session">nhibernate session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.UpdateStateless``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            엔티티 컬렉션을 StatelessSession을 이용하여 Update 합니다.
            </summary>
      <typeparam name="T">type of entity to update</typeparam>
      <param name="entities">collection of entity to update</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.DeleteStateless``1(``0,NHibernate.ISession)">
      <summary>
            지정한 엔티티를 StatelessSession을 이용하여 Delete 합니다.
            </summary>
      <typeparam name="T">type of entity to delete</typeparam>
      <param name="entity">entity to delete</param>
      <param name="session">nhibernate current session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.DeleteStateless``1(``0)">
      <summary>
            지정한 엔티티를 StatelessSession을 이용하여 Delete 합니다.
            </summary>
      <typeparam name="T">type of entity to delete</typeparam>
      <param name="entity">entity to delete</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.DeleteStateless``1(System.Collections.Generic.IEnumerable{``0},NHibernate.ISession)">
      <summary>
            엔티티 컬렉션을 StatelessSession을 이용하여 Delete 합니다.
            </summary>
      <typeparam name="T">type of entity to delete</typeparam>
      <param name="entities">collection of entity to delete</param>
      <param name="session">nhibernate session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.DeleteStateless``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            엔티티 컬렉션을 StatelessSession을 이용하여 Delete 합니다.
            </summary>
      <typeparam name="T">type of entity to delete</typeparam>
      <param name="entities">collection of entity to delete</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.RefreshStateless``1(``0,NHibernate.LockMode,NHibernate.ISession)">
      <summary>
            Refresh entity
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.RefreshStateless``1(``0,NHibernate.ISession)">
      <summary>
            Refresh entity
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.RefreshStateless``1(``0,NHibernate.LockMode)">
      <summary>
            Refresh entity
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.RefreshStateless``1(``0)">
      <summary>
            Refresh entity
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.RefreshStateless``1(System.Collections.Generic.IEnumerable{``0},NHibernate.LockMode,NHibernate.ISession)">
      <summary>
            Refresh entities
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.RefreshStateless``1(System.Collections.Generic.IEnumerable{``0},NHibernate.ISession)">
      <summary>
            Refresh entities
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.FindAllStateless``1">
      <summary>
            Stateless Session 을 이용하여, <typeparamref name="T" />의 엔티티들을 모두 조회합니다.
            </summary>
      <typeparam name="T">조회할 엔티티의 수형</typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.FindAllStateless``1(NHibernate.Criterion.DetachedCriteria)">
      <summary>
            Stateless Session 을 이용하여, <paramref name="criteria" />에 해당하는 Entity를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.FindAllStateless``1(NHibernate.Criterion.DetachedCriteria,NHibernate.ISession)">
      <summary>
            Stateless Session 을 이용하여, <paramref name="criteria" />에 해당하는 Entity를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.FindAllStateless``1(NHibernate.Criterion.QueryOver{``0})">
      <summary>
            Stateless Session 을 이용하여, <paramref name="queryOver" />에 해당하는 Entity를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.FindAllStateless``1(NHibernate.Criterion.QueryOver{``0},NHibernate.ISession)">
      <summary>
            Stateless Session 을 이용하여, <paramref name="queryOver" />에 해당하는 Entity를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.ExistsStateless``1(NHibernate.Criterion.DetachedCriteria)">
      <summary>
        <paramref name="criteria" />에 해당하는 엔티티가 존재하는지 검사합니다. 하나라도 있으면 True, 없으면 False
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.ExistsStateless``1(NHibernate.Criterion.DetachedCriteria,NHibernate.ISession)">
      <summary>
        <paramref name="criteria" />에 해당하는 엔티티가 존재하는지 검사합니다. 하나라도 있으면 True, 없으면 False
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.ExistsStateless``1(NHibernate.Criterion.QueryOver{``0})">
      <summary>
        <paramref name="queryOver" />에 해당하는 엔티티가 존재하는지 검사합니다. 하나라도 있으면 True, 없으면 False
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.ExistsStateless``1(NHibernate.Criterion.QueryOver{``0},NHibernate.ISession)">
      <summary>
        <paramref name="queryOver" />에 해당하는 엔티티가 존재하는지 검사합니다. 하나라도 있으면 True, 없으면 False
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetStateless``1(System.Object)">
      <summary>
            Id가 <paramref name="id" />인 엔티티를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetStateless``1(System.Object,NHibernate.LockMode)">
      <summary>
            Id가 <paramref name="id" />인 엔티티를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetStateless``1(System.Object,NHibernate.ISession)">
      <summary>
            Id가 <paramref name="id" />인 엔티티를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.GetStateless``1(System.Object,NHibernate.LockMode,NHibernate.ISession)">
      <summary>
            Id가 <paramref name="id" />인 엔티티를 조회합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.DeleteStatelessByHql(System.String)">
      <summary>
            지정한 hql의 결과셋의 엔티티들을 삭제합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTool.DeleteStatelessByNamedQuery(System.String)">
      <summary>
            지정한 queryName의 결과셋의 엔티티들을 삭제합니다
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHWith">
      <summary>
            Helper class for Database operation with NHibernate 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.ForceCacheRefresh">
      <summary>
            반환받는 <see cref="T:NSoft.NFramework.DisposableAction" />이 Dispose될 때 강제적으로 Cache를 Refresh합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.TemporaryQueryCache">
      <summary>
            임시로 Query에 대한 Cache를 적용할 수 있도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.QueryCache">
      <summary>
        <seealso cref="M:NSoft.NFramework.Data.NHibernateEx.NHWith.QueryCache(System.String)" />
      </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.QueryCache(System.String)">
      <summary>
            이 함수를 호출할 때에는 Caching이 되도록 하는데, 
            이 함수의 반환 객체가 disposing 될 때에는 그 전 설정으로 복귀한다.
            </summary>
      <param name="region">
      </param>
      <returns>
      </returns>
      <example>
        <code>
            using(NHWith.QueryCache("rcl"))   // set query caching enabled to true, and region to "rcl"
            {
            	//
            	// some nhibernate code
            	// 이 영역에서만 "rcl" 캐시 영역에 IQuery가 캐시된다. 
            	//
            } // reset query caching enabled and region value
            </code>
      </example>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.StatelessSession(System.Action{NHibernate.IStatelessSession})">
      <summary>
            IStatelessSession을 사용한 DB 처리를 수행할 때 사용합니다.
            </summary>
      <param name="action">
      </param>
      <remarks>
            SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.StatelessSession(NHibernate.ISession,System.Action{NHibernate.IStatelessSession})">
      <summary>
            IStatelessSession을 사용한 DB 처리를 수행할 때 사용합니다. (주의: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.)
            </summary>
      <param name="session">현재 사용중인 세션</param>
      <param name="actionToUpdateExecute">현재 사용중인 세션의 Connection을 이용하여 IStatelessSession을 만들고 그 StatelessSession하에서 실행할 Action</param>
      <remarks>
            NOTE: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.StatelessSession(System.Data.IDbConnection,System.Action{NHibernate.IStatelessSession})">
      <summary>
            IStatelessSession을 사용한 DB 처리를 수행할 때 사용합니다. (주의: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.)
            </summary>
      <param name="connection">현재 사용중인 Connection</param>
      <param name="actionToUpdateExecute">현재 사용중인 세션의 Connection을 이용하여 IStatelessSession을 만들고 그 StatelessSession하에서 실행할 Action</param>
      <remarks>
            NOTE: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.StatelessSessionNoTransaction(System.Action{NHibernate.IStatelessSession})">
      <summary>
            IStatelessSession을 사용한 Data 조회 시에만 사용하세요. (주의: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.)
            </summary>
      <param name="actionToUpdateExecute">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.StatelessSessionNoTransaction(NHibernate.ISession,System.Action{NHibernate.IStatelessSession})">
      <summary>
            IStatelessSession을 사용한 Data 조회 시에만 사용하세요. (주의: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.)
            </summary>
      <param name="session">NHibernate session</param>
      <param name="actionToUpdateExecute">IStatelessSession을 이용하여 수행하는 메소드</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.StatelessSessionNoTransaction(System.Data.IDbConnection,System.Action{NHibernate.IStatelessSession})">
      <summary>
            IStatelessSession을 사용한 Data 조회 시에만 사용하세요. (주의: SQLite의 Memory DB에서는 기존 Session과 다른 DB를 바라볼 수 있다. 이때는 예외가 발생한다.)
            </summary>
      <param name="connection">ADO.NET Connection</param>
      <param name="actionToUpdateExecute">IStatelessSession을 이용하여 수행하는 메소드</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.Transaction(System.Action)">
      <summary>
            지정된 <see cref="T:System.Action" />를 Transaction 하에서 수행한다.
            </summary>
      <param name="transactionalAction">수행할 Action</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.Transaction(System.Data.IsolationLevel,System.Action)">
      <summary>
            지정된 <see cref="T:System.Action" />를 지정된 격리수준의 Transaction 하에서 수행한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.Transaction(System.Data.IsolationLevel,System.Action,NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions)">
      <summary>
            지정된 <see cref="T:System.Action" />를 지정된 격리수준의 Transaction 하에서 수행한다.
            </summary>
      <param name="isolationLevel">격리수준</param>
      <param name="transactionalAction">Action to execute under Transaction</param>
      <param name="nestingOptions">UnitOfWork Nesting option.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.Transaction``1(System.Func{``0})">
      <summary>
            지정된 함수를 현재 UnitOfWork의 Transaction 하에서 수행합니다.
            </summary>
      <typeparam name="T">Return Type of Function to execute</typeparam>
      <param name="transactionalFunc">Function to execute under Transaction</param>
      <returns>함수 수행 결과</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.Transaction``1(System.Func{``0},System.Data.IsolationLevel)">
      <summary>
             지정된 함수를 현재 UnitOfWork의 Transaction 하에서 수행합니다.
            </summary>
      <typeparam name="T">Return Type of Function to execute</typeparam>
      <param name="transactionalFunc">Function to execute under Transaction</param>
      <param name="isolationLevel">격리수준</param>
      <returns>함수 수행 결과</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHWith.Transaction``1(System.Func{``0},System.Data.IsolationLevel,NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions)">
      <summary>
             지정된 함수를 현재 UnitOfWork의 Transaction 하에서 수행합니다.
            </summary>
      <typeparam name="T">Return Type of Function to execute</typeparam>
      <param name="transactionalFunc">Function to execute under Transaction</param>
      <param name="isolationLevel">격리수준</param>
      <param name="nestingOptions">UnitOfWork Nesting option.</param>
      <returns>함수 수행 결과</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.QueryOverTool">
      <summary>
            NHibernate 3.0의 QueryOver{T}, QueryOver.Of{T}를 위한 확장 메소드를 제공합니다.
            </summary>
      <summary>
            NHibernate 3.0의 QueryOver{T}, QueryOver.Of{T}를 위한 확장 메소드를 제공합니다.
            </summary>
      <summary>
            NHibernate 3.0의 QueryOver{T}, QueryOver.Of{T}를 위한 확장 메소드를 제공합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.GetSession(NHibernate.IQueryOver)">
      <summary>
        <paramref name="queryOver" />가 사용하는 <see cref="T:NHibernate.Engine.ISessionImplementor" />을 반환합니다.
            </summary>
      <param name="queryOver">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.RetrievePropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            람다 식에서 정의한 속성 명을 문자열로 가져옵니다. (QueryOver 의 Lambda Expr 에서 속성명을 추출해서, ICriterion 으로 변환할 수 있습니다)
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.IsBetweenCriterion``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
      <summary>
        <paramref name="expr" />에 해당하는 속성이 상하한 값(lo,hi) 구간 안에 있는 값인지 판단하는 질의를 빌드합니다.
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <param name="expr">속성을 나타내는 람다 식</param>
      <param name="lo">하한 값</param>
      <param name="hi">상한 값</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.IsInRangeCriterion``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
        <paramref name="value" /> 가 상하한 값 구간 안에 있는 값인지 판단하는 질의를 빌드합니다.
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <param name="value">검사할 값</param>
      <param name="loExpr">하한 값을 나타내는 람다 식</param>
      <param name="hiExpr">상한 값을 나타내는 람다 식</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.IsOverlapCriterion``1(NSoft.NFramework.TimePeriods.ITimePeriod,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            주어진 기간이 오버랩되는지를 파악하는 질의어를 빌드합니다. (모든 구간은 폐쇄구간일 필요는 없고, 개방 구간이라도 상관없습니다.
            </summary>
      <typeparam name="T">엔티티 수형</typeparam>
      <param name="period">검사할 시간 구간</param>
      <param name="loExpr">하한값을 나타내는 속성</param>
      <param name="hiExpr">상한값을 나타내는 속성</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddEqIncludeNull``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object)">
      <summary>
            지정된 속성이 지정된 값과 같거나, 속성 값이 NULL인 경우 (예: Name=:Name OR Name IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddEqOrNull``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object)">
      <summary>
            값이 null 이라면 "속성 IS NULL" 을, 값이 있다면, "속성 = value" 라는 질의를 추가합니다. 
            (예: value가 'RealWeb'인 경우 Company='RealWeb', value가 null인 경우 Company IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddHasChild``2(NHibernate.IQueryOver{``0,``1})">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />를 구현한 노드의 자식 노드들이 있는 경우를 조회하는 조건을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddHasNotChild``2(NHibernate.IQueryOver{``0,``1})">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />를 구현한 노드의 자식 노드들이 없는 경우를 조회하는 조건을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddBetween``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object,System.Object)">
      <summary>
            QueryOver{TRoot}의 Where절에 Between 구문을 수행합니다.
            </summary>
      <typeparam name="TRoot">
      </typeparam>
      <typeparam name="TSub">
      </typeparam>
      <param name="queryOver">
      </param>
      <param name="expr">
      </param>
      <param name="lo">
      </param>
      <param name="hi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNotBetween``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object,System.Object)">
      <summary>
            QueryOver{TRoot}의 Where절에 Not Between 구문을 수행합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddIn``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object[])">
      <summary>
            지정된 Expression의 속성에 대해 IN () 검색 수행
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNotIn``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object[])">
      <summary>
            지정된 Expression의 속성에 대해 NOT IN () 검색 수행
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddInRange``2(NHibernate.IQueryOver{``0,``1},System.Object,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
        <paramref name="value" />가 상하한 구간을 나타내는 표현식의 값의 내부 영역에 있는지 검사하는 질의어를 추가합니다.
            </summary>
      <typeparam name="TRoot">
      </typeparam>
      <typeparam name="TSub">
      </typeparam>
      <param name="queryOver">
      </param>
      <param name="value">
      </param>
      <param name="loExpr">
      </param>
      <param name="hiExpr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddIsOverlap``2(NHibernate.IQueryOver{``0,``1},NSoft.NFramework.TimePeriods.ITimePeriod,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
        <paramref name="period" />의 구간이 엔티티의 상하한 구간 (<paramref name="loExpr" /> ~ <paramref name="hiExpr" /> )과 겹치는지 검사하는 질의어를 추가합니다.
            </summary>
      <typeparam name="TRoot">
      </typeparam>
      <typeparam name="TSub">
      </typeparam>
      <param name="queryOver">QueryOver 인스턴스</param>
      <param name="period">기간</param>
      <param name="loExpr">하한값을 가지는 속성에 대한 표현식</param>
      <param name="hiExpr">상한값을 가지는 속성에 대한 표현식</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddIsElapsed``2(NHibernate.IQueryOver{``0,``1},System.DateTime,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
            속성 &lt; <paramref name="current" /> 인 질의를 추가합니다. (값이  <paramref name="current" />보다 작다면, 이미 지나간 시간이라는 뜻)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNullAsFalse``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 False로 간주하는 Where 절을 추가한다.
            Explicit 하게 PropertyName = True 로 되어 있는 것을 제외한 False이거나 NULL 것은 False 로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNullAsTrue``2(NHibernate.IQueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 True로 간주하는 Where 절을 추가한다. 
            PropertyName 를 조회할 때, 명확히 PropertyName=False가 아니라 NULL이거나, True라면 True로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddEqIncludeNull``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object)">
      <summary>
            지정된 속성이 지정된 값과 같거나, 속성 값이 NULL인 경우 (예: Name=:Name OR Name IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddEqOrNull``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object)">
      <summary>
            값이 null 이라면 "속성 IS NULL" 을, 값이 있다면, "속성 = value" 라는 질의를 추가합니다. 
            (예: value가 'RealWeb'인 경우 Company='RealWeb', value가 null인 경우 Company IS NULL)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddLike``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.String)">
      <summary>
            지정된 속성에 대한 LIKE 검색을 수행하도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddLike``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            지정된 속성에 대한 LIKE 검색을 수행하도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddHasChild``2(NHibernate.Criterion.QueryOver{``0,``1})">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />를 구현한 노드의 자식 노드들이 있는 경우를 조회하는 조건을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddHasNotChild``2(NHibernate.Criterion.QueryOver{``0,``1})">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />를 구현한 노드의 자식 노드들이 없는 경우를 조회하는 조건을 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddBetween``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object,System.Object)">
      <summary>
            QueryOver{TRoot}의 Where절에 Between 구문을 수행합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNotBetween``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object,System.Object)">
      <summary>
            QueryOver{TRoot}의 Where절에 Not Between 구문을 수행합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddIn``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object[])">
      <summary>
            지정된 Expression의 속성에 대해 IN () 검색 수행
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNotIn``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Object[])">
      <summary>
            지정된 Expression의 속성에 대해 NOT IN () 검색 수행
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddInRange``2(NHibernate.Criterion.QueryOver{``0,``1},System.Object,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
        <paramref name="value" />가 상하한 구간을 나타내는 표현식의 값의 내부 영역에 있는지 검사하는 질의어를 추가합니다.
            </summary>
      <typeparam name="TRoot">
      </typeparam>
      <typeparam name="TSub">
      </typeparam>
      <param name="queryOver">
      </param>
      <param name="value">
      </param>
      <param name="loExpr">
      </param>
      <param name="hiExpr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddIsOverlap``2(NHibernate.Criterion.QueryOver{``0,``1},NSoft.NFramework.TimePeriods.ITimePeriod,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
        <paramref name="period" />의 구간이 엔티티의 상하한 구간 (<paramref name="loExpr" /> ~ <paramref name="hiExpr" /> )과 겹치는지 검사하는 질의어를 추가합니다.
            </summary>
      <typeparam name="TRoot">
      </typeparam>
      <typeparam name="TSub">
      </typeparam>
      <param name="queryOver">QueryOver 인스턴스</param>
      <param name="period">검색 기간</param>
      <param name="loExpr">하한 값 표현식</param>
      <param name="hiExpr">상한 값 표현식</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddIsElapsed``2(NHibernate.Criterion.QueryOver{``0,``1},System.DateTime,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
            속성 &lt; <paramref name="current" /> 인 질의를 추가합니다. (값이  <paramref name="current" />보다 작다면, 이미 지나간 시간이라는 뜻)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNullAsFalse``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 False로 간주하는 Where 절을 추가한다.
            Explicit 하게 PropertyName = True 로 되어 있는 것을 제외한 False이거나 NULL 것은 False 로 간주한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.QueryOverTool.AddNullAsTrue``2(NHibernate.Criterion.QueryOver{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Nullable{System.Boolean})">
      <summary>
            지정한 속성 값이 NULL이면 True로 간주하는 Where 절을 추가한다. 
            PropertyName 를 조회할 때, 명확히 PropertyName=False가 아니라 NULL이거나, True라면 True로 간주한다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.RepositoryTool">
      <summary>
            범용의 Domain 관련 Utiltiy class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindOne``1(NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            지정된 조건에 해당하는 유일한 결과를 조회한다. 결과가 두 개 이상이면 예외를 발생시킨다
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAll``1(NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            특정 속성값이 일치하는 모든 Entity 정보를 Load한다.
            </summary>
      <typeparam name="T">검색하고자하는 Entity의 수형</typeparam>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAll``1(System.Nullable{System.Int32},System.Nullable{System.Int32},NHibernate.Criterion.Order[],NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
            특정 속성값이 일치하는 모든 Entity 정보를 Load한다.
            </summary>
      <typeparam name="T">검색하고자하는 Entity의 수형</typeparam>
      <param name="firstResult">결과 셋의 첫번째 레코드의 인덱스(0부터 시작)</param>
      <param name="maxResults">결과 셋의 최대 크기</param>
      <param name="orders">결과 셋의 정렬 순서</param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAll``1(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
            조건 람다 식이 일치하는 모든 Entity 정보를 Load한다.
            </summary>
      <typeparam name="T">검색하고자하는 Entity의 수형</typeparam>
      <param name="firstResult">결과 셋의 첫번째 레코드의 인덱스(0부터 시작)</param>
      <param name="maxResults">결과 셋의 최대 크기</param>
      <param name="expressions">조건 절 람다 식</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindRoots``1(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />를 구현한 엔티티 (TREE VIEW 상에 나타내는)에 대해 Root 에 해당하는 (Parent가 null인) Entity들을 조회한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="firstResult">결과 셋의 첫번째 레코드의 인덱스(0부터 시작)</param>
      <param name="maxResults">결과 셋의 최대 크기</param>
      <param name="expressions">조건 절 람다 식</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindRoots``1(System.Nullable{System.Int32},System.Nullable{System.Int32},NHibernate.Criterion.Order[],NSoft.NFramework.Data.NHibernateEx.INHParameter[])">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ITreeNodeEntity`1" />를 구현한 엔티티 (TREE VIEW 상에 나타내는)에 대해 Root 에 해당하는 (Parent가 null인) Entity들을 조회한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="firstResult">결과 셋의 첫번째 레코드의 인덱스(0부터 시작)</param>
      <param name="maxResults">결과 셋의 최대 크기</param>
      <param name="orders">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindOneByCode``1(System.String)">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ICodeEntity" />를 구현한 엔티티의 Code 속성이 일치하는 엔티티를 검색합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAllByCode``1(System.String)">
      <summary>
            Entity의 Code 속성 값이 <paramref name="code" />와 일치하는 entity 들을 조회한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindOneByName``1(System.String)">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.Domain.ICodeEntity" />를 구현한 엔티티의 Code 속성이 일치하는 엔티티를 검색합니다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAllByName``1(System.String)">
      <summary>
            Entity의 Name 속성 값이 <paramref name="name" />와 일치하는 entity 들을 조회한다.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAllByNameToMatch``1(System.String)">
      <summary>
            지정된 이름과 매칭되는 (LIKE 검색) 엔티티를 모두 조회한다. (MatchMode는 Anywhere (%keyword%) 이다.)
            </summary>
      <typeparam name="T">검색할 Entity 수형</typeparam>
      <param name="nameToMatch">매칭될 이름</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.RepositoryTool.FindAllByNameToMatch``1(System.String,NHibernate.Criterion.MatchMode)">
      <summary>
            지정된 이름과 매칭되는 (LIKE 검색) 엔티티를 모두 조회한다.
            </summary>
      <typeparam name="T">검색할 Entity 수형</typeparam>
      <param name="nameToMatch">매칭될 이름</param>
      <param name="matchMode">매칭 방법(Start, End, Anywhere)</param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.DynamicResultTransformer`1">
      <summary>
        <see cref="T:NHibernate.ICriteria" /> 등을 실행해서 나온 결과(object[]) 를 지정된 형식으로 빌드한다.
            이때 지정된 형식의 속성값에 값을 설정하기 때문에, 관련없는 속성에는 값이 설정되지 않는다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.DynamicResultTransformer`1.TransformList(System.Collections.IList)">
      <summary>
             변환할 데이타의 컬렉션  
            </summary>
      <param name="collection">원본 컬렉션</param>
      <returns>변환할 데이타의 컬렉션</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.DynamicResultTransformer`1.TransformTuple(System.Object[],System.String[])">
      <summary>
            NHibernate ResultSet으로부터 나온 object[]를 지정된 형식의 인스턴스의 속성값에 매칭시킨다.
            </summary>
      <param name="tuple">결과 값</param>
      <param name="aliases">컬럼 명</param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.DynamicResultTransformer`1.DynamicAccessor">
      <summary>
            Dynamic Method를 이용하여, 지정된 타입의 객체의 속성, 필드 정보를 조회/설정할 수 있는 접근자
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.TypedResultTransformer`1">
      <summary>
            NHibernate Query 결과 셋이 object[] 형태로 나온 것을 지정된 형식의 생성자를 호출하여 인스턴스로 빌드한다.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.TypedResultTransformer`1.TransformList(System.Collections.IList)">
      <summary>
            Constructor
            </summary>
      <param name="collection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.TypedResultTransformer`1.TransformTuple(System.Object[],System.String[])">
      <summary>
            결과 정보를 가지고, 지정된 형식의 인스턴스를 생성해서 반환한다.
            </summary>
      <param name="tuple">쿼리 실행 결과 배열</param>
      <param name="aliases">
      </param>
      <returns>쿼리 실행결과를 인자로 한 인스턴스</returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkTransaction">
      <summary>
            Unit Of Work Pattern에서 Transaction 처리를 표현한 Interface
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkTransaction.Commit">
      <summary>
            Commit transaction
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkTransaction.Rollback">
      <summary>
            Rollback transaction
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHMultipleTransaction">
      <summary>
            복수의 UnitOfWork 에 대한 Transaction을 처리하는 Class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleTransaction.Commit">
      <summary>
            commit transaction
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleTransaction.Rollback">
      <summary>
            Rollback transaction
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleTransaction.Dispose">
      <summary>
            관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 응용 프로그램 정의 작업을 수행합니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter">
      <summary>
            NHibernate용 Transaction 처리를 구현한 Class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.#ctor(NHibernate.ITransaction)">
      <summary>
            생성자
            </summary>
      <param name="transaction">Transaction 인스턴스</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.Commit">
      <summary>
            Commit transaction
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.Rollback">
      <summary>
            Rollback transaction
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.Finalize">
      <summary>
            Finalizer
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.Dispose">
      <summary>
             Release Transaction.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.Dispose(System.Boolean)">
      <summary>
            Release resource
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHTransactionAdapter.IsDisposed">
      <summary>
            현재 인스턴스 리소스 해제 여부
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory">
      <summary>
            복수의 DB에 대한 UnitOfWork를 제공하는 MultipleUnitOfWorkFactory 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory">
      <summary>
            Factory Interface for IUnitOfWork
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.Init">
      <summary>
            initialize unit of work factory.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.Create(System.Data.IDbConnection,NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            Create a new unit of work implementation.
            </summary>
      <param name="maybeUserProvidedConnection">instance of IDbConnection.</param>
      <param name="previous">현재 사용중인 IUnitOfWorkImplementor의 인스턴스</param>
      <returns>새로 생성한 IUnitOfWorkImplementor의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.GetCurrentSessionFor(System.Type)">
      <summary>
        <paramref name="typeOfEntity" />이 매핑된 Current Session을 반환한다.
            </summary>
      <param name="typeOfEntity">Type of entity</param>
      <returns>지정된 Entity형식이 매핑된 ISession</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.GetCurrentSessionFor``1">
      <summary>
        <typeparamref name="TEntity" /> 수형이 매핑된 Current Session을 반환한다.
            </summary>
      <typeparam name="TEntity">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.GetCurrentSessionFor(System.String)">
      <summary>
            지정된 factory name을 가진 session factory의 current session을 가져 온다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.SetCurrentSession(System.Type,NHibernate.ISession)">
      <summary>
            지정된 Entity 형식을 해당 Session에 매핑시킨다.
            </summary>
      <param name="typeOfEntity">Type of entity</param>
      <param name="session">Instance of ISession to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.SetCurrentSessionName(System.String)">
      <summary>
            지정된 이름의 Sessio을 현재 사용할 Session으로 설정합니다. Dispose() 시에 원래 Session으로 복귀시킵니다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.LoadUnitOfWorkFromHashtable(System.Collections.Hashtable,NSoft.NFramework.Data.NHibernateEx.IUnitOfWork@,System.Nullable{System.Guid}@)">
      <summary>
            Long Conversation 시에 ASP.NET Session에 보관된 IUnitOfWork 인스턴스를 가져와 HttpRequest의 Context에 전달한다.
            </summary>
      <param name="hashtable">the Hashtable to load the unit of work from</param>
      <param name="unitOfWork">retrieved instance of IUnitOfWork</param>
      <param name="longConversationId">long conversation id to identifying convesations</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.SaveUnitOfWorkToHashtable(System.Collections.Hashtable)">
      <summary>
            Long Conversation 시에 현재 활성화 된 IUnitOfWork 인스턴스를 Hashtable 에 저장한다.
            </summary>
      <param name="hashtable">the Hashtable to save the unit of work to</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.DisposeUnitOfWork(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            지정된 <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor" />의 인스턴스를 Dispose합니다.
            </summary>
      <param name="adapter">
      </param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.ConfigurationFileName">
      <summary>
            NHibernate configuration filename
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.Configuration">
      <summary>
            NHibernate configuration
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.SessionFactory">
      <summary>
            NHibernate SessionFactory
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.CurrentSession">
      <summary>
            Current session	in current thread context
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory.QueryProvider">
      <summary>
            NHibernate HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.USER_PROVIDED_CONNECTION_EXCEPTION_MESSAGE">
      <summary>
            Exception message of User Provided connection
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.CurrentNHibernateSessionKey">
      <summary>
            Current NHibernate Session Key for long conversation
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.#ctor(System.String[])">
      <summary>
            생성자
            </summary>
      <param name="cfgFilenames">NHibernate Configuration File 경로들</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.Init">
      <summary>
            initialize unit of work factory.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.Create(System.Data.IDbConnection,NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            Create a new unit of work implementation.
            </summary>
      <param name="maybeUserProvidedConnection">instance of IDbConnection.</param>
      <param name="previous">현재 사용중인 IUnitOfWorkImplementor의 인스턴스</param>
      <returns>새로 생성한 IUnitOfWorkImplementor의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.GetCurrentSessionFor(System.Type)">
      <summary>
        <paramref name="typeOfEntity" />이 매핑된 Current Session을 반환한다.
            </summary>
      <param name="typeOfEntity">Type of entity</param>
      <returns>지정된 Entity형식이 매핑된 ISession</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.GetCurrentSessionFor``1">
      <summary>
        <typeparamref name="TEntity" /> 수형이 매핑된 Current Session을 반환한다.
            </summary>
      <typeparam name="TEntity">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.GetCurrentSessionFor(System.String)">
      <summary>
            지정된 factory name을 가진 session factory의 current session을 가져 온다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.SetCurrentSession(System.Type,NHibernate.ISession)">
      <summary>
            지정된 Entity 형식을 해당 Session에 매핑시킨다.
            </summary>
      <param name="typeOfEntity">Type of entity</param>
      <param name="session">Instance of ISession to set</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.SetCurrentSessionFor(System.String,NHibernate.ISession)">
      <summary>
            현재 사용할 Session을 지정한 이름의 SessionFactory와 session으로 할당한다.
            </summary>
      <param name="name">session factory name</param>
      <param name="session">session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.SetCurrentSessionName(System.String)">
      <summary>
            지정된 이름의 Sessio을 현재 사용할 Session으로 설정합니다. Dispose() 시에 원래 Session으로 복귀시킵니다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.LoadUnitOfWorkFromHashtable(System.Collections.Hashtable,NSoft.NFramework.Data.NHibernateEx.IUnitOfWork@,System.Nullable{System.Guid}@)">
      <summary>
            Long Conversation 시에 ASP.NET Session에 보관된 IUnitOfWork 인스턴스를 가져와 HttpRequest의 Context에 전달한다.
            </summary>
      <param name="hashtable">the Hashtable to load the unit of work from</param>
      <param name="unitOfWork">retrieved instance of IUnitOfWork</param>
      <param name="longConversationId">long conversation id to identifying convesations</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.SaveUnitOfWorkToHashtable(System.Collections.Hashtable)">
      <summary>
            Long Conversation 시에 현재 활성화 된 IUnitOfWork 인스턴스를 Hashtable 에 저장한다.
            </summary>
      <param name="hashtable">the Hashtable to save the unit of work to</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.DisposeUnitOfWork(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            지정된 <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor" />의 인스턴스를 Dispose합니다.
            </summary>
      <param name="adapter">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.GetUnitOfWorkFactory(System.String)">
      <summary>
            지정한 SessionFactoryName을 가진 IUnitOfWorkFactory를 찾습니다.
            </summary>
      <param name="sessionFactoryName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.GetDefaultFactory">
      <summary>
            Multiple UnitOfWorkFactory에서 기본 Factory로 지정된 것의 Session을 가져온다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.ToString(System.Nullable{System.Boolean})">
      <summary>
            인스턴스의 내부 내용을 문자열로 표현한다.
            </summary>
      <param name="showDetail">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.ConfigurationFileName">
      <summary>
            NHibernate configuration filename
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.Configuration">
      <summary>
            NHibernate configuration
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.SessionFactory">
      <summary>
            NHibernate SessionFactory
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.CurrentSession">
      <summary>
            Current session	in current thread context
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.FluentNHMultipleUnitOfWorkFactory.QueryProvider">
      <summary>
            NHibernate HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.FluentNHUnitOfWorkFactory">
      <summary>
            FluentNHibernate 라이브러리를 이용하여, 매핑을 수행하는 UnitOfWorkFactory 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory">
      <summary>
            Factory for <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork" /> (기본적으로 <see cref="T:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter" />를 생성한다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.DEFAULT_CONFIG_FILENAME">
      <summary>
            NHibernate default configuration file name
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.CurrentNHibernateSessionKey">
      <summary>
            현재 활성화된 NHibernate.ISession을 <see cref="T:NSoft.NFramework.Local" />저장소에 저장하기 위한 키
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.#ctor">
      <summary>
            Initialize a new instance of NHUnitOfWorkFactory with <see cref="F:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.DEFAULT_CONFIG_FILENAME" /> (hibernate.cfg.xml)
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.#ctor(System.String)">
      <summary>
            Initialize a new instance of NHUnitOfWorkFactory with the specified configuration file path
            </summary>
      <param name="cfgFilename">NHibernate configuration file path</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.#ctor(System.Reflection.Assembly[])">
      <summary>
             Initialize a new instance of NHUnitOfWorkFactory with the specified mapping assemblies
            </summary>
      <param name="assemblies">Configuration 파일에서 Mapping 한 Assembly외에 추가로 Castle IoC를 통해서 추가할 수 있다.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.#ctor(System.Reflection.Assembly[],System.String)">
      <summary>
             Initialize a new instance of NHUnitOfWorkFactory with the specified configuration file path and mapping assemblies
            </summary>
      <param name="assemblies">Configuration 파일에서 Mapping 한 Assembly외에 추가로 Castle IoC를 통해서 추가할 수 있다.</param>
      <param name="cfgFilename">NHibernate configuration file path</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.ConfigureCfgFile(System.String)">
      <summary>
            configure with specified nhibernate configuration file.
            </summary>
      <param name="configFilePath">physical path of nhibernate configuration file</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.DisposeUnitOfWork(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            Disposing a given Unit of work
            </summary>
      <param name="adapter">instance of IUnitOfWork to dispose.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.RegisterSessionFactory(NHibernate.ISessionFactory)">
      <summary>
            replace the default implementation of the Session Factory (read from configuration) with a user supplied one.
            NOTE : 이 작업은 Application 시작시에만 가능하다.
            </summary>
      <param name="factory">instance of ISessionFactory to regist</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.RegisterSessionFactory(NHibernate.Cfg.Configuration,NHibernate.ISessionFactory)">
      <summary>
            replace the default implementation of the Session Factory (read from configuration) with a user supplied one.
            NOTE : 이 작업은 Application 시작시에만 가능하다.
            </summary>
      <param name="cfg">instance of Configuration</param>
      <param name="factory">instance of ISessionFactory to regist</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.Init">
      <summary>
            Initialize Factory of UnitOfWork
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.Create(System.Data.IDbConnection,NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            Create a new unit of work implementation.
            </summary>
      <param name="maybeUserProvidedConnection">instance of IDbConnection.</param>
      <param name="previous">현재 사용중인 IUnitOfWorkImplementor의 인스턴스</param>
      <returns>새로 생성한 IUnitOfWorkImplementor의 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.LoadUnitOfWorkFromHashtable(System.Collections.Hashtable,NSoft.NFramework.Data.NHibernateEx.IUnitOfWork@,System.Nullable{System.Guid}@)">
      <summary>
            Long Conversation시에 Hashtable 에 저장된 UnitOfWork 인스턴스 정보를 가져온다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.SaveUnitOfWorkToHashtable(System.Collections.Hashtable)">
      <summary>
            Long Conversation을 위해 UnitOfWork 인스턴스 정보를 ASP.NET Session 에 저장한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.GetCurrentSessionFor(System.Type)">
      <summary>
            지정된 Entity 형식이 매핑된 현재 Session을 반환한다.
            </summary>
      <param name="typeOfEntity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.GetCurrentSessionFor``1">
      <summary>
        <typeparamref name="TEntity" /> 수형이 매핑된 Current Session을 반환한다.
            </summary>
      <typeparam name="TEntity">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.GetCurrentSessionFor(System.String)">
      <summary>
            현재 사용중인 Session을 반환합니다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.SetCurrentSession(System.Type,NHibernate.ISession)">
      <summary>
            지정된 Entity 형식을 해당 Session에 매핑시킨다.
            </summary>
      <param name="typeOfEntity">
      </param>
      <param name="session">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.SetCurrentSessionName(System.String)">
      <summary>
            지정한 session factory name의 session을 현재 session으로 사용하는 <see cref="T:NSoft.NFramework.DisposableAction" />을 반환합니다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.InitializationAwares">
      <summary>
            NHibernate SessionFactory 초기화
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.ConfigurationFileName">
      <summary>
            NHibernate configuration filename
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.Configuration">
      <summary>
            NHibernate Configuration
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.SessionFactory">
      <summary>
            Session factory for the application.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.CurrentSession">
      <summary>
            Current session
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.QueryProvider">
      <summary>
            Query String을 제공하는 Provider
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory.MappingAssemblies">
      <summary>
            매핑 정보가 있는 Assembly 들
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.FluentNHUnitOfWorkFactory.ConfigureCfgFile(System.String)">
      <summary>
            configure with specified nhibernate configuration file.
            </summary>
      <param name="configFilePath">physical path of nhibernate configuration file</param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.FluentNHUnitOfWorkFactory.Convention">
      <summary>
            FluentNHibernate Convention 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork">
      <summary>
            Unit Of Work Pattern을 구현한 Interface
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.Flush">
      <summary>
            Current Session의 변경 내용을 Flush를 통해 Database에 적용한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.Clear">
      <summary>
            Current Session의 내용을 모두 소거합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.BeginTransaction">
      <summary>
            Transaction을 시작합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            지정된 <see cref="T:System.Data.IsolationLevel" />로 Transaction을 시작합니다.
            </summary>
      <param name="isolationLevel">격리 수준</param>
      <returns>Transactio 객체</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.TransactionalFlush">
      <summary>
            Current Session의 변경 내용을 Transaction을 적용하여 Flush를 수행한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.TransactionalFlush(System.Data.IsolationLevel)">
      <summary>
            Current Session의 변경 내용을 Transaction을 적용하여 Flush를 수행한다.
            </summary>
      <param name="isolationLevel">격리수준</param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork.IsInActiveTransaction">
      <summary>
            현재 Unit Of Work에 Transaction이 활성화되어 있는지 나타낸다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor">
      <summary>
            Unit Of Work의 중첩 사용을 가능토록 한 Interface
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor.IncrementUsages">
      <summary>
            사용 Count를 증가시킨다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor.Previous">
      <summary>
            Unit Of Work 를 중첩 방식으로 사용할 때의 바로 전의 Unit Of Work
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor.Session">
      <summary>
            현재 활성화한 ISession
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory">
      <summary>
            Multiple UnitOfWorkFactory
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.USER_PROVIDED_CONNECTION_EXCEPTION_MESSAGE">
      <summary>
            Exception message of User Provided connection
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.CurrentNHibernateSessionKey">
      <summary>
            Current NHibernate Session Key for long conversation
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.Init">
      <summary>
            initialize unit of work factory.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.Create(System.Data.IDbConnection,NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            Create a new unit of work implementation.
            </summary>
      <param name="maybeUserProvidedConnection">
      </param>
      <param name="previous">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.DisposeUnitOfWork(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            Disposing a given Unit of work
            </summary>
      <param name="adapter">instance of IUnitOfWork to dispose.</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.LoadUnitOfWorkFromHashtable(System.Collections.Hashtable,NSoft.NFramework.Data.NHibernateEx.IUnitOfWork@,System.Nullable{System.Guid}@)">
      <summary>
            Long Conversation 시에 ASP.NET Session에 보관된 IUnitOfWork 인스턴스를 가져와 HttpRequest의 Context에 전달한다.
            </summary>
      <param name="hashtable">UnitOfWork 인스턴스들을 캐시한 Hashtable</param>
      <param name="unitOfWork">현 Thread Context에 해당하는 <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork" />의 인스턴스</param>
      <param name="longConversationId">현 Thread Context에 해당하는 Long Conversation Id </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.SaveUnitOfWorkToHashtable(System.Collections.Hashtable)">
      <summary>
            Long Conversation 시에 현재 활성화 된 IUnitOfWork 인스턴스를 Session에 저장한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.GetCurrentSessionFor(System.Type)">
      <summary>
            지정된 Entity 형식이 매핑된 현재 Session을 반환한다.
            </summary>
      <param name="typeOfEntity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.GetCurrentSessionFor(System.String)">
      <summary>
            지정한 이름의 Session Factory의 현재 Session을 구합니다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.SetCurrentSession(System.Type,NHibernate.ISession)">
      <summary>
            지정된 Entity 형식을 해당 Session에 매핑시킨다.
            </summary>
      <param name="typeOfEntity">
      </param>
      <param name="session">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.GetUnitOfWorkFactory(System.String)">
      <summary>
            지정한 SessionFactoryName을 가진 UnitOfWorkFactory를 찾습니다.
            </summary>
      <param name="sessionFactoryName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.GetCurrentSessionFor``1">
      <summary>
            지정된 형식이 매핑된 Session을 반환한다.
            </summary>
      <typeparam name="TEntity">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.GetDefaultFactory">
      <summary>
            Multiple UnitOfWorkFactory에서 기본 Factory로 지정된 것의 Session을 가져온다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.SetCurrentSessionFor``1(NHibernate.ISession)">
      <summary>
            지정된 Entity 형식을 해당 Session에 매핑시킨다.
            </summary>
      <typeparam name="TEntity">
      </typeparam>
      <param name="session">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.SetCurrentSessionFor(System.String,NHibernate.ISession)">
      <summary>
            현재 사용할 Session을 지정한 이름의 SessionFactory와 session으로 할당한다.
            </summary>
      <param name="name">session factory name</param>
      <param name="session">session</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.SetCurrentSessionName(System.String)">
      <summary>
            해당이름을 현재 Session 명으로 하는 DisposableAction을 반환합니다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.ToString(System.Nullable{System.Boolean})">
      <summary>
            인스턴스의 내부 내용을 문자열로 표현한다.
            </summary>
      <param name="showDetail">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.CurrentSession">
      <summary>
            Current session
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.ConfigurationFileName">
      <summary>
            NHibernate configuration filename
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.Configuration">
      <summary>
            NHibernate configuration
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.SessionFactory">
      <summary>
            NHibernate SessionFactory
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.QueryProvider">
      <summary>
            NHibernate HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkFactory.DefaultFactoryName">
      <summary>
            다중 Database에 대해 기본 Session Factory Name을 나타낸다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor">
      <summary>
            Multiple UnitOfWork 
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.IncrementUsages">
      <summary>
            사용횟수를 증가시킵니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Flush">
      <summary>
            Current Session의 변경 내용을 Flush를 통해 Database에 적용한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Clear">
      <summary>
            Current Session의 내용을 모두 소거합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.BeginTransaction">
      <summary>
            Transaction을 시작합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            지정된 <see cref="T:System.Data.IsolationLevel" />로 Transaction을 시작합니다.
            </summary>
      <param name="isolationLevel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.TransactionalFlush">
      <summary>
            Current Session의 변경 내용을 Transaction을 적용하여 Flush를 수행한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.TransactionalFlush(System.Data.IsolationLevel)">
      <summary>
            Current Session의 변경 내용을 Transaction을 적용하여 Flush를 수행한다.
            </summary>
      <param name="isolationLevel">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Finalize">
      <summary>
            Finalizer
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Dispose">
      <summary>
             Release resources.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Dispose(System.Boolean)">
      <summary>
            Release resources
            </summary>
      <param name="disposing">release managed resources.</param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Previous">
      <summary>
            Unit Of Work 를 중첩 방식으로 사용할 때의 바로 전의 Unit Of Work
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.Session">
      <summary>
            Current ISession of UnitOfWork
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.IsInActiveTransaction">
      <summary>
            현재 Unit Of Work에 Transaction이 활성화되어 있는지 나타낸다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHMultipleUnitOfWorkImplementor.IsDisposed">
      <summary>
            리소스 해제 여부
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter">
      <summary>
            Concrete class for IUnitOfWorkImplementor
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapterBase">
      <summary>
            IUnitOfWork를 구현한 기본 클래스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapterBase.TransactionalFlush(System.Data.IsolationLevel)">
      <summary>
            지정된 격리수준으로 Transaction을 생성하고, 이 Transaction하에서 현재 Session을 Flushing 한다.
            Transaction이 실패하면, Flush한 작업은 모두 취소된다.
            </summary>
      <param name="isolationLevel">격리수준</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapterBase.TransactionalFlush">
      <summary>
            Transaction을 생성하고, 이 Transaction하에서 현재 Session을 Flushing 한다.
            Transaction이 실패하면, Flush한 작업은 모두 취소된다.
            </summary>
      <remarks>
            격리수준은 <see cref="F:System.Data.IsolationLevel.ReadCommitted" />를 사용한다.
            </remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.#ctor(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory,NHibernate.ISession,NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter)">
      <summary>
            constructor
            </summary>
      <param name="uowFactory">Factory of UnitOfWork</param>
      <param name="session">NHibernate session</param>
      <param name="previous">Previos UnitOfWork</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.IncrementUsages">
      <summary>
            UnitOfWork 사용 횟수를 증가시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Flush">
      <summary>
            Current Session의 변경 내용을 Flush를 통해 Database에 적용한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Clear">
      <summary>
            Current Session의 내용을 모두 소거합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.BeginTransaction">
      <summary>
            Transaction을 시작합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            지정된 <see cref="T:System.Data.IsolationLevel" />로 Transaction을 시작합니다.
            </summary>
      <param name="isolationLevel">격리 수준</param>
      <returns>Transactio 객체</returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Finalize">
      <summary>
            Finalizer
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Dispose">
      <summary>
             Release resources.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Dispose(System.Boolean)">
      <summary>
            Release resources
            </summary>
      <param name="disposing">release managed resources.</param>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Factory">
      <summary>
            Factory for <see cref="T:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkFactory" /></summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Session">
      <summary>
            현재 활성화한 ISession
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.Previous">
      <summary>
            Unit Of Work 를 중첩 방식으로 사용할 때의 바로 전의 Unit Of Work
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.IsInActiveTransaction">
      <summary>
            현재 Unit Of Work에 Transaction이 활성화되어 있는지 나타낸다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHUnitOfWorkAdapter.IsDisposed">
      <summary>
            리소스 해제 여부
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWork">
      <summary>
            Utility class for Unit Of Work
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.StartLongConversation">
      <summary>
            ASP.NET Session을 이용하여 다중 Page Request에 대해 Transaction이 가능하도록 합니다.
            단 실제 Database Transaction과는 달리 Session을 닫지 않는 다는 뜻입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.StartPrivateConversation">
      <summary>
            Signals the start of an application/user transaction that spans multiple page requests, 
            but is not loaded without explicitly specifying the conversation key.
            </summary>
      <remarks>
            Used in conjunction with <see cref="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkHttpApplication" />, will ensure that the current UoW
            (see <see cref="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Current" />) is kept intact across multiple page requests. Review the <see cref="T:NSoft.NFramework.Data.NHibernateEx.LongConversationManager" /> for details.
            <para>
            Note: This method does not start a physical database transaction.
            </para></remarks>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.EndLongConversation">
      <summary>
            Long conversation 을 종료시킵니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.SetCurrentSessionName(System.String)">
      <summary>
            지정된 session factory name을 사용하는 session을 current session으로 설정한다.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.RegisterGlobalUnitOfWork(NSoft.NFramework.Data.NHibernateEx.IUnitOfWork)">
      <summary>
            NOT Thread-safe!!!
            using 구문을 이용하여 작업을 처리할 때 편리하도록 제공한다.
            </summary>
      <param name="global">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Start(NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions)">
      <summary>
            새로운 Unit Of Work을 시작합니다.
            </summary>
      <param name="nestingOptions">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Start">
      <summary>
            새로운 Unit Of Work을 시작합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Start(System.Data.IDbConnection)">
      <summary>
            새로운 Unit Of Work을 시작합니다.
            </summary>
      <param name="connection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Start(System.Data.IDbConnection,NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions)">
      <summary>
            새로운 Unit Of Work을 시작합니다.
            </summary>
      <param name="connection">
      </param>
      <param name="nestingOptions">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Stop">
      <summary>
            현재 실행중인 UnitOfWork를 끝냅니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Stop(System.Boolean)">
      <summary>
            현재 실행중인 UnitOfWork를 끝냅니다.
            </summary>
      <param name="needFlushing">Session에 보관된 내용을 Flushing을 할 것인지 여부</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.GetCurrentSessionFor(System.Type)">
      <summary>
            지정된 Entity 형식이 매핑된 현재 Session을 반환한다.
            </summary>
      <param name="typeOfEntity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.GetCurrentSessionFor(System.String)">
      <summary>
            지정된 Session factory name으로 부터 현재 세션 객체를 가져온다.
            </summary>
      <param name="name">Factory name</param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.SetCurrentSession(System.Type,NHibernate.ISession)">
      <summary>
            지정된 Entity 형식을 해당 Session에 매핑시킨다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.DisposeUnitOfWork(NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkImplementor)">
      <summary>
            called internally to clear the current Unit Of Work and move to the previous one.
            </summary>
      <param name="unitOfWork">
      </param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.DisposeUnitOfWorkFactory">
      <summary>
            여러 Database에 작업 시 기존 UnitOfWorkFactory를 초기화 해줍니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.InLongConversation">
      <summary>
            Long-term transaction 중인지
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.IsStarted">
      <summary>
            Unit Of Work 가 시작되었는지 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.IsNotStarted">
      <summary>
            Unit Of Work가 시작되지 않았는지
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.CurrentLongConversationId">
      <summary>
            활성화중인 Long conversation identity 값
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.LongConversationIsPrivate">
      <summary>
            LongConversation이 Private mode인가?
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.Current">
      <summary>
            Current unit of work instance
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.CurrentSessionFactory">
      <summary>
            Current SessionFactory
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.CurrentSession">
      <summary>
            Current session
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.UnitOfWorkFactory">
      <summary>
            NOTE : Current UnitOfWorkFactory (여러 Container에서 작업시에 UnitOfWorkFactory가 변경될 수 있으므로, 꼭 IoC를 통해서 Resolve해야 한다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.UnitOfWork.QueryProvider">
      <summary>
            HQL 문장을 제공하는 Provider
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions">
      <summary>
        <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork" />를 중첩사용하기 위한 옵션
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions.ReturnExistingOrCreateUnitOfWork">
      <summary>
            현재 활성화된 <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork" />를 사용하던가, 새로 생성한다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.UnitOfWorkNestingOptions.CreateNewOrNestUnitOfWork">
      <summary>
            현재 활성화된 <see cref="T:NSoft.NFramework.Data.NHibernateEx.IUnitOfWork" />의 인스턴스가 아닌, 새로운 인스턴스를 생성한다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine">
      <summary>
            Database 종류
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.SQLite">
      <summary>
            SQLite for Memory DB
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.SQLiteForFile">
      <summary>
            SQLite for File
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.MsSqlCe">
      <summary>
            Microsoft Sql CE
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.MsSqlCe40">
      <summary>
            Microsoft Sql Ce 4.0
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.MsSql2005">
      <summary>
            Microsoft SQL Server 2005 or Higher
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.MsSql2005Express">
      <summary>
            Microsoft SQL Server 2005 Express or Higher
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.OdpNet">
      <summary>
            ODP.NET 을 통한 Oracle ( Oracle 10g 를 기본으로 한다)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.DevartOracle">
      <summary>
            Devart dotConnector for Oracle 을 이용한 Driver입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.MySql">
      <summary>
            MySQL 
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.PostgreSql">
      <summary>
            PostgreSql
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.Firebird">
      <summary>
            Firebird
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.DB2">
      <summary>
            IBM DB2
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.DatabaseEngine.Cubrid">
      <summary>
            Cubrid DB
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.INHOrder">
      <summary>
            NHibernate QueryOver의 정렬 작업 클래스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHOrder.OrderExpr">
      <summary>
            정렬을 위한 Lambda Expression
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHOrder.Ascending">
      <summary>
            정렬 방식
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.INHOrder`1">
      <summary>
            NHibernate QueryOver의 정렬 작업 클래스
            </summary>
      <typeparam name="T">정렬할 정보를 가지는 엔티티의 수형</typeparam>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHOrder`1.OrderExpr">
      <summary>
            정렬을 위한 Lambda Expression (예: u=&gt;u.Name)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHOrder`1.Ascending">
      <summary>
            정렬 방식
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.INHParameter">
      <summary>
            NHibernate용 Parameter 정보
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.INHParameter.Type">
      <summary>
            NHibernate용 인자의 Type
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.MappingContext">
      <summary>
            NHibernate Mapping 관련 정보
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.MappingContext.AsNamingText(System.String)">
      <summary>
            지정된 Naming 규칙에 따른 테이블 또는 컬럼명을 반환합니다. (예: Oracle Naming에서는 
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.MappingContext.ToAbbrName(System.String)">
      <summary>
        <paramref name="text" />에 <see cref="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.AbbrNameMap" />에 등록된 약어 변환 단어가 있더면 약어로 변환하여 반환합니다.
            </summary>
      <param name="text">원본 데이타</param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.DatabaseEngine">
      <summary>
            현재 사용하는 DB의 종류
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.DefaultMaxAnsiStringLength">
      <summary>
            기본 AnsiString의 최대 길이 (8000)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.DefaultMaxStringLength">
      <summary>
            기본 String의 최대 길이 (4000)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.MaxAnsiStringLength">
      <summary>
            AnsiString 수형에 대한 최대 문자 길이 (SQL Server의 경우에는 VARCHAR(MAX)를 사용하고, Oracle의 경우는 CLOB가 되던가 VARCHAR(8000)이 된다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.MaxStringLength">
      <summary>
            String 수형에 대한 최대 문자 길이 (SQL Server의 경우에는 VARCHAR(MAX)를 사용하고, Oracle의 경우는 CLOB가 되던가 VARCHAR(4000)이 된다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.IsSqlServer">
      <summary>
            현재 사용하는 Database이 SQL Server 종류인지 파악합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.UseLOB">
      <summary>
            Oracle의 경우도 VARCHAR/VARCHAR2 대신 CLOB를 사용할 것인가 여부 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.NamingRule">
      <summary>
            테이블명, 컬럼명에 대한 명명규칙 (기본은 <see cref="F:NSoft.NFramework.Data.NHibernateEx.NamingRuleKind.Pascal" /> 입니다)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.Properties">
      <summary>
            추가 속성 정보를 제공합니다. (Region, TablePrefix 등)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.MappingContext.AbbrNameMap">
      <summary>
            컬럼명으로 매핑시에 약어로 매핑해야 할 이름(단어) 매핑이다. (예: Department-Dept, Locale-Loc, Configuration-Conf 등)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NamingRuleKind">
      <summary>
            Naming 종류
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NamingRuleKind.Pascal">
      <summary>
            Pascal Naming 규칙 (속셩명 Naming과 동일)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.Data.NHibernateEx.NamingRuleKind.Oracle">
      <summary>
            Oracle Name 규칙 (모두 대문자로, 공백은 '_' 로 대체)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHIoC">
      <summary>
            NHibernate 용 Entity 정보를 파악해서, INHRepository{TEntity} 를 <see cref="T:NSoft.NFramework.InversionOfControl.IoC" />를 통해 <see cref="T:Castle.Windsor.WindsorContainer" />에 등록한다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHIoC.Register(Castle.Windsor.IWindsorContainer,NHibernate.ISessionFactory,System.Type,System.Predicate{System.Type})">
      <summary>
            지정된 <see cref="T:NHibernate.ISessionFactory" /> 인스턴스에 등록된 모든 NHibernate용 Entity를 조사해서,
            자동으로 Generic Dao (INHRepository{T} 구현 클래스)를 <see cref="T:Castle.MicroKernel.IKernel" />에 Component로 등록한다.
            이렇게 하면, NHRepository{T} 하나만 만들고, 실제 Entity별의 NHRepository는 Castle에 자동으로 등록되고, Instancing될 것이다!!!
            (예 NHRepository{Blog}, NHRepository{Customer} 등을 Castle Component로 정의하지 않아도, 이 함수에서 자동으로 조사하여, IoC에 등록시켜 준다는 뜻!!!)
            </summary>
      <param name="windsorContainer">Instance of Castle.Windsor.IWindsorContainer</param>
      <param name="sessionFactory">Instance of NHibernate.ISessionFactory</param>
      <param name="repositoryType">INHRepository{T} 를 구현한 Concrete Class Type</param>
      <param name="isCandidateForRepository">NHibernate의 매핑된 Entity 중에 IoC Container에 등록할 Type을 선별하는 Predicator</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHIoC.Register(Castle.MicroKernel.IKernel,NHibernate.ISessionFactory,System.Type,System.Predicate{System.Type})">
      <summary>
            지정된 <see cref="T:NHibernate.ISessionFactory" /> 인스턴스에 등록된 모든 NHibernate용 Entity를 조사해서,
            자동으로 Generic Dao (INHRepository{T} 구현 클래스)를 <see cref="T:Castle.MicroKernel.IKernel" />에 Component로 등록한다.
            이렇게 하면, NHRepository{T} 하나만 만들고, 실제 Entity별의 NHRepository는 Castle에 자동으로 등록되고, Instancing될 것이다!!!
            (예 NHRepository{Blog}, NHRepository{Customer} 등을 Castle Component로 정의하지 않아도, 이 함수에서 자동으로 조사하여, IoC에 등록시켜 준다는 뜻!!!)
            </summary>
      <param name="sessionFactory">NHibernate Session Factory</param>
      <param name="kernel">Castle.MicroKernel 인스턴스</param>
      <param name="repositoryType">INHRepository{T} 를 구현한 Concrete Class Type</param>
      <param name="isCandidateForRepository">NHibernate의 매핑된 Entity 중에 IoC Container에 등록할 Type을 선별하는 Predicator</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHIoC.ResolveInterceptor">
      <summary>
            IoC에 등록된 NHibernate.IInterceptor 를 가져온다. 
            만약 IoC Container 에 등록되어 있지 않다면 <see cref="T:NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor" />를 등록하고, Resolve를 수행한다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHIoC.ResolveAllInterceptors">
      <summary>
            이제 무조건 여러개의 NHibernate.IInterceptor를 등록할 수 있도록 했음!!! 등록된 것이 없으면 최소한 EntityStateInterceptor라도 등록되도록 했음
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHIoC.ResolveAllInterceptorsInternal">
      <summary>
            이제 무조건 여러개의 NHibernate.IInterceptor를 등록할 수 있도록 했음!!! 등록된 것이 없으면 최소한 EntityStateInterceptor라도 등록되도록 했음
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHOrder">
      <summary>
            NHibernate QueryOver의 정렬 작업 클래스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHOrder.OrderExpr">
      <summary>
            정렬을 위한 Lambda Expression
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHOrder`1">
      <summary>
            NHibernate QueryOver의 정렬 작업 클래스
            </summary>
      <typeparam name="T">정렬할 정보를 가지는 엔티티의 수형</typeparam>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHOrder`1.OrderExpr">
      <summary>
            정렬을 위한 Lambda Expression (예: u=&gt;u.Name)
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHOrder`1.Ascending">
      <summary>
            정렬 방식 (Ascending | Descending)
            </summary>
    </member>
    <member name="T:NSoft.NFramework.Data.NHibernateEx.NHParameter">
      <summary>
            NHibernate 의 Query 문의 Parameter를 정보를 표현하는 클래스입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHParameter.#ctor(System.String,System.Object)">
      <summary>
            Initialize a new instance of NHParameter with a specified parameter name and value
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHParameter.#ctor(System.String,System.Object,NHibernate.Type.IType)">
      <summary>
            Initialize a new instance of NHParameter with a specified parameter name, value, type
            </summary>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
      <param name="type">parameter type</param>
    </member>
    <member name="M:NSoft.NFramework.Data.NHibernateEx.NHParameter.ToString">
      <summary>
            현재 인스턴스의 내용을 표현하는 문자열을 반환합니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.Data.NHibernateEx.NHParameter.Type">
      <summary>
            NHibernate용 인자의 Type
            </summary>
    </member>
  </members>
</doc>