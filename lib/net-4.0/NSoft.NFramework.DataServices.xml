<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NSoft.NFramework.DataServices</name>
  </assembly>
  <members>
    <member name="T:NSoft.NFramework.DataServices.Adapters.DataServiceAdapter">
      <summary>
        <see cref="T:NSoft.NFramework.DataServices.IDataService" />의 요청정보 및 응답정보를 byte[] 또는 문자열로 통신할 수 있도록 하는 Adapter 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter">
      <summary>
        <see cref="T:NSoft.NFramework.DataServices.IDataService" />의 요청정보 및 응답정보를 byte[] 또는 문자열로 통신할 수 있도록 하는 Adapter 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.Execute(System.Byte[])">
      <summary>
            1. 직렬화된 정보를 <see cref="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.RequestSerializer" />를 이용하여, 역직렬화를 수행. <see cref="T:NSoft.NFramework.DataServices.Messages.RequestMessage" />를 빌드<br />
            2. 요청정보를  <see cref="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.DataService" />에 전달하여, 실행 후, 응답정보를 반환 받음<br />
            3. 응답정보를 <see cref="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.ResponseSerializer" />를 통해 직렬화하여 byte[] 로 반환함.
            </summary>
      <param name="requestBytes">직렬화된 요청 Data</param>
      <returns>응답정보를 직렬화한 byte[]</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.Execute(System.String)">
      <summary>
            입력정보를 <see cref="T:NSoft.NFramework.DataServices.Messages.RequestMessage" />로 변환하여, 요청 작업 후, <see cref="T:NSoft.NFramework.DataServices.Messages.ResponseMessage" />를 직렬화하여 반환합니다.
            </summary>
      <param name="requestText">요청 데이터</param>
      <returns>응답정보를 직렬화한 문자열</returns>
    </member>
    <member name="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.DataService">
      <summary>
            요청정보를 처리하여 응답정보를 빌드하는 DataService 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.RequestSerializer">
      <summary>
            직렬화된 요청정보를 역직렬화를 수행하는 <see cref="T:NSoft.NFramework.ISerializer`1" /> 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.ResponseSerializer">
      <summary>
            응답정보를 직렬화하는 <see cref="T:NSoft.NFramework.ISerializer`1" /> 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.Adapters.DataServiceAdapter.Execute(System.Byte[])">
      <summary>
            1. 직렬화된 정보를 <see cref="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.RequestSerializer" />를 이용하여, 역직렬화를 수행. <see cref="T:NSoft.NFramework.DataServices.Messages.RequestMessage" />를 빌드<br />
            2. 요청정보를  <see cref="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.DataService" />에 전달하여, 실행 후, 응답정보를 반환 받음<br />
            3. 응답정보를 <see cref="P:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter.ResponseSerializer" />를 통해 직렬화하여 byte[] 로 반환함.
            </summary>
      <param name="requestBytes">직렬화된 요청 Data</param>
      <returns>응답정보를 직렬화한 byte[]</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.Adapters.DataServiceAdapter.Execute(System.String)">
      <summary>
            입력정보를 <see cref="T:NSoft.NFramework.DataServices.Messages.RequestMessage" />로 변환하여, 요청 작업 후, <see cref="T:NSoft.NFramework.DataServices.Messages.ResponseMessage" />를 직렬화하여 반환합니다.
            </summary>
      <param name="requestText">요청 데이터</param>
      <returns>응답정보를 직렬화한 문자열</returns>
    </member>
    <member name="P:NSoft.NFramework.DataServices.Adapters.DataServiceAdapter.DataService">
      <summary>
            요청정보를 처리하여 응답정보를 빌드하는 DataService 
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.Adapters.DataServiceAdapter.RequestSerializer">
      <summary>
            직렬화된 요청정보를 역직렬화를 수행하는 <see cref="T:NSoft.NFramework.ISerializer`1" /> 입니다.
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.Adapters.DataServiceAdapter.ResponseSerializer">
      <summary>
            응답정보를 직렬화하는 <see cref="T:NSoft.NFramework.ISerializer`1" /> 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataCommands.AbstractDataCommand">
      <summary>
            Command 패턴을 이용하여, Data 처리를 수행합니다. Data 처리를 위한 Command 의 가장 추상적인 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.IDataCommand">
      <summary>
            Data 처리를 수행하는 Command를 나타내는 인터페이스입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.IDataCommand.Execute(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
            Command를 수행하고, 결과를 XML 문자열로 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="requestItem">요청정보</param>
      <returns>Data 처리 결과의 XML 문자열</returns>
    </member>
    <member name="P:NSoft.NFramework.DataServices.IDataCommand.NameMapper">
      <summary>
            Name Mapper
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractDataCommand.Execute(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
            Command를 수행하고, 결과를 XML 문자열로 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="requestItem">요청 정보</param>
      <returns>Data 처리 결과의 XML 문자열</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractDataCommand.GetParameters(System.Collections.Generic.IEnumerable{NSoft.NFramework.DataServices.Messages.RequestParameter})">
      <summary>
            실행에 필요한 인자정보를  <see cref="T:NSoft.NFramework.Data.IAdoParameter" /> 형식으로 만들어 배열로 제공합니다.
            </summary>
      <param name="requestParameters">요청 정보의 인자들</param>
      <returns>
      </returns>
    </member>
    <member name="P:NSoft.NFramework.DataServices.DataCommands.AbstractDataCommand.Repository">
      <summary>
            WorkRepository
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.DataCommands.AbstractDataCommand.NameMapper">
      <summary>
            Name Mapper	( BpaContext 로 이동 시켜야 함 )
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractEntityCommand`1.Execute(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
            Command를 수행하고, 결과를 XML 문자열로 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="requestItem">요청 정보</param>
      <returns>Data 처리 결과의 XML 문자열</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractEntityCommand`1.BuildResponse(System.Data.IDataReader)">
      <summary>
            실행 결과인 <paramref name="reader" />를 반환합니다.
            </summary>
      <param name="reader">
      </param>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataCommands.AbstractNonQueryCommand">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />를 수행하고, Output Parameter 등을 반환하는 Command 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractNonQueryCommand.Execute(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
            Command를 수행하고, 결과를 XML 문자열로 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="requestItem">요청 정보</param>
      <returns>Data 처리 결과의 XML 문자열</returns>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataCommands.AbstractReaderCommand">
      <summary>
        <see cref="M:System.Data.IDbCommand.ExecuteReader" />를 수행하여, <see cref="T:System.Data.IDataReader" />로부터 정보를 XML 문자열로 반환하도록 합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractReaderCommand.Execute(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
            Command를 수행하고, 결과를 XML 문자열로 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="requestItem">요청 정보</param>
      <returns>Data 처리 결과의 XML 문자열</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractReaderCommand.BuildResponse(System.Data.IDataReader)">
      <summary>
            실행 결과인 <paramref name="reader" />를 반환합니다.
            </summary>
      <param name="reader">
      </param>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataCommands.AbstractScalarCommand">
      <summary>
            ExecuteScalar 를 수행하여, Scalar 값을 반환하는 Command 입니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.AbstractScalarCommand.Execute(NSoft.NFramework.Data.IAdoRepository,NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
            Command를 수행하고, 결과를 XML 문자열로 반환합니다.
            </summary>
      <param name="repository">Repository</param>
      <param name="requestItem">요청 정보</param>
      <returns>Data 처리 결과의 XML 문자열</returns>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataCommands.DataCommandTool">
      <summary>
            DataCommand 관련 Helper Class
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataCommands.DataCommandTool.GetCommand(System.String)">
      <summary>
            지정한 메소드에 해당하는 <see cref="T:NSoft.NFramework.DataServices.IDataCommand" /> 인스턴스를 IoC로부터 Resolve합니다.
            </summary>
      <param name="method">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataServiceImpl">
      <summary>
            요청 정보 (<see cref="T:NSoft.NFramework.DataServices.Messages.RequestMessage" />)를 받아, 처리하고, 응답 정보 (<see cref="T:NSoft.NFramework.DataServices.Messages.ResponseMessage" />)를 빌드하는 기본 DataService 입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.IDataService">
      <summary>
            JSON Data Service의 인터페이스
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.IDataService.Execute(NSoft.NFramework.DataServices.Messages.RequestMessage)">
      <summary>
            DATA 처리를 위한 요청정보를 처리해서, 응답정보를 빌드해서 반환합니다.
            </summary>
      <param name="requestMessage">요청 메시지</param>
      <returns>응답 메시지</returns>
    </member>
    <member name="P:NSoft.NFramework.DataServices.IDataService.AdoRepository">
      <summary>
            Data 처리 시에 사용할 <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.IDataService.NameMapper">
      <summary>
            Database 컬럼명을 Class 의 속성명으로 매핑해주는 Mapper입니다.
            </summary>
      <seealso cref="T:NSoft.NFramework.Data.Mappers.CapitalizeNameMapper" />
      <seealso cref="T:NSoft.NFramework.Data.Mappers.TrimNameMapper" />
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceImpl.Execute(NSoft.NFramework.DataServices.Messages.RequestMessage)">
      <summary>
            DATA 처리를 위한 요청정보를 처리해서, 응답정보를 빌드해서 반환합니다.
            </summary>
      <param name="requestMessage">요청 메시지</param>
      <returns>응답 메시지</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceImpl.OpenQuery(NSoft.NFramework.DataServices.Messages.RequestItem,NSoft.NFramework.DataServices.Messages.ResponseItem,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            요청 쿼리 문을 수행하여, <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" /> 으로 빌드하여, 응답 결과를 적용합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceImpl.ExecuteQuery(NSoft.NFramework.DataServices.Messages.RequestItem,NSoft.NFramework.DataServices.Messages.ResponseItem,NSoft.NFramework.Data.IAdoParameter[])">
      <summary>
            요청 쿼리 문을 수행하는데, 
            <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteNonQuery(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 나 
            <see cref="M:NSoft.NFramework.Data.IAdoRepository.ExecuteScalar(System.String,NSoft.NFramework.Data.IAdoParameter[])" /> 를 실행합니다.
            </summary>
      <param name="requestItem">
      </param>
      <param name="responseItem">
      </param>
      <param name="adoParameters">
      </param>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceImpl.ExecuteQueries(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            단순 쿼리문에 대해서, ExecuteNonQuery를 수행합니다.
            </summary>
      <param name="queries">
      </param>
    </member>
    <member name="P:NSoft.NFramework.DataServices.DataServiceImpl.AdoRepository">
      <summary>
            Data 처리 시에 사용할 <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스
            </summary>
    </member>
    <member name="P:NSoft.NFramework.DataServices.DataServiceImpl.NameMapper">
      <summary>
        <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" />의 컬럼명을 Class 속성으로 
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.AsyncDataServiceImpl">
      <summary>
            비동기 방식으로 DataService를 제공하는 클래스입니다.
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataService">
      <summary>
            Data Service 의 Static Class 입니다. 실제 IDataService 구현체를 생성하지 않고, IoC로부터 인스턴스를 Resolve 해서 사용합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataService.Execute(NSoft.NFramework.DataServices.Messages.RequestMessage)">
      <summary>
            DATA 처리를 위한 요청정보를 처리해서, 응답정보를 빌드해서 반환합니다.
            </summary>
      <param name="requestMessage">요청 메시지</param>
      <returns>응답 메시지</returns>
    </member>
    <member name="P:NSoft.NFramework.DataServices.DataService.AdoRepository">
      <summary>
            Data 처리 시에 사용할 <see cref="T:NSoft.NFramework.Data.IAdoRepository" /> 인스턴스
            </summary>
    </member>
    <member name="T:NSoft.NFramework.DataServices.DataServiceTool">
      <summary>
            Data Service를 위한 Tool Class 입니다.
            </summary>
    </member>
    <member name="F:NSoft.NFramework.DataServices.DataServiceTool.INVALID_ID">
      <summary>
            Invalid Identity Value of Object (-1)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.DataServices.DataServiceTool.NO_PAGE_INDEX">
      <summary>
            No Page Index (0)
            </summary>
    </member>
    <member name="F:NSoft.NFramework.DataServices.DataServiceTool.NoRequestProvided">
      <summary>
            No Request Message provided.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveDataServiceAdapter">
      <summary>
            지정된 DB에 대해 작업을 수행하는 <see cref="T:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter" />를 Container로부터 Resolve 합니다.
            Component 명은 <see cref="F:NSoft.NFramework.DataServices.DataServiceTool.DataServiceAdapterPrefix" />.<see cref="P:NSoft.NFramework.Data.AdoTool.DefaultDatabaseName" /> 형식입니다.
            </summary>
      <returns>
        <see cref="T:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveDataServiceAdapter(System.String)">
      <summary>
            지정된 DB에 대해 작업을 수행하는 <see cref="T:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter" />를 Container로부터 Resolve 합니다.
            Component 명은 <see cref="F:NSoft.NFramework.DataServices.DataServiceTool.DataServiceAdapterPrefix" />.<paramref name="dbName" /> 형식입니다.
            </summary>
      <param name="dbName">Data 요청을 처리할 DB ConnectionString Name</param>
      <returns>
        <see cref="T:NSoft.NFramework.DataServices.Adapters.IDataServiceAdapter" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveDataService">
      <summary>
            IoC Container로부터 <see cref="T:NSoft.NFramework.DataServices.IDataService" /> 컴포넌트를 Resolve 합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveDataService(System.String)">
      <summary>
            IoC Container로부터 <see cref="T:NSoft.NFramework.DataServices.IDataService" /> 컴포넌트를 Resolve 합니다.
            </summary>
      <param name="dbName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveRequestSerializer">
      <summary>
        <see cref="T:NSoft.NFramework.ISerializer`1" />를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveRequestSerializer(System.String)">
      <summary>
        <see cref="T:NSoft.NFramework.ISerializer`1" />를 생성합니다.
            </summary>
      <param name="dbName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveResponseSerializer">
      <summary>
        <see cref="T:NSoft.NFramework.ISerializer`1" />를 생성합니다.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ResolveResponseSerializer(System.String)">
      <summary>
        <see cref="T:NSoft.NFramework.ISerializer`1" />를 생성합니다.
            </summary>
      <param name="dbName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.CreateResultSet(System.Data.IDataReader)">
      <summary>
        <paramref name="reader" />를 읽어, <see cref="T:NSoft.NFramework.DataServices.Messages.ResultRow" />의 컬렉션인 <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" />을 빌드합니다.
            </summary>
      <param name="reader">DataReader</param>
      <returns>
        <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.CreateResultSet(System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <paramref name="reader" />를 읽어, <see cref="T:NSoft.NFramework.DataServices.Messages.ResultRow" />의 컬렉션인 <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" />을 빌드합니다.
            </summary>
      <param name="reader">DataReader</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수</param>
      <returns>
        <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.CreateResultSet(System.Data.IDataReader,NSoft.NFramework.Data.Mappers.INameMapper)">
      <summary>
        <paramref name="reader" />를 읽어, <see cref="T:NSoft.NFramework.DataServices.Messages.ResultRow" />의 컬렉션인 <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" />을 빌드합니다.
            </summary>
      <param name="reader">DataReader</param>
      <param name="nameMapper">컬럼명을 속성명으로 매핑해주는 매퍼입니다.</param>
      <returns>
        <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.CreateResultSet(System.Data.IDataReader,NSoft.NFramework.Data.Mappers.INameMapper,System.Int32,System.Int32)">
      <summary>
        <paramref name="reader" />를 읽어, <see cref="T:NSoft.NFramework.DataServices.Messages.ResultRow" />의 컬렉션인 <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" />을 빌드합니다.
            </summary>
      <param name="reader">DataReader</param>
      <param name="nameMapper">컬럼명을 속성명으로 매핑해주는 매퍼입니다.</param>
      <param name="firstResult">첫번째 레코드 인덱스 (0부터 시작)</param>
      <param name="maxResults">최대 레코드 수</param>
      <returns>
        <see cref="T:NSoft.NFramework.DataServices.Messages.ResultSet" /> 인스턴스</returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.LoadQueryStatements(NSoft.NFramework.DataServices.IDataService,NSoft.NFramework.DataServices.Messages.RequestMessage)">
      <summary>
        <paramref name="requestMessage" />의 Method 를 서버에서 관련 Query 문장으로 매핑합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.AssertDataService(NSoft.NFramework.DataServices.IDataService)">
      <summary>
        <paramref name="dataService" />의 주요 속성에 대한 유효성 검사를 수행합니다. 유효성을 만족하지 못하면, <see cref="T:System.InvalidOperationException" />을 발생시킵니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.ReportError(NSoft.NFramework.DataServices.Messages.ResponseMessage,System.Exception)">
      <summary>
        <paramref name="responseMessage" />에 예외정보를 추가합니다.
            </summary>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.CreateResponseMessageWithException(System.Exception[])">
      <summary>
            지정된 예외정보를 포함하는 응답메시지를 빌드합니다. 
            </summary>
      <param name="exceptions">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NSoft.NFramework.DataServices.DataServiceTool.BuildAdoParameters(NSoft.NFramework.DataServices.Messages.RequestItem)">
      <summary>
        <paramref name="requestItem" />의 Parameters 정보를 바탕으로 <see cref="T:NSoft.NFramework.Data.IAdoParameter" /> 컬렉션을 빌드합니다.
            </summary>
      <param name="requestItem">
      </param>
      <returns>
      </returns>
    </member>
  </members>
</doc>