<?xml version="1.0" encoding="utf-8"?>

<configuration>

	<!-- Common Properties -->
	<properties>
		<!-- ADO QueryString File name-->
		<adoQueryStringFile>NAccess.ado.mssql.ini</adoQueryStringFile>

		<!-- NHibernate 사용시 -->
		<DefaultHibernateConfiguraion>NAccess.hibernate.cfg.xml</DefaultHibernateConfiguraion>
	</properties>

	<!-- NSoft.NFramework.Data에서 사용하는 기본 Components -->
	<components>

		<!-- 기본 AdoRepository : NHibernate만 사용 시에는 필요없다.-->
		<component id="AdoRepository" 
				   service="NSoft.NFramework.Data.IAdoRepository, NSoft.NFramework.Data" 
				   type="NSoft.NFramework.Data.SqlServer.SqlRepositoryImpl, NSoft.NFramework.Data" 
				   lifestyle="Thread">
			<parameters>
				<QueryStringProvider>${IniAdoQueryStringProvider}</QueryStringProvider>
			</parameters>
		</component>

		<!-- QueryStringProvider -->
		<component id="IniAdoQueryStringProvider"
				   service="NSoft.NFramework.Data.IIniQueryProvider, NSoft.NFramework.Data"
		           type="NSoft.NFramework.Data.QueryProviders.IniAdoQueryProvider, NSoft.NFramework.Data">
			<parameters>
				<queryFilePath>./QueryFiles/#{adoQueryStringFile}</queryFilePath>
			</parameters>
		</component>

		<!-- NHibernate 용 Generic Repository : NHRepository{TEntity} 를 생성한다. lifestyle=singleton|transient|thread-->
		<component id="nhibernate.repository"
				   service="NSoft.NFramework.Data.NHibernateEx.INHRepository`1, NSoft.NFramework.Data.NHibernateEx" 
				   type="NSoft.NFramework.Data.NHibernateEx.NHRepository`1, NSoft.NFramework.Data.NHibernateEx" />

		<!-- UnitOfWork 사용을 위한 Factory -->
		<component id="nhibernate.unit-of-work.factory" 
				   service="NSoft.NFramework.Data.NHibernateEx.IUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx" 
				   type="NSoft.NFramework.Data.NHibernateEx.FluentNHUnitOfWorkFactory, NSoft.NFramework.Data.NHibernateEx">
			<parameters>
				<cfgFileName>#{DefaultHibernateConfiguraion}</cfgFileName>
			</parameters>
		</component>

		<!-- 
			NHibernate Entity의 상태 및 Lifecycle 를 추적할 수 있는 Interceptor
			Entity의 IsSaved, IsTransient 상태를 관리합니다. 
		-->
		<component id="nhibernate.interceptor"
				   service="NHibernate.IInterceptor, NHibernate"
				   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.EntityStateInterceptor, NSoft.NFramework.Data.NHibernateEx"/>
		<!--
			NHibernate Entity에 INotifyPropertyChanged, IEditableObject 인터페이스를 가지도록 Proxy로 제공하는 Interceptor입니다.
		-->
		<component id="NotifyPropertyChangedInterceptor"
				   service="NHibernate.IInterceptor, NHibernate"
				   type="NSoft.NFramework.Data.NHibernateEx.Interceptors.EditablePropertyChangedInterceptor, NSoft.NFramework.Data.NHibernateEx"/>

	</components>
</configuration>