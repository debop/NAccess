<?xml version="1.0" encoding="utf-8"?>

<hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">
    
	<session-factory name="NSoft.NAccess.SessionFactory">

		<property name="connection.provider">NHibernate.Connection.DriverConnectionProvider</property>
		<property name="dialect">NHibernate.Dialect.MsSql2005Dialect</property>
		<property name="connection.connection_string_name">NAccessTest</property>
		
		<!-- MSSQL일 경우 default_schema를 지정하면 성능향상이 된다.-->
		<property name="default_schema">NAccessTest.dbo</property>

		<property name="connection.isolation">ReadCommitted</property>
		<property name="command_timeout">90</property>
		<property name="query.substitutions">true 1, false 0, yes 'Y', no 'N'</property>

		<property name="query.startup_check">true</property>
		<property name="prepare_sql">true</property>
		<property name="show_sql">true</property>
		<property name="format_sql">true</property>

		<!-- SQL Server 인 경우에는 10 ~ 50 사이, Oracle인 경우에는 0을 지정해야 합니다.-->
		<property name="adonet.batch_size">50</property>
		<property name="adonet.wrap_result_sets">true</property>

    	<!-- DML-style operations : delete/insert/update/bulk copy 시에 hql을 이용할 수 있다. (예: delete Enitty)-->
		<property name="query.factory_class">NHibernate.Hql.Ast.ANTLR.ASTQueryTranslatorFactory, NHibernate</property>

		<!-- http://fabiomaulo.blogspot.com/2009/06/auto-quote-tablecolumn-names.html -->
		<!-- none으로 해야 cfg.BuildSessionFactory() 시에 Connection을 만들지 않는다. -->
		<property name="hbm2ddl.keywords">none</property>
		
		<!-- 2nd Level Cache -->
		<property name="cache.region_prefix">NSoft.NAccess</property>
		<property name="cache.use_second_level_cache">true</property>
		<property name="cache.use_query_cache">true</property>
		<property name="cache.use_minimal_puts">true</property>

		<property name="cache.provider_class">NHibernate.Cache.HashtableCacheProvider, NHibernate</property>
		<!--<property name="cache.provider_class">RCL.SharedCache.NHCaches.SharedCacheProvider, RCL.SharedCache.NHCaches</property>-->


		<!-- Mapping assembly / entity-->
		<mapping assembly="NSoft.NAccess" />
		
		<!-- 2nd Level Cache Class-->
		<!-- Fluent Mapping 에서는 사용할 수 없다. -->
        <!--
		<class-cache class="NSoft.NAccess.Domain.Model.Company, NSoft.NAccess" usage="nonstrict-read-write" include="all"/>
		<class-cache class="NSoft.NAccess.Domain.Model.Department, NSoft.NAccess" usage="nonstrict-read-write" include="all"/>
		<class-cache class="NSoft.NAccess.Domain.Model.User, NSoft.NAccess" usage="nonstrict-read-write" include="all"/>
		<class-cache class="NSoft.NAccess.Domain.Model.Product, NSoft.NAccess" usage="nonstrict-read-write" include="all"/>
        -->

		<!-- 엔티티가 IUpdateTimestampedEntity 를 구현한 것이면, UpdateTimestamp 값을 Insert/Update시에 NHibernate가 자동으로 갱신해준다. -->
		<listener type="pre-insert" class="NSoft.NFramework.Data.NHibernateEx.EventListeners.UpdateTimestampEventListener, NSoft.NFramework.Data.NHibernateEx"/>
		<listener type="pre-update" class="NSoft.NFramework.Data.NHibernateEx.EventListeners.UpdateTimestampEventListener, NSoft.NFramework.Data.NHibernateEx"/>

	</session-factory>
</hibernate-configuration>